{
  "info": {
    "name": "StudentResource",
    "default-cluster-id": 3,
    "exporter-version": 12,
    "engine-version": "3.0.17 - Veloce (build 84af3dc7a5f8bca700354564d5fcc3b7545441fc, branch 3.0.x)",
    "engine-build": "84af3dc7a5f8bca700354564d5fcc3b7545441fc",
    "storage-config-version": 22,
    "schema-version": 4,
    "schemaRecordId": "#0:1",
    "indexMgrRecordId": "#0:2"
  },
  "clusters": [
    { "name": "internal", "id": 0 },
    { "name": "index", "id": 1 },
    { "name": "manindex", "id": 2 },
    { "name": "default", "id": 3 },
    { "name": "orole", "id": 4 },
    { "name": "ouser", "id": 5 },
    { "name": "ofunction", "id": 6 },
    { "name": "osequence", "id": 7 },
    { "name": "oschedule", "id": 8 },
    { "name": "v", "id": 9 },
    { "name": "e", "id": 10 },
    { "name": "_studio", "id": 11 },
    { "name": "teaches", "id": 12 },
    { "name": "concept", "id": 13 },
    { "name": "construct", "id": 14 },
    { "name": "error", "id": 15 },
    { "name": "resource", "id": 16 },
    { "name": "example", "id": 17 },
    { "name": "designexample", "id": 18 },
    { "name": "contain", "id": 19 },
    { "name": "data", "id": 20 },
    { "name": "produce", "id": 21 },
    { "name": "require", "id": 22 },
    { "name": "implements", "id": 23 },
    { "name": "explain", "id": 24 },
    { "name": "discussion", "id": 25 },
    { "name": "lecture", "id": 26 },
    { "name": "appear", "id": 27 },
    { "name": "entity", "id": 28 },
    { "name": "csexample", "id": 29 },
    { "name": "coreexample", "id": 30 },
    { "name": "mtexample", "id": 31 },
    { "name": "python", "id": 32 },
    { "name": "related", "id": 33 },
    { "name": "theme", "id": 34 },
    { "name": "module", "id": 35 },
    { "name": "cserror", "id": 36 },
    { "name": "mterror", "id": 37 },
    { "name": "coreerror", "id": 38 },
    { "name": "exrelated", "id": 39 },
    { "name": "fullexample", "id": 40 },
    { "name": "hascode", "id": 41 }
  ],
  "schema": {
    "version": 1,
    "blob-clusters": [],
    "classes": [
      {
        "name": "CSError",
        "default-cluster-id": 36,
        "cluster-ids": [36],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "CSExample",
        "default-cluster-id": 29,
        "cluster-ids": [29],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "Concept",
        "default-cluster-id": 13,
        "cluster-ids": [13],
        "super-classes": ["V"],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "Label", "type": "STRING", "collate": "default" }
        ]
      },
      {
        "name": "Construct",
        "default-cluster-id": 14,
        "cluster-ids": [14],
        "super-classes": ["Concept"],
        "cluster-selection": "round-robin",
        "properties": []
      },
      {
        "name": "CoreError",
        "default-cluster-id": 38,
        "cluster-ids": [38],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "CoreExample",
        "default-cluster-id": 30,
        "cluster-ids": [30],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "Data",
        "default-cluster-id": 20,
        "cluster-ids": [20],
        "super-classes": ["Concept"],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "Body", "type": "STRING", "collate": "default" }
        ]
      },
      {
        "name": "DesignExample",
        "default-cluster-id": 18,
        "cluster-ids": [18],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "Discussion",
        "default-cluster-id": 25,
        "cluster-ids": [25],
        "super-classes": ["Data"],
        "cluster-selection": "round-robin",
        "properties": []
      },
      {
        "name": "E",
        "default-cluster-id": 10,
        "cluster-ids": [10],
        "cluster-selection": "round-robin"
      },
      {
        "name": "Entity",
        "default-cluster-id": 28,
        "cluster-ids": [28],
        "super-classes": ["V"],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "Label", "type": "STRING", "collate": "default" }
        ]
      },
      {
        "name": "Error",
        "default-cluster-id": 15,
        "cluster-ids": [15],
        "super-classes": ["Data"],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "Explanation", "type": "STRING", "collate": "default" }
        ]
      },
      {
        "name": "Example",
        "default-cluster-id": 17,
        "cluster-ids": [17],
        "super-classes": ["Data"],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "Explanation", "type": "STRING", "collate": "default" }
        ]
      },
      {
        "name": "FullExample",
        "default-cluster-id": 40,
        "cluster-ids": [40],
        "super-classes": ["V"],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "Class1", "type": "STRING", "collate": "default" },
          { "name": "Class2", "type": "STRING", "collate": "default" },
          { "name": "Class3", "type": "STRING", "collate": "default" }
        ]
      },
      {
        "name": "HasCode",
        "default-cluster-id": 41,
        "cluster-ids": [41],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "Lecture",
        "default-cluster-id": 26,
        "cluster-ids": [26],
        "super-classes": ["V"],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "Number", "type": "INTEGER", "collate": "default" }
        ]
      },
      {
        "name": "MTError",
        "default-cluster-id": 37,
        "cluster-ids": [37],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "MTExample",
        "default-cluster-id": 31,
        "cluster-ids": [31],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "Module",
        "default-cluster-id": 35,
        "cluster-ids": [35],
        "super-classes": ["V"],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "ModuleCode", "type": "STRING", "collate": "default" }
        ]
      },
      {
        "name": "OFunction",
        "default-cluster-id": 6,
        "cluster-ids": [6],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "code", "type": "STRING", "collate": "default" },
          { "name": "idempotent", "type": "BOOLEAN", "collate": "default" },
          { "name": "language", "type": "STRING", "collate": "default" },
          { "name": "name", "type": "STRING", "collate": "default" },
          {
            "name": "parameters",
            "type": "EMBEDDEDLIST",
            "linked-type": "STRING",
            "collate": "default"
          }
        ]
      },
      {
        "name": "OIdentity",
        "default-cluster-id": -1,
        "cluster-ids": [-1],
        "abstract": true,
        "cluster-selection": "round-robin"
      },
      {
        "name": "ORestricted",
        "default-cluster-id": -1,
        "cluster-ids": [-1],
        "abstract": true,
        "cluster-selection": "round-robin",
        "properties": [
          {
            "name": "_allow",
            "type": "LINKSET",
            "linked-class": "OIdentity",
            "collate": "default"
          },
          {
            "name": "_allowDelete",
            "type": "LINKSET",
            "linked-class": "OIdentity",
            "collate": "default"
          },
          {
            "name": "_allowRead",
            "type": "LINKSET",
            "linked-class": "OIdentity",
            "collate": "default"
          },
          {
            "name": "_allowUpdate",
            "type": "LINKSET",
            "linked-class": "OIdentity",
            "collate": "default"
          }
        ]
      },
      {
        "name": "ORole",
        "default-cluster-id": 4,
        "cluster-ids": [4],
        "super-classes": ["OIdentity"],
        "cluster-selection": "round-robin",
        "properties": [
          {
            "name": "inheritedRole",
            "type": "LINK",
            "linked-class": "ORole",
            "collate": "default"
          },
          { "name": "mode", "type": "BYTE", "collate": "default" },
          {
            "name": "name",
            "type": "STRING",
            "mandatory": true,
            "not-null": true,
            "collate": "ci"
          },
          {
            "name": "rules",
            "type": "EMBEDDEDMAP",
            "linked-type": "BYTE",
            "collate": "default"
          }
        ]
      },
      {
        "name": "OSchedule",
        "default-cluster-id": 8,
        "cluster-ids": [8],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "arguments", "type": "EMBEDDEDMAP", "collate": "default" },
          {
            "name": "function",
            "type": "LINK",
            "mandatory": true,
            "not-null": true,
            "linked-class": "OFunction",
            "collate": "default"
          },
          {
            "name": "name",
            "type": "STRING",
            "mandatory": true,
            "not-null": true,
            "collate": "default"
          },
          {
            "name": "rule",
            "type": "STRING",
            "mandatory": true,
            "not-null": true,
            "collate": "default"
          },
          { "name": "starttime", "type": "DATETIME", "collate": "default" },
          { "name": "status", "type": "STRING", "collate": "default" }
        ]
      },
      {
        "name": "OSequence",
        "default-cluster-id": 7,
        "cluster-ids": [7],
        "cluster-selection": "round-robin",
        "properties": [
          { "name": "incr", "type": "INTEGER", "collate": "default" },
          { "name": "name", "type": "STRING", "collate": "default" },
          { "name": "start", "type": "LONG", "collate": "default" },
          { "name": "type", "type": "STRING", "collate": "default" },
          { "name": "value", "type": "LONG", "collate": "default" }
        ]
      },
      {
        "name": "OTriggered",
        "default-cluster-id": -1,
        "cluster-ids": [-1],
        "abstract": true,
        "cluster-selection": "round-robin"
      },
      {
        "name": "OUser",
        "default-cluster-id": 5,
        "cluster-ids": [5],
        "super-classes": ["OIdentity"],
        "cluster-selection": "round-robin",
        "properties": [
          {
            "name": "name",
            "type": "STRING",
            "mandatory": true,
            "not-null": true,
            "min": "1",
            "collate": "ci",
            "regexp": "\\S+(.*\\S+)*"
          },
          {
            "name": "password",
            "type": "STRING",
            "mandatory": true,
            "not-null": true,
            "collate": "default"
          },
          {
            "name": "roles",
            "type": "LINKSET",
            "linked-class": "ORole",
            "collate": "default"
          },
          {
            "name": "status",
            "type": "STRING",
            "mandatory": true,
            "not-null": true,
            "collate": "default"
          }
        ]
      },
      {
        "name": "Python",
        "default-cluster-id": 32,
        "cluster-ids": [32],
        "super-classes": ["Entity"],
        "cluster-selection": "round-robin",
        "properties": []
      },
      {
        "name": "Related",
        "default-cluster-id": 33,
        "cluster-ids": [33],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "Resource",
        "default-cluster-id": 16,
        "cluster-ids": [16],
        "super-classes": ["Data"],
        "cluster-selection": "round-robin",
        "properties": []
      },
      {
        "name": "Theme",
        "default-cluster-id": 34,
        "cluster-ids": [34],
        "super-classes": ["V"],
        "cluster-selection": "round-robin",
        "properties": [
          {
            "name": "Name",
            "type": "STRING",
            "mandatory": true,
            "collate": "default"
          }
        ]
      },
      {
        "name": "V",
        "default-cluster-id": 9,
        "cluster-ids": [9],
        "cluster-selection": "round-robin"
      },
      {
        "name": "_studio",
        "default-cluster-id": 11,
        "cluster-ids": [11],
        "cluster-selection": "round-robin"
      },
      {
        "name": "appear",
        "default-cluster-id": 27,
        "cluster-ids": [27],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "contain",
        "default-cluster-id": 19,
        "cluster-ids": [19],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "exRelated",
        "default-cluster-id": 39,
        "cluster-ids": [39],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "explain",
        "default-cluster-id": 24,
        "cluster-ids": [24],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "implements",
        "default-cluster-id": 23,
        "cluster-ids": [23],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "produce",
        "default-cluster-id": 21,
        "cluster-ids": [21],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "require",
        "default-cluster-id": 22,
        "cluster-ids": [22],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      },
      {
        "name": "teaches",
        "default-cluster-id": 12,
        "cluster-ids": [12],
        "super-classes": ["E"],
        "cluster-selection": "round-robin"
      }
    ]
  },
  "records": [
    { "@type": "b", "@rid": "#0:0", "@version": 1, "value": "AAAAAA==" },
    {
      "@type": "d",
      "@rid": "#0:1",
      "@version": 282,
      "schemaVersion": 4,
      "classes": [
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": -1,
          "strictMode": false,
          "description": null,
          "abstract": true,
          "clusterIds": [-1],
          "superClass": null,
          "name": "ORestricted",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "linkedClass": "OIdentity",
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 10,
              "description": null,
              "type": 15,
              "mandatory": false,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "_allowDelete"
            },
            {
              "@type": "d",
              "@version": 0,
              "linkedClass": "OIdentity",
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 7,
              "description": null,
              "type": 15,
              "mandatory": false,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "_allow"
            },
            {
              "@type": "d",
              "@version": 0,
              "linkedClass": "OIdentity",
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 9,
              "description": null,
              "type": 15,
              "mandatory": false,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "_allowUpdate"
            },
            {
              "@type": "d",
              "@version": 0,
              "linkedClass": "OIdentity",
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 8,
              "description": null,
              "type": 15,
              "mandatory": false,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "_allowRead"
            }
          ],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 19,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [19],
          "superClass": "E",
          "name": "contain",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 32,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [32],
          "superClass": "Entity",
          "name": "Python",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["Entity"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": -1,
          "strictMode": false,
          "description": null,
          "abstract": true,
          "clusterIds": [-1],
          "superClass": null,
          "name": "OTriggered",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 15,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [15],
          "superClass": "Data",
          "name": "Error",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Explanation",
              "globalId": 28,
              "description": null,
              "type": 7,
              "mandatory": false
            }
          ],
          "superClasses": ["Data"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 14,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [14],
          "superClass": "Concept",
          "name": "Construct",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["Concept"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 11,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [11],
          "superClass": null,
          "name": "_studio",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 4,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [4],
          "superClass": "OIdentity",
          "name": "ORole",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "ci",
              "min": null,
              "readonly": false,
              "notNull": true,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "name",
              "globalId": 0,
              "description": null,
              "type": 7,
              "mandatory": true
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "mode",
              "globalId": 1,
              "description": null,
              "type": 17,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 2,
              "description": null,
              "type": 12,
              "mandatory": false,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "rules",
              "linkedType": 17
            },
            {
              "@type": "d",
              "@version": 0,
              "linkedClass": "ORole",
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 3,
              "description": null,
              "type": 13,
              "mandatory": false,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "inheritedRole"
            }
          ],
          "superClasses": ["OIdentity"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 24,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [24],
          "superClass": "E",
          "name": "explain",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 21,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [21],
          "superClass": "E",
          "name": "produce",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 31,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [31],
          "superClass": "E",
          "name": "MTExample",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 5,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [5],
          "superClass": "OIdentity",
          "name": "OUser",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": true,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "password",
              "globalId": 4,
              "description": null,
              "type": 7,
              "mandatory": true
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": true,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "status",
              "globalId": 6,
              "description": null,
              "type": 7,
              "mandatory": true
            },
            {
              "@type": "d",
              "@version": 0,
              "regexp": "\\S+(.*\\S+)*",
              "notNull": true,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 0,
              "description": null,
              "type": 7,
              "mandatory": true,
              "collate": "ci",
              "min": "1",
              "readonly": false,
              "name": "name"
            },
            {
              "@type": "d",
              "@version": 0,
              "linkedClass": "ORole",
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 5,
              "description": null,
              "type": 15,
              "mandatory": false,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "roles"
            }
          ],
          "superClasses": ["OIdentity"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 23,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [23],
          "superClass": "E",
          "name": "implements",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 41,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [41],
          "superClass": "E",
          "name": "HasCode",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 18,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [18],
          "superClass": "E",
          "name": "DesignExample",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 33,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [33],
          "superClass": "E",
          "name": "Related",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 37,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [37],
          "superClass": "E",
          "name": "MTError",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 25,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [25],
          "superClass": "Data",
          "name": "Discussion",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["Data"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 26,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [26],
          "superClass": "V",
          "name": "Lecture",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Number",
              "globalId": 25,
              "description": null,
              "type": 1,
              "mandatory": false
            }
          ],
          "superClasses": ["V"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 20,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [20],
          "superClass": "Concept",
          "name": "Data",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Body",
              "globalId": 24,
              "description": null,
              "type": 7,
              "mandatory": false
            }
          ],
          "superClasses": ["Concept"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 35,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [35],
          "superClass": "V",
          "name": "Module",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "ModuleCode",
              "globalId": 27,
              "description": null,
              "type": 7,
              "mandatory": false
            }
          ],
          "superClasses": ["V"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 29,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [29],
          "superClass": "E",
          "name": "CSExample",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 10,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [10],
          "superClass": null,
          "name": "E",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 27,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [27],
          "superClass": "E",
          "name": "appear",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 28,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [28],
          "superClass": "V",
          "name": "Entity",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Label",
              "globalId": 23,
              "description": null,
              "type": 7,
              "mandatory": false
            }
          ],
          "superClasses": ["V"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 40,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [40],
          "superClass": "V",
          "name": "FullExample",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Class3",
              "globalId": 31,
              "description": null,
              "type": 7,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Class2",
              "globalId": 30,
              "description": null,
              "type": 7,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Class1",
              "globalId": 29,
              "description": null,
              "type": 7,
              "mandatory": false
            }
          ],
          "superClasses": ["V"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 6,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [6],
          "superClass": null,
          "name": "OFunction",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "language",
              "globalId": 12,
              "description": null,
              "type": 7,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "name",
              "globalId": 0,
              "description": null,
              "type": 7,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "code",
              "globalId": 11,
              "description": null,
              "type": 7,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 14,
              "description": null,
              "type": 10,
              "mandatory": false,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "parameters",
              "linkedType": 7
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "idempotent",
              "globalId": 13,
              "description": null,
              "type": 0,
              "mandatory": false
            }
          ],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 22,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [22],
          "superClass": "E",
          "name": "require",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 30,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [30],
          "superClass": "E",
          "name": "CoreExample",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 38,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [38],
          "superClass": "E",
          "name": "CoreError",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 12,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [12],
          "superClass": "E",
          "name": "teaches",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 9,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [9],
          "superClass": null,
          "name": "V",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 8,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [8],
          "superClass": null,
          "name": "OSchedule",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "starttime",
              "globalId": 22,
              "description": null,
              "type": 6,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "status",
              "globalId": 6,
              "description": null,
              "type": 7,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "arguments",
              "globalId": 20,
              "description": null,
              "type": 12,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": true,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "rule",
              "globalId": 19,
              "description": null,
              "type": 7,
              "mandatory": true
            },
            {
              "@type": "d",
              "@version": 0,
              "linkedClass": "OFunction",
              "notNull": true,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "globalId": 21,
              "description": null,
              "type": 13,
              "mandatory": true,
              "collate": "default",
              "min": null,
              "readonly": false,
              "name": "function"
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": true,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "name",
              "globalId": 0,
              "description": null,
              "type": 7,
              "mandatory": true
            }
          ],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 7,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [7],
          "superClass": null,
          "name": "OSequence",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "type",
              "globalId": 18,
              "description": null,
              "type": 7,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "start",
              "globalId": 15,
              "description": null,
              "type": 3,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "value",
              "globalId": 17,
              "description": null,
              "type": 3,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "incr",
              "globalId": 16,
              "description": null,
              "type": 1,
              "mandatory": false
            },
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "name",
              "globalId": 0,
              "description": null,
              "type": 7,
              "mandatory": false
            }
          ],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 16,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [16],
          "superClass": "Data",
          "name": "Resource",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["Data"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": -1,
          "strictMode": false,
          "description": null,
          "abstract": true,
          "clusterIds": [-1],
          "superClass": null,
          "name": "OIdentity",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": null,
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 36,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [36],
          "superClass": "E",
          "name": "CSError",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 13,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [13],
          "superClass": "V",
          "name": "Concept",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Label",
              "globalId": 23,
              "description": null,
              "type": 7,
              "mandatory": false
            }
          ],
          "superClasses": ["V"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 17,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [17],
          "superClass": "Data",
          "name": "Example",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Explanation",
              "globalId": 28,
              "description": null,
              "type": 7,
              "mandatory": false
            }
          ],
          "superClasses": ["Data"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 39,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [39],
          "superClass": "E",
          "name": "exRelated",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [],
          "superClasses": ["E"],
          "@fieldTypes": "overSize=f,properties=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "customFields": null,
          "defaultClusterId": 34,
          "strictMode": false,
          "description": null,
          "abstract": false,
          "clusterIds": [34],
          "superClass": "V",
          "name": "Theme",
          "clusterSelection": "round-robin",
          "shortName": null,
          "overSize": 0.0,
          "properties": [
            {
              "@type": "d",
              "@version": 0,
              "collate": "default",
              "min": null,
              "readonly": false,
              "notNull": false,
              "max": null,
              "defaultValue": null,
              "customFields": null,
              "name": "Name",
              "globalId": 26,
              "description": null,
              "type": 7,
              "mandatory": true
            }
          ],
          "superClasses": ["V"],
          "@fieldTypes": "overSize=f,properties=e"
        }
      ],
      "globalProperties": [
        {
          "@type": "d",
          "@version": 0,
          "name": "name",
          "id": 0,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "mode",
          "id": 1,
          "type": "BYTE"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "rules",
          "id": 2,
          "type": "EMBEDDEDMAP"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "inheritedRole",
          "id": 3,
          "type": "LINK"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "password",
          "id": 4,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "roles",
          "id": 5,
          "type": "LINKSET"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "status",
          "id": 6,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "_allow",
          "id": 7,
          "type": "LINKSET"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "_allowRead",
          "id": 8,
          "type": "LINKSET"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "_allowUpdate",
          "id": 9,
          "type": "LINKSET"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "_allowDelete",
          "id": 10,
          "type": "LINKSET"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "code",
          "id": 11,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "language",
          "id": 12,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "idempotent",
          "id": 13,
          "type": "BOOLEAN"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "parameters",
          "id": 14,
          "type": "EMBEDDEDLIST"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "start",
          "id": 15,
          "type": "LONG"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "incr",
          "id": 16,
          "type": "INTEGER"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "value",
          "id": 17,
          "type": "LONG"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "type",
          "id": 18,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "rule",
          "id": 19,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "arguments",
          "id": 20,
          "type": "EMBEDDEDMAP"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "function",
          "id": 21,
          "type": "LINK"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "starttime",
          "id": 22,
          "type": "DATETIME"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "Label",
          "id": 23,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "Body",
          "id": 24,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "Number",
          "id": 25,
          "type": "INTEGER"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "Name",
          "id": 26,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "ModuleCode",
          "id": 27,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "Explanation",
          "id": 28,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "Class1",
          "id": 29,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "Class2",
          "id": 30,
          "type": "STRING"
        },
        {
          "@type": "d",
          "@version": 0,
          "name": "Class3",
          "id": 31,
          "type": "STRING"
        }
      ],
      "blobClusters": [],
      "@fieldTypes": "classes=e,blobClusters=e"
    },
    {
      "@type": "d",
      "@rid": "#0:2",
      "@version": 29,
      "indexes": [
        {
          "@type": "d",
          "@version": 0,
          "valueContainerAlgorithm": "NONE",
          "name": "ORole.name",
          "indexVersion": 1,
          "indexDefinition": {
            "@type": "d",
            "@version": 0,
            "collate": "ci",
            "field": "name",
            "nullValuesIgnored": false,
            "className": "ORole",
            "keyType": "STRING"
          },
          "type": "UNIQUE",
          "indexDefinitionClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
          "clusters": ["orole"],
          "algorithm": "SBTREE",
          "@fieldTypes": "clusters=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "valueContainerAlgorithm": "NONE",
          "name": "OUser.name",
          "indexVersion": 1,
          "indexDefinition": {
            "@type": "d",
            "@version": 0,
            "collate": "ci",
            "field": "name",
            "nullValuesIgnored": false,
            "className": "OUser",
            "keyType": "STRING"
          },
          "type": "UNIQUE",
          "indexDefinitionClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
          "clusters": ["ouser"],
          "algorithm": "SBTREE",
          "@fieldTypes": "clusters=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "metadata": {
            "@type": "d",
            "@version": 0,
            "allowLeadingWildcard": true,
            "Label_index_stopwords": ["/"],
            "analyzer": "org.apache.lucene.analysis.en.EnglishAnalyzer",
            "minWordLength": 2,
            "analyzer_stopwords": ["/"]
          },
          "valueContainerAlgorithm": "SBTREEBONSAISET",
          "name": "Concept.Label",
          "indexVersion": -1,
          "indexDefinition": {
            "@type": "d",
            "@version": 0,
            "collate": "default",
            "field": "Label",
            "nullValuesIgnored": false,
            "className": "Concept",
            "keyType": "STRING"
          },
          "type": "FULLTEXT",
          "indexDefinitionClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
          "clusters": [
            "data",
            "resource",
            "concept",
            "construct",
            "discussion",
            "error",
            "example"
          ],
          "algorithm": "LUCENE",
          "@fieldTypes": "clusters=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "valueContainerAlgorithm": "NONE",
          "name": "OFunction.name",
          "indexVersion": 2,
          "indexDefinition": {
            "@type": "d",
            "@version": 0,
            "collate": "default",
            "field": "name",
            "nullValuesIgnored": false,
            "className": "OFunction",
            "keyType": "STRING"
          },
          "type": "UNIQUE_HASH_INDEX",
          "indexDefinitionClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
          "clusters": ["ofunction"],
          "algorithm": "HASH_INDEX",
          "@fieldTypes": "clusters=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "metadata": {
            "@type": "d",
            "@version": 0,
            "trackMode": "FULL",
            "durableInNonTxMode": true
          },
          "valueContainerAlgorithm": "NONE",
          "name": "dictionary",
          "indexVersion": 1,
          "indexDefinition": {
            "@type": "d",
            "@version": 0,
            "collate": "default",
            "nullValuesIgnored": false,
            "keyTypes": ["STRING"]
          },
          "type": "DICTIONARY",
          "indexDefinitionClass": "com.orientechnologies.orient.core.index.OSimpleKeyIndexDefinition",
          "clusters": [],
          "algorithm": "SBTREE",
          "@fieldTypes": "clusters=e"
        },
        {
          "@type": "d",
          "@version": 0,
          "valueContainerAlgorithm": "SBTREEBONSAISET",
          "name": "Theme.Name",
          "indexVersion": -1,
          "indexDefinition": {
            "@type": "d",
            "@version": 0,
            "collate": "default",
            "field": "Name",
            "nullValuesIgnored": false,
            "className": "Theme",
            "keyType": "STRING"
          },
          "type": "FULLTEXT",
          "indexDefinitionClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
          "clusters": ["theme"],
          "algorithm": "LUCENE",
          "@fieldTypes": "clusters=e"
        }
      ],
      "@fieldTypes": "indexes=e"
    },
    {
      "@type": "d",
      "@rid": "#4:0",
      "@version": 3,
      "@class": "ORole",
      "mode": 1,
      "name": "admin",
      "rules": { "database.bypassRestricted": 31 },
      "inheritedRole": null,
      "@fieldTypes": "mode=b"
    },
    {
      "@type": "d",
      "@rid": "#4:1",
      "@version": 2,
      "@class": "ORole",
      "mode": 0,
      "name": "reader",
      "rules": {
        "database.cluster.internal": 2,
        "database.cluster.orole": 0,
        "database": 2,
        "database.function": 2,
        "database.schema": 2,
        "database.class.ouser": 0,
        "database.cluster.ouser": 0,
        "database.systemclusters": 0,
        "database.cluster": 2,
        "database.command": 2,
        "database.hook.record": 2,
        "database.class": 2
      },
      "inheritedRole": null,
      "@fieldTypes": "mode=b"
    },
    {
      "@type": "d",
      "@rid": "#4:2",
      "@version": 2,
      "@class": "ORole",
      "mode": 0,
      "name": "writer",
      "rules": {
        "database.cluster.internal": 2,
        "database": 2,
        "database.function": 2,
        "database.schema": 7,
        "database.class.ouser": 0,
        "database.systemclusters": 0,
        "database.cluster": 31,
        "database.command": 31,
        "database.hook.record": 31,
        "database.class": 31
      },
      "inheritedRole": null,
      "@fieldTypes": "mode=b"
    },
    {
      "@type": "d",
      "@rid": "#5:0",
      "@version": 2,
      "@class": "OUser",
      "password": "{PBKDF2WithHmacSHA256}72204688B8CCC607E57EC6590AFC5F4396FCA9F7320C522D:7E008A610697CF80D2A5945D2D566B28614F889DD6D6C0C3:65536",
      "roles": ["#4:0"],
      "name": "admin",
      "status": "ACTIVE",
      "@fieldTypes": "roles=n"
    },
    {
      "@type": "d",
      "@rid": "#5:1",
      "@version": 1,
      "@class": "OUser",
      "password": "{PBKDF2WithHmacSHA256}AE6F2868ECDED55C4E70788F720120D01CC4164AFD9C6DEC:B52958629331E35A8749310F40BE2594EDFB9520D9FFEAC6:65536",
      "roles": ["#4:1"],
      "name": "reader",
      "status": "ACTIVE",
      "@fieldTypes": "roles=n"
    },
    {
      "@type": "d",
      "@rid": "#5:2",
      "@version": 1,
      "@class": "OUser",
      "password": "{PBKDF2WithHmacSHA256}BC72729DAA1E40579AB6C695FFAA08DFE2B221B92464BF4F:19AB47A8E80DD054C27971E4ABE4121A1D5D8BD2BC79D754:65536",
      "roles": ["#4:2"],
      "name": "writer",
      "status": "ACTIVE",
      "@fieldTypes": "roles=n"
    },
    {
      "@type": "d",
      "@rid": "#5:3",
      "@version": 2,
      "@class": "OUser",
      "password": "{PBKDF2WithHmacSHA256}A8F41CBB699974A3915C76BA78C4555A089E5A8C1F19D5B7:1A80E6A31F33FD830CED5A733508360E2A80C7491ABB1019:65536",
      "roles": ["#4:1", "#4:2", "#4:0"],
      "name": "test",
      "status": "ACTIVE",
      "@fieldTypes": "roles=n"
    },
    {
      "@type": "d",
      "@rid": "#11:0",
      "@version": 42,
      "@class": "_studio",
      "type": "GraphConfig",
      "user": "#5:0",
      "config": {
        "width": 1634,
        "height": 500,
        "classes": {
          "Concept": {
            "fill": "#901f1f",
            "stroke": "#951b1c",
            "icon": null,
            "display": "Label",
            "r": "40"
          },
          "Construct": {
            "fill": "#d99292",
            "stroke": "#15537d",
            "icon": null,
            "display": "Label",
            "r": "35"
          },
          "E": { "fill": "#aec7e8", "stroke": "#798ba2" },
          "Error": {
            "fill": "#ff7f0e",
            "stroke": "#b25809",
            "icon": null,
            "display": "@class"
          },
          "Example": {
            "fill": "#ffbb78",
            "stroke": "#b28254",
            "icon": null,
            "display": "@class"
          },
          "Explanation": {
            "fill": "#00ff07",
            "stroke": "#1e701e",
            "icon": null,
            "display": "@class"
          },
          "Java": {
            "fill": "#98df8a",
            "stroke": "#6a9c60",
            "icon": null,
            "display": "@class"
          },
          "OFunction": { "fill": "#d62728", "stroke": "#951b1c" },
          "OIdentity": { "fill": "#ff9896", "stroke": "#b26a69" },
          "ORestricted": { "fill": "#9467bd", "stroke": "#674884" },
          "ORole": { "fill": "#c5b0d5", "stroke": "#897b95" },
          "OSchedule": { "fill": "#8c564b", "stroke": "#623c34" },
          "OSequence": { "fill": "#c49c94", "stroke": "#896d67" },
          "OTriggered": { "fill": "#e377c2", "stroke": "#9e5387" },
          "OUser": { "fill": "#f7b6d2", "stroke": "#ac7f93" },
          "Resource": {
            "fill": "#7f7f7f",
            "stroke": "#585858",
            "icon": null,
            "display": "@class"
          },
          "V": { "fill": "#c7c7c7", "stroke": "#8b8b8b" },
          "_studio": { "fill": "#bcbd22", "stroke": "#838417" },
          "implements": { "fill": "#dbdb8d", "stroke": "#999962" },
          "Data": { "fill": "#1f77b4", "stroke": "#15537d" },
          "displays": { "fill": "#aec7e8", "stroke": "#798ba2" },
          "explains": { "fill": "#ff7f0e", "stroke": "#b25809" },
          "occurs": { "fill": "#ffbb78", "stroke": "#b28254" },
          "teaches": { "fill": "#2ca02c", "stroke": "#1e701e" },
          "Lecture": {
            "fill": "#ff0038",
            "stroke": "#15537d",
            "icon": null,
            "display": "Number"
          },
          "in": { "fill": "#aec7e8", "stroke": "#798ba2" },
          "contain": { "fill": "#1f77b4", "stroke": "#15537d" },
          "Discussion": {
            "fill": "#329ce5",
            "stroke": "#15537d",
            "icon": null,
            "display": "@class"
          },
          "explain": { "fill": "#aec7e8", "stroke": "#798ba2" },
          "produce": { "fill": "#ff7f0e", "stroke": "#b25809" },
          "require": { "fill": "#ffbb78", "stroke": "#b28254" },
          "appear": { "fill": "#1f77b4", "stroke": "#15537d" },
          "Language": {
            "fill": "#800781",
            "stroke": "#951b1c",
            "icon": null,
            "display": "Label"
          },
          "Python": {
            "fill": "#d62728",
            "stroke": "#951b1c",
            "icon": null,
            "display": "@class"
          },
          "Theme": {
            "fill": "#ff0087",
            "stroke": "#951b1c",
            "icon": null,
            "display": "Name",
            "r": "50"
          },
          "CSExample": { "fill": "#1f77b4", "stroke": "#15537d" },
          "CoreExample": { "fill": "#aec7e8", "stroke": "#798ba2" },
          "MTExample": { "fill": "#ff7f0e", "stroke": "#b25809" },
          "Related": { "fill": "#ffbb78", "stroke": "#b28254" },
          "Entity": {
            "fill": "#fd0086",
            "stroke": "#951b1c",
            "icon": null,
            "display": "Label"
          },
          "Module": {
            "fill": "#d62728",
            "stroke": "#951b1c",
            "icon": null,
            "display": "ModuleCode"
          },
          "Number": { "fill": "#1f77b4", "stroke": "#15537d" },
          "DesignExample": { "fill": "#1f77b4", "stroke": "#15537d" }
        },
        "node": { "r": 30 },
        "linkDistance": 140,
        "charge": -1000,
        "friction": 0.9,
        "gravity": 0.1
      },
      "@fieldTypes": "user=x"
    },
    {
      "@type": "d",
      "@rid": "#11:1",
      "@version": 1,
      "@class": "_studio",
      "type": "GraphConfig",
      "user": "#5:3",
      "@fieldTypes": "user=x"
    },
    {
      "@type": "d",
      "@rid": "#11:2",
      "@version": 2,
      "@class": "_studio",
      "type": "GraphConfig",
      "config": {
        "width": 1848,
        "height": 500,
        "classes": {
          "Concept": {
            "fill": "#d62728",
            "stroke": "#951b1c",
            "icon": null,
            "display": "Label"
          },
          "Construct": { "fill": "#ff9896", "stroke": "#b26a69" },
          "Error": { "fill": "#9467bd", "stroke": "#674884" },
          "Resource": { "fill": "#c5b0d5", "stroke": "#897b95" },
          "Example": { "fill": "#8c564b", "stroke": "#623c34" },
          "Explanation": { "fill": "#c49c94", "stroke": "#896d67" },
          "Discussion": { "fill": "#e377c2", "stroke": "#9e5387" }
        },
        "node": { "r": 30 },
        "linkDistance": 140,
        "charge": -1000,
        "friction": 0.9,
        "gravity": 0.1
      }
    },
    {
      "@type": "d",
      "@rid": "#11:3",
      "@version": 1,
      "@class": "_studio",
      "type": "GraphConfig",
      "config": {
        "height": 500,
        "width": 1200,
        "classes": {},
        "node": { "r": 30 }
      }
    },
    {
      "@type": "d",
      "@rid": "#11:4",
      "@version": 1,
      "@class": "_studio",
      "type": "GraphConfig",
      "config": {
        "height": 500,
        "width": 1200,
        "classes": {},
        "node": { "r": 30 }
      }
    },
    {
      "@type": "d",
      "@rid": "#12:0",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:10",
      "out": "#26:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:1",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:7",
      "out": "#26:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:2",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:15",
      "out": "#26:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:3",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:21",
      "out": "#26:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:4",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:22",
      "out": "#26:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:6",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:24",
      "out": "#26:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:7",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:12",
      "out": "#26:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:8",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:32",
      "out": "#26:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:9",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:8",
      "out": "#26:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:13",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:29",
      "out": "#26:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:17",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:25",
      "out": "#26:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:18",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:11",
      "out": "#26:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:20",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:11",
      "out": "#26:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:21",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:3",
      "out": "#26:5",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:22",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:11",
      "out": "#26:5",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:24",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:23",
      "out": "#26:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:26",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:21",
      "out": "#26:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:27",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:15",
      "out": "#26:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:28",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:10",
      "out": "#26:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:29",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:11",
      "out": "#26:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:30",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:4",
      "out": "#26:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:31",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:3",
      "out": "#26:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:32",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:15",
      "out": "#26:9",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:35",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:16",
      "out": "#26:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:36",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:46",
      "out": "#26:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:37",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:25",
      "out": "#26:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:38",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:35",
      "out": "#26:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:39",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:32",
      "out": "#26:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:40",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:54",
      "out": "#26:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:41",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:41",
      "out": "#26:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:42",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:29",
      "out": "#26:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:43",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:43",
      "out": "#26:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:44",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:43",
      "out": "#26:14",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:45",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:30",
      "out": "#26:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:46",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:41",
      "out": "#26:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:47",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:36",
      "out": "#26:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:48",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:33",
      "out": "#26:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:49",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:42",
      "out": "#26:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:51",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:60",
      "out": "#26:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:52",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:60",
      "out": "#26:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:53",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:58",
      "out": "#26:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:54",
      "@version": 1,
      "@class": "teaches",
      "in": "#34:11",
      "out": "#26:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:55",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:65",
      "out": "#26:18",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:56",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:70",
      "out": "#26:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:57",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:50",
      "out": "#26:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:58",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:63",
      "out": "#26:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:59",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:63",
      "out": "#26:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:60",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:62",
      "out": "#26:21",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:61",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:73",
      "out": "#26:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:62",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:48",
      "out": "#26:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:63",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:84",
      "out": "#26:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:64",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:82",
      "out": "#26:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:65",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:82",
      "out": "#26:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:66",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:86",
      "out": "#26:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:67",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:91",
      "out": "#26:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:68",
      "@version": 1,
      "@class": "teaches",
      "in": "#34:13",
      "out": "#26:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:69",
      "@version": 1,
      "@class": "teaches",
      "in": "#34:13",
      "out": "#26:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:70",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:80",
      "out": "#26:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:71",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:111",
      "out": "#26:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:72",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:114",
      "out": "#26:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:73",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:114",
      "out": "#26:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:74",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:23",
      "out": "#26:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:76",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:56",
      "out": "#26:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:77",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:57",
      "out": "#26:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:78",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:15",
      "out": "#26:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:79",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:26",
      "out": "#26:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:80",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:12",
      "out": "#26:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:81",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:25",
      "out": "#26:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:82",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:111",
      "out": "#26:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:83",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:97",
      "out": "#26:5",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:84",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:68",
      "out": "#26:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:85",
      "@version": 1,
      "@class": "teaches",
      "in": "#14:11",
      "out": "#26:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#12:86",
      "@version": 1,
      "@class": "teaches",
      "in": "#13:100",
      "out": "#26:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#13:10",
      "@version": 23,
      "@class": "Concept",
      "out_contain": [],
      "out_HasCode": ["#41:39"],
      "in_Number": ["#12:0", "#12:28"],
      "out_CSExample": ["#29:76"],
      "out_explain": ["#24:0"],
      "out_CoreExample": ["#30:4"],
      "in_contain": ["#19:207"],
      "Label": "OOP Paradigm",
      "out_appear": ["#27:0"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,in_Number=g,out_CSExample=g,out_explain=g,out_CoreExample=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:11",
      "@version": 22,
      "@class": "Concept",
      "out_contain": ["#19:6", "#19:7", "#19:359"],
      "in_Number": ["#12:22", "#12:29"],
      "out_explain": ["#24:2"],
      "out_CoreExample": ["#30:5"],
      "in_contain": ["#19:205"],
      "Label": "Encapsulation",
      "out_appear": ["#27:1"],
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,out_CoreExample=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:12",
      "@version": 19,
      "@class": "Concept",
      "in_teaches": ["#12:80"],
      "out_CSExample": ["#29:6"],
      "out_explain": ["#24:12"],
      "out_produce": [],
      "out_CSError": ["#36:10"],
      "in_contain": ["#19:7"],
      "Label": "Scoping",
      "out_appear": ["#27:3", "#27:97", "#27:98"],
      "@fieldTypes": "in_teaches=g,out_CSExample=g,out_explain=g,out_produce=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:14",
      "@version": 20,
      "@class": "Concept",
      "out_CSExample": ["#29:8", "#29:9"],
      "out_explain": ["#24:25"],
      "out_produce": [],
      "out_CoreExample": [],
      "out_CSError": ["#36:1"],
      "in_contain": ["#19:244"],
      "Label": "Package",
      "@fieldTypes": "out_CSExample=g,out_explain=g,out_produce=g,out_CoreExample=g,out_CSError=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:15",
      "@version": 25,
      "@class": "Concept",
      "out_contain": ["#19:11", "#19:28"],
      "out_HasCode": ["#41:32"],
      "in_teaches": ["#12:78"],
      "out_CSExample": ["#29:27", "#29:28"],
      "in_Number": ["#12:2", "#12:27"],
      "out_explain": ["#24:174"],
      "out_CoreExample": ["#30:29"],
      "in_contain": ["#19:245"],
      "Label": "Class",
      "in_CSExample": [],
      "out_appear": ["#27:8", "#27:15", "#27:94", "#27:95"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,in_teaches=g,out_CSExample=g,in_Number=g,out_explain=g,out_CoreExample=g,in_contain=g,in_CSExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:16",
      "@version": 29,
      "@class": "Concept",
      "out_contain": ["#19:215", "#19:292", "#19:293", "#19:294"],
      "out_HasCode": ["#41:15"],
      "out_CSExample": [],
      "out_explain": ["#24:33"],
      "out_CoreExample": [],
      "in_contain": ["#19:148"],
      "Label": "Operations",
      "out_appear": ["#27:14"],
      "out_Related": [],
      "@fieldTypes": "out_contain=g,out_HasCode=g,out_CSExample=g,out_explain=g,out_CoreExample=g,in_contain=g,out_appear=g,out_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:19",
      "@version": 20,
      "@class": "Concept",
      "out_HasCode": [],
      "out_explain": ["#24:50"],
      "out_CoreExample": ["#30:0"],
      "in_contain": ["#19:248"],
      "Label": "JavaDocs",
      "out_appear": ["#27:43", "#27:194", "#27:195", "#27:196"],
      "out_require": [],
      "@fieldTypes": "out_HasCode=g,out_explain=g,out_CoreExample=g,in_contain=g,out_appear=g,out_require=g"
    },
    {
      "@type": "d",
      "@rid": "#13:21",
      "@version": 15,
      "@class": "Concept",
      "in_teaches": [],
      "out_HasCode": ["#41:45"],
      "in_Number": ["#12:3", "#12:26"],
      "out_explain": ["#24:54"],
      "in_contain": ["#19:249"],
      "Label": "Readability",
      "out_appear": ["#27:193"],
      "out_Related": ["#33:23"],
      "out_require": ["#22:2"],
      "@fieldTypes": "in_teaches=g,out_HasCode=g,in_Number=g,out_explain=g,in_contain=g,out_appear=g,out_Related=g,out_require=g"
    },
    {
      "@type": "d",
      "@rid": "#13:22",
      "@version": 13,
      "@class": "Concept",
      "in_CoreExample": [],
      "in_Number": ["#12:4"],
      "out_explain": ["#24:55"],
      "in_contain": ["#19:273"],
      "Label": "Compilation and JVM",
      "@fieldTypes": "in_CoreExample=g,in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:23",
      "@version": 32,
      "@class": "Concept",
      "out_contain": ["#19:48", "#19:51", "#19:206"],
      "in_teaches": ["#12:74"],
      "out_HasCode": ["#41:42"],
      "out_CSExample": [],
      "out_explain": ["#24:57"],
      "out_CSError": ["#36:8"],
      "out_produce": [],
      "out_CoreExample": ["#30:3"],
      "in_contain": ["#19:204"],
      "Label": "Inheritance",
      "out_implements": [],
      "out_appear": ["#27:20", "#27:21"],
      "@fieldTypes": "out_contain=g,in_teaches=g,out_HasCode=g,out_CSExample=g,out_explain=g,out_CSError=g,out_produce=g,out_CoreExample=g,in_contain=g,out_implements=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:25",
      "@version": 22,
      "@class": "Concept",
      "out_contain": ["#19:35", "#19:36", "#19:242", "#19:271"],
      "in_teaches": ["#12:81"],
      "in_Number": ["#12:17"],
      "out_explain": ["#24:173"],
      "in_contain": ["#19:203"],
      "Label": "Iteration",
      "out_Related": ["#33:7"],
      "in_Related": [],
      "@fieldTypes": "out_contain=g,in_teaches=g,in_Number=g,out_explain=g,in_contain=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:26",
      "@version": 16,
      "@class": "Concept",
      "out_contain": ["#19:38", "#19:40", "#19:266"],
      "in_teaches": ["#12:79"],
      "in_Number": [],
      "out_explain": ["#24:170"],
      "in_contain": ["#19:202"],
      "Label": "Conditionals",
      "out_Related": ["#33:6"],
      "in_Related": [],
      "@fieldTypes": "out_contain=g,in_teaches=g,in_Number=g,out_explain=g,in_contain=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:27",
      "@version": 18,
      "@class": "Concept",
      "in_CoreExample": [],
      "out_HasCode": ["#41:6"],
      "in_Number": [],
      "out_CSExample": ["#29:14", "#29:102"],
      "out_explain": ["#24:75"],
      "in_contain": ["#19:200"],
      "Label": "Flow Control",
      "out_implements": [],
      "in_Related": ["#33:6", "#33:7"],
      "@fieldTypes": "in_CoreExample=g,out_HasCode=g,in_Number=g,out_CSExample=g,out_explain=g,in_contain=g,out_implements=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:28",
      "@version": 12,
      "@class": "Concept",
      "out_contain": ["#19:43"],
      "out_exRelated": ["#39:0"],
      "out_explain": ["#24:168"],
      "in_contain": ["#19:250"],
      "Label": "Testing",
      "out_Related": ["#33:18"],
      "@fieldTypes": "out_contain=g,out_exRelated=g,out_explain=g,in_contain=g,out_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:29",
      "@version": 17,
      "@class": "Concept",
      "out_HasCode": ["#41:7"],
      "out_CSExample": ["#29:100", "#29:109"],
      "in_Number": ["#12:13"],
      "out_explain": ["#24:79"],
      "in_contain": ["#19:201"],
      "Label": "Logical Operators",
      "out_Related": [],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,in_contain=g,out_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:31",
      "@version": 17,
      "@class": "Concept",
      "out_HasCode": ["#41:23"],
      "in_Number": [],
      "out_CSExample": ["#29:88"],
      "out_explain": ["#24:80"],
      "in_contain": ["#19:213"],
      "Label": "Object Comparison",
      "out_appear": ["#27:33", "#27:174", "#27:175"],
      "out_Related": ["#33:19"],
      "in_Related": ["#33:20"],
      "@fieldTypes": "out_HasCode=g,in_Number=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:32",
      "@version": 26,
      "@class": "Concept",
      "out_contain": [],
      "out_HasCode": ["#41:16"],
      "out_CSExample": ["#29:0"],
      "in_Number": ["#12:8"],
      "out_explain": ["#24:81"],
      "in_contain": ["#19:215"],
      "Label": "Type Coercion",
      "out_implements": [],
      "out_appear": ["#27:34", "#27:171"],
      "out_Related": ["#33:11", "#33:12"],
      "in_Related": ["#33:13", "#33:15"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,in_contain=g,out_implements=g,out_appear=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:33",
      "@version": 29,
      "@class": "Concept",
      "out_contain": [],
      "out_HasCode": ["#41:36"],
      "out_CSExample": ["#29:1", "#29:2"],
      "out_explain": ["#24:85"],
      "out_CSError": ["#36:15"],
      "in_contain": ["#19:48"],
      "Label": "Late Binding",
      "out_implements": [],
      "out_appear": ["#27:37", "#27:38"],
      "out_Related": ["#33:8", "#33:15"],
      "in_Related": ["#33:12", "#33:14"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,out_implements=g,out_appear=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:34",
      "@version": 29,
      "@class": "Concept",
      "out_contain": [],
      "out_CSExample": ["#29:3", "#29:4"],
      "out_explain": ["#24:89"],
      "in_appear": [],
      "Label": "Polymorphism",
      "out_HasCode": ["#41:37"],
      "out_produce": [],
      "out_CSError": ["#36:9"],
      "in_contain": ["#19:51"],
      "out_implements": [],
      "out_appear": ["#27:41"],
      "out_Related": ["#33:13", "#33:14"],
      "in_Related": ["#33:11"],
      "@fieldTypes": "out_contain=g,out_CSExample=g,out_explain=g,in_appear=g,out_HasCode=g,out_produce=g,out_CSError=g,in_contain=g,out_implements=g,out_appear=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:35",
      "@version": 13,
      "@class": "Concept",
      "out_contain": ["#19:179", "#19:181", "#19:182", "#19:369"],
      "in_Number": ["#12:38"],
      "out_explain": ["#24:92"],
      "in_contain": ["#19:347"],
      "Label": "Libraries",
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:36",
      "@version": 13,
      "@class": "Concept",
      "out_explain": ["#24:93"],
      "in_contain": ["#19:180"],
      "Label": "Arguments",
      "out_MTExample": ["#31:1", "#31:2", "#31:3"],
      "out_appear": ["#27:47", "#27:48", "#27:49"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:37",
      "@version": 10,
      "@class": "Concept",
      "out_explain": ["#24:99"],
      "out_CoreExample": ["#30:25"],
      "in_contain": ["#19:343"],
      "Label": "Commenting",
      "out_MTExample": ["#31:4", "#31:5"],
      "@fieldTypes": "out_explain=g,out_CoreExample=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:38",
      "@version": 9,
      "@class": "Concept",
      "out_explain": ["#24:101"],
      "in_contain": ["#19:344"],
      "Label": "Conventions",
      "out_appear": ["#27:50", "#27:51"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:39",
      "@version": 13,
      "@class": "Concept",
      "out_CSExample": ["#29:69"],
      "out_explain": ["#24:103"],
      "in_contain": ["#19:330"],
      "Label": "DRY Principle",
      "out_DesignExample": [],
      "out_MTExample": [],
      "out_appear": ["#27:52"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:41",
      "@version": 16,
      "@class": "Concept",
      "out_contain": ["#19:164", "#19:337"],
      "in_Number": ["#12:41"],
      "out_explain": ["#24:247"],
      "in_contain": ["#19:332"],
      "Label": "Iteration",
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:42",
      "@version": 11,
      "@class": "Concept",
      "in_Number": ["#12:49"],
      "out_explain": ["#24:108"],
      "in_contain": ["#19:173"],
      "Label": "File I/O",
      "out_MTExample": ["#31:10", "#31:11"],
      "out_appear": ["#27:54", "#27:55", "#27:56"],
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:43",
      "@version": 18,
      "@class": "Concept",
      "out_HasCode": ["#41:51"],
      "in_Number": ["#12:44"],
      "out_explain": ["#24:125"],
      "in_contain": ["#19:336"],
      "Label": "Logical Operators",
      "out_MTExample": ["#31:23", "#31:24", "#31:25", "#31:26"],
      "out_appear": ["#27:163", "#27:164", "#27:165", "#27:209", "#27:210"],
      "@fieldTypes": "out_HasCode=g,in_Number=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:44",
      "@version": 14,
      "@class": "Concept",
      "out_MTError": ["#37:5"],
      "out_explain": ["#24:126"],
      "in_contain": ["#19:341"],
      "Label": "Manifest Variables",
      "out_MTExample": ["#31:27", "#31:28"],
      "@fieldTypes": "out_MTError=g,out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:45",
      "@version": 15,
      "@class": "Concept",
      "out_explain": ["#24:134"],
      "in_contain": ["#19:346"],
      "Label": "Object Oriented Programming",
      "out_MTExample": ["#31:31"],
      "out_appear": ["#27:66"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:46",
      "@version": 13,
      "@class": "Concept",
      "in_Number": ["#12:36"],
      "out_explain": ["#24:136"],
      "in_contain": ["#19:342"],
      "Label": "Python language",
      "out_appear": ["#27:68", "#27:69", "#27:70"],
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:47",
      "@version": 11,
      "@class": "Concept",
      "out_MTError": ["#37:2"],
      "out_explain": ["#24:137"],
      "in_contain": ["#19:177"],
      "Label": "Recursion",
      "out_MTExample": ["#31:32"],
      "out_appear": ["#27:71", "#27:72"],
      "@fieldTypes": "out_MTError=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:48",
      "@version": 13,
      "@class": "Concept",
      "out_explain": ["#24:144"],
      "in_contain": ["#19:340"],
      "Label": "Testing",
      "out_appear": ["#27:73", "#27:74"],
      "out_Related": ["#33:21"],
      "in_Related": ["#33:22"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:50",
      "@version": 14,
      "@class": "Concept",
      "out_MTError": ["#37:6"],
      "out_explain": ["#24:152"],
      "in_contain": ["#19:176"],
      "Label": "Variable Scope",
      "out_MathError": [],
      "out_MTExample": ["#31:43"],
      "out_appear": ["#27:81"],
      "@fieldTypes": "out_MTError=g,out_explain=g,in_contain=g,out_MathError=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:54",
      "@version": 12,
      "@class": "Concept",
      "out_contain": [
        "#19:168",
        "#19:169",
        "#19:170",
        "#19:171",
        "#19:172",
        "#19:370",
        "#19:371",
        "#19:372"
      ],
      "in_Number": ["#12:40"],
      "out_explain": ["#24:250"],
      "in_contain": ["#19:188"],
      "Label": "Data Structures",
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:55",
      "@version": 9,
      "@class": "Concept",
      "out_contain": ["#19:173", "#19:174", "#19:175"],
      "out_exRelated": ["#39:2"],
      "out_explain": ["#24:249"],
      "in_contain": ["#19:187"],
      "Label": "I/O",
      "@fieldTypes": "out_contain=g,out_exRelated=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:56",
      "@version": 15,
      "@class": "Concept",
      "out_contain": ["#19:260"],
      "out_HasCode": ["#41:9"],
      "in_teaches": ["#12:76"],
      "out_CSExample": ["#29:110"],
      "out_explain": ["#24:158"],
      "out_CoreExample": ["#30:27", "#30:28"],
      "out_CSError": ["#36:28"],
      "in_contain": ["#19:209"],
      "Label": "Primitive Types",
      "out_appear": ["#27:83", "#27:92", "#27:158"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,in_teaches=g,out_CSExample=g,out_explain=g,out_CoreExample=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:57",
      "@version": 21,
      "@class": "Concept",
      "out_contain": ["#19:211", "#19:212", "#19:213", "#19:214"],
      "out_HasCode": ["#41:20"],
      "in_teaches": ["#12:77"],
      "out_CSExample": ["#29:24", "#29:74"],
      "out_explain": ["#24:159"],
      "out_CSError": ["#36:0"],
      "in_contain": ["#19:210"],
      "Label": "Reference Types",
      "out_appear": ["#27:90", "#27:91", "#27:172", "#27:173"],
      "out_Related": ["#33:17"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,in_teaches=g,out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g,out_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:58",
      "@version": 17,
      "@class": "Concept",
      "out_contain": ["#19:237", "#19:238", "#19:239", "#19:240"],
      "out_HasCode": ["#41:10"],
      "out_CSExample": ["#29:20"],
      "in_Number": ["#12:53"],
      "out_explain": ["#24:160"],
      "in_contain": ["#19:235"],
      "Label": "Java Collections",
      "out_appear": ["#27:84", "#27:85", "#27:197", "#27:198"],
      "out_Related": ["#33:16"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,in_contain=g,out_appear=g,out_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:59",
      "@version": 11,
      "@class": "Concept",
      "out_contain": ["#19:268", "#19:269"],
      "out_HasCode": ["#41:33", "#41:56"],
      "out_CSExample": ["#29:29"],
      "in_Number": ["#12:50"],
      "out_explain": ["#24:175"],
      "out_CoreExample": ["#30:30"],
      "in_contain": ["#19:246"],
      "Label": "Interface",
      "out_appear": ["#27:96"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,out_CoreExample=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:60",
      "@version": 8,
      "@class": "Concept",
      "out_HasCode": ["#41:48"],
      "in_Number": ["#12:51", "#12:52"],
      "out_explain": ["#24:176"],
      "out_CoreExample": ["#30:31"],
      "out_CSError": ["#36:12"],
      "in_contain": ["#19:252"],
      "Label": "Commenting",
      "@fieldTypes": "out_HasCode=g,in_Number=g,out_explain=g,out_CoreExample=g,out_CSError=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:61",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:255", "#19:256", "#19:257"],
      "out_explain": ["#24:177"],
      "in_contain": ["#19:254"],
      "Label": "Database Storage",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:62",
      "@version": 8,
      "@class": "Concept",
      "out_CSExample": ["#29:32"],
      "in_Number": ["#12:60"],
      "out_explain": ["#24:178"],
      "in_contain": ["#19:255"],
      "Label": "JPA",
      "out_appear": ["#27:99", "#27:184", "#27:185"],
      "@fieldTypes": "out_CSExample=g,in_Number=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:63",
      "@version": 10,
      "@class": "Concept",
      "out_contain": ["#19:258"],
      "in_Number": ["#12:58", "#12:59"],
      "out_CSExample": ["#29:33"],
      "out_explain": ["#24:179"],
      "in_contain": ["#19:256"],
      "Label": "JDBC",
      "out_appear": ["#27:100", "#27:101", "#27:102"],
      "@fieldTypes": "out_contain=g,in_Number=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:64",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:180"],
      "in_contain": ["#19:257"],
      "Label": "Hibernate",
      "out_appear": ["#27:103"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:65",
      "@version": 17,
      "@class": "Concept",
      "out_exRelated": ["#39:1"],
      "out_HasCode": ["#41:44"],
      "out_CSExample": ["#29:35", "#29:106"],
      "in_Number": ["#12:55"],
      "out_explain": ["#24:182"],
      "out_CSError": ["#36:16"],
      "in_contain": ["#19:374"],
      "Label": "File I/O",
      "out_appear": ["#27:106", "#27:107", "#27:108", "#27:109"],
      "@fieldTypes": "out_exRelated=g,out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:66",
      "@version": 8,
      "@class": "Concept",
      "out_HasCode": ["#41:8"],
      "out_explain": ["#24:183"],
      "out_CSError": ["#36:29"],
      "in_contain": ["#19:260"],
      "Label": "Arthimetic Operators",
      "out_appear": ["#27:157"],
      "@fieldTypes": "out_HasCode=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:68",
      "@version": 6,
      "@class": "Concept",
      "in_teaches": ["#12:84"],
      "out_explain": ["#24:185"],
      "in_contain": ["#19:262"],
      "Label": "Coding Conventions",
      "out_appear": ["#27:156"],
      "@fieldTypes": "in_teaches=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:69",
      "@version": 8,
      "@class": "Concept",
      "out_HasCode": ["#41:47"],
      "out_CSExample": ["#29:72"],
      "out_explain": ["#24:186"],
      "in_contain": ["#19:263"],
      "Label": "Factory Design Pattern",
      "out_appear": ["#27:113"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:70",
      "@version": 18,
      "@class": "Concept",
      "out_HasCode": ["#41:5"],
      "out_CSExample": ["#29:39", "#29:40", "#29:41", "#29:42"],
      "in_Number": ["#12:56"],
      "out_explain": ["#24:188"],
      "out_CSError": ["#36:6"],
      "in_contain": ["#19:265"],
      "Label": "Exceptions",
      "out_appear": ["#27:116", "#27:117", "#27:118"],
      "in_Related": ["#33:18"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:71",
      "@version": 21,
      "@class": "Concept",
      "out_HasCode": ["#41:27"],
      "out_CSExample": ["#29:48", "#29:49", "#29:51", "#29:52"],
      "out_explain": ["#24:193"],
      "out_CSError": ["#36:2", "#36:3", "#36:4"],
      "in_contain": ["#19:270"],
      "Label": "Generics",
      "out_appear": ["#27:125", "#27:126"],
      "in_Related": ["#33:16", "#33:17"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:72",
      "@version": 5,
      "@class": "Concept",
      "out_contain": ["#19:273", "#19:274"],
      "out_explain": ["#24:195"],
      "in_contain": ["#19:272"],
      "Label": "Execution",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:73",
      "@version": 9,
      "@class": "Concept",
      "out_CSExample": ["#29:55"],
      "in_Number": ["#12:61"],
      "out_explain": ["#24:196"],
      "in_contain": ["#19:274"],
      "Label": "MapReduce",
      "out_appear": ["#27:129", "#27:130", "#27:131", "#27:182"],
      "@fieldTypes": "out_CSExample=g,in_Number=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:74",
      "@version": 7,
      "@class": "Concept",
      "out_HasCode": ["#41:28"],
      "out_CSExample": ["#29:56"],
      "out_explain": ["#24:197"],
      "out_CSError": ["#36:30"],
      "in_contain": ["#19:281"],
      "Label": "Enumerations",
      "out_appear": ["#27:132"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:75",
      "@version": 5,
      "@class": "Concept",
      "out_HasCode": ["#41:17"],
      "out_CSExample": ["#29:57"],
      "out_explain": ["#24:207"],
      "in_contain": ["#19:292"],
      "Label": "Accessing Data",
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:76",
      "@version": 5,
      "@class": "Concept",
      "out_HasCode": ["#41:18"],
      "out_CSExample": ["#29:58"],
      "out_explain": ["#24:208"],
      "in_contain": ["#19:293"],
      "Label": "Declaration and Initalisation",
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:77",
      "@version": 5,
      "@class": "Concept",
      "out_HasCode": ["#41:19"],
      "out_CSExample": ["#29:59"],
      "out_explain": ["#24:209"],
      "in_contain": ["#19:294"],
      "Label": "Updating",
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:78",
      "@version": 9,
      "@class": "Concept",
      "out_contain": ["#19:310"],
      "out_CSExample": ["#29:65"],
      "out_explain": ["#24:210"],
      "in_contain": ["#19:297"],
      "Label": "Abstraction",
      "out_DesignExample": [],
      "out_appear": ["#27:138"],
      "in_Related": ["#33:23"],
      "@fieldTypes": "out_contain=g,out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g,out_appear=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:80",
      "@version": 11,
      "@class": "Concept",
      "out_contain": ["#19:301", "#19:307", "#19:315", "#19:316", "#19:319"],
      "in_Number": ["#12:70"],
      "out_explain": ["#24:211"],
      "in_contain": ["#19:299"],
      "Label": "Testing",
      "in_exRelated": ["#39:0"],
      "out_appear": ["#27:139"],
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g,in_exRelated=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:81",
      "@version": 10,
      "@class": "Concept",
      "out_explain": ["#24:212"],
      "in_contain": ["#19:301"],
      "Label": "Continuous and Regression Testing",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:82",
      "@version": 10,
      "@class": "Concept",
      "out_contain": ["#19:303", "#19:308", "#19:320"],
      "in_Number": ["#12:64", "#12:65"],
      "out_explain": ["#24:213"],
      "in_contain": ["#19:302"],
      "Label": "Data Formats",
      "in_exRelated": ["#39:1", "#39:2"],
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g,in_exRelated=g"
    },
    {
      "@type": "d",
      "@rid": "#13:83",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:214"],
      "in_contain": ["#19:303"],
      "Label": "CSV",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:84",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:311", "#19:314"],
      "in_Number": ["#12:63"],
      "out_explain": ["#24:215"],
      "in_contain": ["#19:304"],
      "Label": "Data Interfaces",
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:85",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:216"],
      "in_contain": ["#19:305"],
      "Label": "Why plan?",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:86",
      "@version": 6,
      "@class": "Concept",
      "in_Number": ["#12:66"],
      "out_explain": ["#24:217"],
      "in_contain": ["#19:309"],
      "Label": "Entity Relationship Model",
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:87",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:218"],
      "in_contain": ["#19:307"],
      "Label": "Exhaustive Testing",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:88",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:219"],
      "in_contain": ["#19:308"],
      "Label": "JSON",
      "out_appear": ["#27:140"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:89",
      "@version": 6,
      "@class": "Concept",
      "out_CSExample": ["#29:66"],
      "out_explain": ["#24:220"],
      "in_contain": ["#19:310"],
      "Label": "Method prototype",
      "out_DesignExample": [],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:90",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:221"],
      "in_contain": ["#19:311"],
      "Label": "Object",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:91",
      "@version": 4,
      "@class": "Concept",
      "in_Number": ["#12:67"],
      "out_explain": ["#24:222"],
      "in_contain": ["#19:312"],
      "Label": "Object Relational Model",
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:92",
      "@version": 6,
      "@class": "Concept",
      "out_CSExample": ["#29:67"],
      "out_explain": ["#24:223"],
      "in_contain": ["#19:313"],
      "Label": "Pseudocode",
      "out_DesignExample": [],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:93",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:224"],
      "in_contain": ["#19:314"],
      "Label": "Streaming",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:94",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:225"],
      "in_contain": ["#19:315"],
      "Label": "Systems Testing",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:95",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:226"],
      "in_contain": ["#19:316"],
      "Label": "Test Driven Development",
      "out_appear": ["#27:141"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:96",
      "@version": 6,
      "@class": "Concept",
      "out_CSExample": ["#29:68"],
      "out_explain": ["#24:227"],
      "in_contain": ["#19:317"],
      "Label": "Top Down Development",
      "out_DesignExample": [],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:97",
      "@version": 5,
      "@class": "Concept",
      "in_teaches": ["#12:83"],
      "out_explain": ["#24:228"],
      "in_contain": ["#19:318"],
      "Label": "Unified Modelling Language",
      "out_appear": ["#27:142"],
      "@fieldTypes": "in_teaches=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:98",
      "@version": 6,
      "@class": "Concept",
      "out_CSExample": ["#29:61"],
      "out_explain": ["#24:229"],
      "in_contain": ["#19:319"],
      "Label": "Unit Testing",
      "out_DesignExample": [],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:99",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:230"],
      "in_contain": ["#19:320"],
      "Label": "XML",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:100",
      "@version": 12,
      "@class": "Concept",
      "in_teaches": ["#12:86"],
      "out_CSExample": ["#29:63"],
      "out_explain": ["#24:235"],
      "in_contain": ["#19:321"],
      "Label": "Abstract",
      "out_DesignExample": [],
      "out_appear": ["#27:145"],
      "@fieldTypes": "in_teaches=g,out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:101",
      "@version": 5,
      "@class": "Concept",
      "out_CSExample": ["#29:81"],
      "out_explain": ["#24:236"],
      "in_contain": ["#19:322"],
      "Label": "Access Control",
      "out_appear": ["#27:146"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:102",
      "@version": 7,
      "@class": "Concept",
      "out_CSExample": ["#29:62"],
      "out_explain": ["#24:237"],
      "in_contain": ["#19:323"],
      "Label": "Attributes",
      "out_DesignExample": [],
      "out_appear": ["#27:147"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:103",
      "@version": 5,
      "@class": "Concept",
      "out_CSExample": ["#29:84"],
      "out_explain": ["#24:238"],
      "in_contain": ["#19:324"],
      "Label": "Inheritance",
      "out_appear": ["#27:148"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:104",
      "@version": 5,
      "@class": "Concept",
      "out_CSExample": ["#29:82"],
      "out_explain": ["#24:239"],
      "in_contain": ["#19:325"],
      "Label": "Interface",
      "out_appear": ["#27:149"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:105",
      "@version": 8,
      "@class": "Concept",
      "out_CSExample": ["#29:64", "#29:83"],
      "out_explain": ["#24:240"],
      "in_contain": ["#19:326"],
      "Label": "Methods",
      "out_DesignExample": [],
      "out_appear": ["#27:150"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_DesignExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:106",
      "@version": 5,
      "@class": "Concept",
      "out_explain": ["#24:241"],
      "in_contain": ["#19:327"],
      "Label": "Modifiers",
      "out_appear": ["#27:151", "#27:152"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:107",
      "@version": 6,
      "@class": "Concept",
      "out_CSExample": ["#29:80"],
      "out_explain": ["#24:242"],
      "in_contain": ["#19:328"],
      "Label": "Objects",
      "out_appear": ["#27:153", "#27:154"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:108",
      "@version": 5,
      "@class": "Concept",
      "out_CSExample": ["#29:85"],
      "out_explain": ["#24:243"],
      "in_contain": ["#19:329"],
      "Label": "Relationships",
      "out_appear": ["#27:155"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:110",
      "@version": 5,
      "@class": "Concept",
      "out_contain": ["#19:334", "#19:355"],
      "out_explain": ["#24:248"],
      "in_contain": ["#19:333"],
      "Label": "Conditionals",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:111",
      "@version": 9,
      "@class": "Concept",
      "out_HasCode": ["#41:29"],
      "in_teaches": ["#12:82"],
      "in_Number": ["#12:71"],
      "out_CSExample": ["#29:71"],
      "out_explain": ["#24:244"],
      "out_CSError": ["#36:11"],
      "in_contain": ["#19:353"],
      "Label": "Method Overloading",
      "in_Related": ["#33:9"],
      "@fieldTypes": "out_HasCode=g,in_teaches=g,in_Number=g,out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#13:112",
      "@version": 11,
      "@class": "Concept",
      "out_HasCode": ["#41:43"],
      "out_CSExample": ["#29:105", "#29:111"],
      "out_explain": ["#24:246"],
      "in_contain": ["#19:375"],
      "Label": "Console I/O",
      "out_appear": ["#27:159", "#27:186", "#27:207"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:113",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:251"],
      "in_contain": ["#19:358"],
      "Label": "Debugging",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:114",
      "@version": 15,
      "@class": "Concept",
      "out_contain": [
        "#19:360",
        "#19:361",
        "#19:362",
        "#19:363",
        "#19:364",
        "#19:365",
        "#19:366",
        "#19:367",
        "#19:368"
      ],
      "in_teaches": ["#12:72", "#12:73"],
      "out_HasCode": ["#41:40"],
      "out_explain": ["#24:252"],
      "in_contain": ["#19:359"],
      "Label": "Modifiers",
      "@fieldTypes": "out_contain=g,in_teaches=g,out_HasCode=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:115",
      "@version": 5,
      "@class": "Concept",
      "out_contain": ["#19:374", "#19:375"],
      "out_explain": ["#24:257"],
      "in_contain": ["#19:373"],
      "Label": "I/O",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:116",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:381"],
      "out_explain": ["#24:266"],
      "in_contain": ["#19:430"],
      "Label": "Data Formats",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:119",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:390", "#19:403", "#19:407"],
      "out_explain": ["#24:277"],
      "in_contain": ["#19:389"],
      "Label": "Consumer Demand",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:120",
      "@version": 14,
      "@class": "Concept",
      "out_contain": [
        "#19:391",
        "#19:392",
        "#19:394",
        "#19:397",
        "#19:398",
        "#19:399"
      ],
      "out_explain": ["#24:278"],
      "in_contain": ["#19:390"],
      "Label": "Own Price",
      "out_MTExample": [],
      "out_appear": ["#27:199"],
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:122",
      "@version": 6,
      "@class": "Concept",
      "out_explain": ["#24:280"],
      "in_contain": ["#19:391", "#19:398"],
      "Label": "Demand Equation",
      "in_appear": ["#27:200"],
      "out_appear": ["#27:201"],
      "@fieldTypes": "out_explain=g,in_contain=g,in_appear=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:123",
      "@version": 5,
      "@class": "Concept",
      "out_contain": ["#19:393"],
      "out_explain": ["#24:281"],
      "in_contain": ["#19:392"],
      "Label": "Inverse Demand Equation",
      "out_appear": ["#27:202"],
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:124",
      "@version": 9,
      "@class": "Concept",
      "out_explain": ["#24:288"],
      "in_contain": ["#19:393"],
      "Label": "Demand Choke Price",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:125",
      "@version": 8,
      "@class": "Concept",
      "out_contain": ["#19:395", "#19:396"],
      "out_explain": ["#24:283"],
      "in_contain": ["#19:394", "#19:397"],
      "Label": "Income and Substitution Effects",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:126",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:284"],
      "in_contain": ["#19:396"],
      "Label": "Income Effect",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:127",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:285"],
      "in_contain": ["#19:395"],
      "Label": "The Substitution Effect",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:128",
      "@version": 8,
      "@class": "Concept",
      "out_contain": ["#19:400", "#19:401", "#19:402"],
      "out_MTError": ["#37:10"],
      "out_explain": ["#24:289"],
      "in_contain": ["#19:399"],
      "Label": "Price Elasticity of Demand",
      "@fieldTypes": "out_contain=g,out_MTError=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:129",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:290"],
      "in_contain": ["#19:400"],
      "Label": "Price Inelastic Demand",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:130",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:291"],
      "in_contain": ["#19:401"],
      "Label": "Price Elastic Demand",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:131",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:292"],
      "in_contain": ["#19:402"],
      "Label": "Total Expenditure",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:133",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:404", "#19:405", "#19:406"],
      "out_explain": ["#24:293"],
      "in_contain": ["#19:403"],
      "Label": "Income",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:134",
      "@version": 4,
      "@class": "Concept",
      "out_MTError": ["#37:11"],
      "out_explain": ["#24:294"],
      "in_contain": ["#19:404"],
      "Label": "Normal Goods",
      "@fieldTypes": "out_MTError=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:135",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:295"],
      "in_contain": ["#19:405"],
      "Label": "Inferior Goods",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:136",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:296"],
      "in_contain": ["#19:406"],
      "Label": "Income Elasticity of Demand",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:137",
      "@version": 7,
      "@class": "Concept",
      "out_contain": ["#19:408", "#19:409", "#19:410"],
      "out_explain": ["#24:297"],
      "in_contain": ["#19:407"],
      "Label": "Prices of Other Goods",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:138",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:299"],
      "in_contain": ["#19:410"],
      "Label": "Complements",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:139",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:298"],
      "in_contain": ["#19:408"],
      "Label": "Substitutes",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:140",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:300"],
      "in_contain": ["#19:409"],
      "Label": "The Cross Price Elasticity of Demand",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:141",
      "@version": 9,
      "@class": "Concept",
      "out_contain": ["#19:412", "#19:419", "#19:420", "#19:421", "#19:422"],
      "out_explain": ["#24:301"],
      "in_contain": ["#19:411"],
      "Label": "Producer Supply",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:142",
      "@version": 7,
      "@class": "Concept",
      "out_contain": ["#19:413", "#19:414", "#19:417", "#19:418"],
      "out_explain": ["#24:302"],
      "in_contain": ["#19:412"],
      "Label": "Price",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:143",
      "@version": 6,
      "@class": "Concept",
      "out_contain": [],
      "out_explain": ["#24:303"],
      "in_contain": ["#19:413"],
      "Label": "Supply Equation",
      "out_appear": ["#27:205"],
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:144",
      "@version": 7,
      "@class": "Concept",
      "out_contain": ["#19:415"],
      "out_explain": ["#24:304"],
      "in_contain": ["#19:414"],
      "Label": "Inverse Supply Equation",
      "out_appear": ["#27:212"],
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:145",
      "@version": 6,
      "@class": "Concept",
      "out_explain": ["#24:305"],
      "in_contain": ["#19:415"],
      "Label": "Supply Choke Price",
      "out_MTExample": ["#31:57"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:146",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:306"],
      "in_contain": ["#19:417"],
      "Label": "Law of Supply",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:147",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:423", "#19:429"],
      "out_MTError": ["#37:12"],
      "out_explain": ["#24:307"],
      "in_contain": ["#19:418"],
      "Label": "Price Elasticity of Supply",
      "@fieldTypes": "out_contain=g,out_MTError=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:148",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:308"],
      "in_contain": ["#19:419"],
      "Label": "Input Costs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:149",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:309"],
      "in_contain": ["#19:420"],
      "Label": "Advances in Technology",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:150",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:310"],
      "in_contain": ["#19:421"],
      "Label": "Number of Sellers",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:151",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:311"],
      "in_contain": ["#19:422"],
      "Label": "Sellers' Outside Options",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:152",
      "@version": 8,
      "@class": "Concept",
      "out_contain": ["#19:424", "#19:425", "#19:426", "#19:427", "#19:428"],
      "out_explain": ["#24:319"],
      "in_contain": ["#19:423"],
      "Label": "Variation in Supply Elasticity",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:153",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:313"],
      "in_contain": ["#19:424"],
      "Label": "Unit Elastic Supply",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:154",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:314"],
      "in_contain": ["#19:425"],
      "Label": "Price Elastic Supply",
      "out_MTExample": ["#31:56"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:155",
      "@version": 6,
      "@class": "Concept",
      "out_explain": ["#24:315"],
      "in_contain": ["#19:426"],
      "Label": "Elastic Choke Price",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:156",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:316"],
      "in_contain": ["#19:427"],
      "Label": "Price Inelastic Supply",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:157",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:317"],
      "in_contain": ["#19:428"],
      "Label": "Inelastic Choke Price",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:158",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:318"],
      "in_contain": ["#19:429"],
      "Label": "Short and Long run",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:159",
      "@version": 4,
      "@class": "Concept",
      "out_contain": ["#19:432"],
      "out_explain": ["#24:321"],
      "in_contain": ["#19:431"],
      "Label": "Market Equilibrium",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:160",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:320"],
      "in_contain": ["#19:432"],
      "Label": "Solving for the Equilibrium",
      "out_MTExample": ["#31:59"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#13:162",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:322"],
      "in_contain": [],
      "Label": "Excess Supply",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:163",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:323"],
      "in_contain": [],
      "Label": "Excess Demand",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:164",
      "@version": 12,
      "@class": "Concept",
      "out_contain": ["#19:438", "#19:440", "#19:441", "#19:454"],
      "out_explain": ["#24:341"],
      "in_contain": ["#19:437"],
      "Label": "Market Disequilibrium",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:165",
      "@version": 5,
      "@class": "Concept",
      "out_explain": ["#24:325"],
      "in_contain": ["#19:438", "#19:441", "#19:454"],
      "Label": "Excess Supply",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:166",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:439"],
      "in_explain": [],
      "out_explain": ["#24:327"],
      "in_contain": ["#19:440"],
      "Label": "Excess Demand",
      "@fieldTypes": "out_contain=g,in_explain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:167",
      "@version": 11,
      "@class": "Concept",
      "out_contain": [
        "#19:443",
        "#19:444",
        "#19:445",
        "#19:446",
        "#19:447",
        "#19:448",
        "#19:449",
        "#19:452"
      ],
      "out_explain": ["#24:329"],
      "in_contain": ["#19:442"],
      "Label": "Economic Welfare",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:168",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:330"],
      "in_contain": ["#19:443"],
      "Label": "Consumer Surplus",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:169",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:331"],
      "in_contain": ["#19:444"],
      "Label": "Producer Surplus",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:170",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:332"],
      "in_contain": ["#19:445"],
      "Label": "Total Surplus",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:171",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:333"],
      "in_contain": ["#19:446"],
      "Label": "Price Ceiling",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:172",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:334"],
      "in_contain": ["#19:447"],
      "Label": "Price Floor",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:173",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:335"],
      "in_contain": ["#19:448"],
      "Label": "Quota",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:174",
      "@version": 4,
      "@class": "Concept",
      "out_contain": ["#19:450"],
      "out_explain": ["#24:336"],
      "in_contain": ["#19:449"],
      "Label": "Sales Tax",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:175",
      "@version": 4,
      "@class": "Concept",
      "out_contain": ["#19:451"],
      "out_explain": ["#24:337"],
      "in_contain": ["#19:450"],
      "Label": "Tax Incidence/Tax Burden",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:176",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:338"],
      "in_contain": ["#19:451"],
      "Label": "Sales Taxes and Elasticities",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:177",
      "@version": 4,
      "@class": "Concept",
      "out_contain": ["#19:453"],
      "out_explain": ["#24:339"],
      "in_contain": ["#19:452"],
      "Label": "Deadweight Loss",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:178",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:340"],
      "in_contain": ["#19:453"],
      "Label": "Deadweight Loss and Elasticities",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:179",
      "@version": 7,
      "@class": "Concept",
      "out_contain": ["#19:458", "#19:460"],
      "out_explain": ["#24:342"],
      "in_contain": ["#19:456"],
      "Label": "Indifference Curves",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:180",
      "@version": 4,
      "@class": "Concept",
      "out_contain": ["#19:459"],
      "out_explain": ["#24:343"],
      "in_contain": ["#19:458"],
      "Label": "High substitutability",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:181",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:344"],
      "in_contain": ["#19:459"],
      "Label": "Perfect substitutes",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:182",
      "@version": 4,
      "@class": "Concept",
      "out_contain": ["#19:461"],
      "out_explain": ["#24:345"],
      "in_contain": ["#19:460"],
      "Label": "Low substitutability",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:183",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:346"],
      "in_contain": ["#19:461"],
      "Label": "Perfect Complements",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:184",
      "@version": 5,
      "@class": "Concept",
      "out_contain": ["#19:464", "#19:468"],
      "out_explain": ["#24:348"],
      "in_contain": ["#19:463"],
      "Label": "Production Function",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:185",
      "@version": 7,
      "@class": "Concept",
      "out_contain": ["#19:465", "#19:466", "#19:467", "#19:469"],
      "out_explain": ["#24:349"],
      "in_contain": ["#19:464"],
      "Label": "The Short Run",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:186",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:350"],
      "out_CoreExample": ["#30:36"],
      "in_contain": ["#19:465"],
      "Label": "Marginal Product of Labour",
      "@fieldTypes": "out_explain=g,out_CoreExample=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:187",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:351"],
      "in_contain": ["#19:466"],
      "Label": "Average Product of Labour",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:188",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:352"],
      "in_contain": ["#19:467"],
      "Label": "Marginals and Averages",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:189",
      "@version": 8,
      "@class": "Concept",
      "out_contain": ["#19:470", "#19:474", "#19:475", "#19:476", "#19:477"],
      "out_explain": ["#24:353"],
      "in_contain": ["#19:468"],
      "Label": "The Long Run",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:190",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:354"],
      "in_contain": ["#19:469"],
      "Label": "Marginal Product of Capital",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:191",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:471", "#19:472", "#19:473"],
      "out_explain": ["#24:355"],
      "in_contain": ["#19:470"],
      "Label": "Isoquant",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:192",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:356"],
      "in_contain": ["#19:471"],
      "Label": "Marginal Rate of Technical Substitution",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:193",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:357"],
      "in_contain": ["#19:472"],
      "Label": "Substitutability in Production",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:194",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:358"],
      "in_contain": ["#19:473"],
      "Label": "MRTS and Marginal Products",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:195",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:359"],
      "in_contain": ["#19:474"],
      "Label": "Isocost Lines",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:196",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:360"],
      "in_contain": ["#19:475"],
      "out_CoreError": ["#38:0"],
      "Label": "Cost Minimization",
      "@fieldTypes": "out_explain=g,in_contain=g,out_CoreError=g"
    },
    {
      "@type": "d",
      "@rid": "#13:197",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:361"],
      "in_contain": ["#19:476"],
      "Label": "Returns to Scale",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:198",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:362"],
      "in_contain": ["#19:477"],
      "Label": "Technical Progress",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:199",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:363"],
      "out_CoreExample": ["#30:37"],
      "in_contain": ["#19:478"],
      "Label": "Marginal Utility",
      "@fieldTypes": "out_explain=g,out_CoreExample=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:200",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:364"],
      "in_contain": ["#19:479"],
      "Label": "Budget Constraints",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:201",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:365"],
      "in_contain": ["#19:480"],
      "Label": "The Consumers Optimal Choice",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:202",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:366"],
      "in_contain": ["#19:481"],
      "out_CoreError": ["#38:1"],
      "Label": "Income and Substitution Effects of a Price Change",
      "@fieldTypes": "out_explain=g,in_contain=g,out_CoreError=g"
    },
    {
      "@type": "d",
      "@rid": "#13:203",
      "@version": 14,
      "@class": "Concept",
      "out_contain": [
        "#19:483",
        "#19:488",
        "#19:489",
        "#19:490",
        "#19:491",
        "#19:495",
        "#19:496"
      ],
      "out_explain": ["#24:367"],
      "in_contain": ["#19:482"],
      "Label": "Production Costs",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:204",
      "@version": 8,
      "@class": "Concept",
      "out_contain": ["#19:492", "#19:493", "#19:494"],
      "out_explain": ["#24:368"],
      "in_contain": ["#19:483"],
      "Label": "Fixed Costs",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:205",
      "@version": 8,
      "@class": "Concept",
      "out_explain": ["#24:369"],
      "in_contain": ["#19:493", "#19:494"],
      "Label": "Avoidable Costs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:206",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:487"],
      "out_explain": ["#24:370"],
      "in_contain": ["#19:492"],
      "Label": "Sunk Costs",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:207",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:371"],
      "in_contain": ["#19:487"],
      "Label": "Sunk Cost Fallacy",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:208",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:372"],
      "in_contain": ["#19:488"],
      "Label": "Variable Costs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:209",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:373"],
      "in_contain": ["#19:489"],
      "Label": "Total Costs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:210",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:374"],
      "in_contain": ["#19:490"],
      "Label": "Average Costs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:211",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:375"],
      "in_contain": ["#19:491"],
      "Label": "Marginal Cost",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:212",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:376"],
      "in_contain": ["#19:495"],
      "Label": "Marginals and Averages",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:213",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:377"],
      "in_contain": ["#19:496"],
      "Label": "Economies of Scale",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:214",
      "@version": 15,
      "@class": "Concept",
      "out_contain": [
        "#19:500",
        "#19:501",
        "#19:502",
        "#19:503",
        "#19:504",
        "#19:505",
        "#19:506",
        "#19:507",
        "#19:508"
      ],
      "out_explain": ["#24:379", "#24:393"],
      "in_contain": ["#19:498"],
      "Label": "Perfect Competition",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:216",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:382"],
      "in_contain": ["#19:500"],
      "Label": "Profit",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:217",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:381", "#24:384"],
      "in_contain": ["#19:501"],
      "Label": "Firm Demand",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:218",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:383"],
      "in_contain": ["#19:502"],
      "Label": "Profit Maximisation",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:219",
      "@version": 2,
      "@class": "Concept",
      "in_contain": ["#19:503"],
      "Label": "Shutdown Price",
      "@fieldTypes": "in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:220",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:385"],
      "in_contain": ["#19:504"],
      "Label": "Firm's Short Run Supply",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:221",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:386"],
      "in_contain": ["#19:505"],
      "Label": "Industry Short Run  Supply",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:222",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:387"],
      "in_contain": ["#19:506"],
      "Label": "Producer Surplus",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:223",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:388"],
      "in_contain": ["#19:507"],
      "Label": "Producer Surplus and Profit",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:224",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:509", "#19:510", "#19:511"],
      "out_explain": ["#24:389"],
      "in_contain": ["#19:508"],
      "Label": "Perfect Competition in the Long Run",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:225",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:390"],
      "in_contain": ["#19:509"],
      "Label": "Entry",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:226",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:391"],
      "in_contain": ["#19:510"],
      "Label": "Exit",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:227",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:392"],
      "in_contain": ["#19:511"],
      "Label": "Economic Welfare",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:228",
      "@version": 8,
      "@class": "Concept",
      "out_contain": ["#19:519", "#19:520", "#19:522", "#19:523"],
      "in_contain": ["#19:512"],
      "Label": "Monopoly",
      "@fieldTypes": "out_contain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:229",
      "@version": 10,
      "@class": "Concept",
      "out_contain": ["#19:514", "#19:515", "#19:516", "#19:517", "#19:518"],
      "out_explain": ["#24:394"],
      "in_contain": ["#19:519"],
      "Label": "Barriers to Entry",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:230",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:395"],
      "in_contain": ["#19:514"],
      "Label": "Natural Monopoly",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:231",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:396"],
      "in_contain": ["#19:515"],
      "Label": "Switching Costs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:232",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:397"],
      "in_contain": ["#19:516"],
      "Label": "Brand Loyalty",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:233",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:398"],
      "in_contain": ["#19:517"],
      "Label": "Absolute Cost Advantages and Control of Key Inputs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:234",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:399"],
      "in_contain": ["#19:518"],
      "Label": "Patents",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:235",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:400"],
      "in_contain": ["#19:520"],
      "Label": "Algebra of Monopoly",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:236",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:401"],
      "in_contain": ["#19:522"],
      "Label": "Market Power and Welfare",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:237",
      "@version": 5,
      "@class": "Concept",
      "out_contain": ["#19:524", "#19:525"],
      "out_explain": ["#24:402"],
      "in_contain": ["#19:523"],
      "Label": "Market Power and Government Regulation",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:238",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:403"],
      "in_contain": ["#19:524"],
      "Label": "Direct Price Regulation",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:239",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:404"],
      "in_contain": ["#19:525"],
      "Label": "Antitrust Legislation",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:240",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:405"],
      "in_contain": ["#19:526"],
      "Label": "Imperfect Competition",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:241",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:529", "#19:530", "#19:531"],
      "out_explain": ["#24:407"],
      "in_contain": ["#19:528"],
      "Label": "Oligopoly",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:242",
      "@version": 5,
      "@class": "Concept",
      "out_contain": ["#19:528", "#19:534"],
      "out_explain": ["#24:406"],
      "in_contain": ["#19:527"],
      "Label": "Imperfect Competition",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:243",
      "@version": 4,
      "@class": "Concept",
      "out_explain": ["#24:408"],
      "in_contain": ["#19:529"],
      "Label": "Collusion",
      "out_appear": ["#27:213"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#13:244",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:409"],
      "in_contain": ["#19:530"],
      "Label": "Cournot Oligopoly",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:245",
      "@version": 4,
      "@class": "Concept",
      "out_contain": ["#19:532", "#19:533"],
      "in_contain": ["#19:531"],
      "Label": "Other types of oligopoly",
      "@fieldTypes": "out_contain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:246",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:410"],
      "in_contain": ["#19:532"],
      "Label": "Bertrand competition",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:247",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:411"],
      "in_contain": ["#19:533"],
      "Label": "Stackelberg competition",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:248",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:412"],
      "in_contain": ["#19:534"],
      "Label": "Monopolistic competition",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:249",
      "@version": 5,
      "@class": "Concept",
      "out_contain": ["#19:536", "#19:540"],
      "out_explain": ["#24:413"],
      "in_contain": ["#19:535"],
      "Label": "Pricing Strategies",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:250",
      "@version": 6,
      "@class": "Concept",
      "out_contain": ["#19:537", "#19:538", "#19:539"],
      "out_explain": ["#24:414"],
      "in_contain": ["#19:536"],
      "Label": "Price Discrimination",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:251",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:415"],
      "in_contain": ["#19:537"],
      "Label": "First-degree Price Discrimination",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:252",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:416"],
      "in_contain": ["#19:538"],
      "Label": "Third-degree Price Discrimination",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:253",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:417"],
      "in_contain": ["#19:539"],
      "Label": "Second-degree Price Discrimination",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:254",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:418"],
      "in_contain": ["#19:540"],
      "Label": "Two-part Tarrifs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:255",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:420"],
      "in_contain": ["#19:542"],
      "Label": "Players",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:256",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:421"],
      "in_contain": ["#19:543"],
      "Label": "Strategies and Payoffs",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:257",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:422"],
      "in_contain": ["#19:544"],
      "Label": "Dominant and Dominated Strategies",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:258",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:423"],
      "in_contain": ["#19:545"],
      "Label": "Mixed Strategies",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:259",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:424"],
      "in_contain": ["#19:546"],
      "Label": "Zero-sum Games",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:260",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:425"],
      "in_contain": ["#19:547"],
      "Label": "Prisoner\u2019s Dilemma",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:261",
      "@version": 7,
      "@class": "Concept",
      "out_contain": ["#19:549", "#19:550", "#19:551", "#19:553"],
      "out_explain": ["#24:426"],
      "in_contain": ["#19:548"],
      "Label": "Multiple Equilibria",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:262",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:427"],
      "in_contain": ["#19:549"],
      "Label": "Pure Coordination Game",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:263",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:428"],
      "in_contain": ["#19:550"],
      "Label": "Assurance Game",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:264",
      "@version": 3,
      "@class": "Concept",
      "out_contain": ["#19:552"],
      "in_contain": ["#19:551"],
      "Label": "Chicken",
      "@fieldTypes": "out_contain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#13:265",
      "@version": 3,
      "@class": "Concept",
      "out_explain": ["#24:429"],
      "in_contain": ["#19:553"],
      "Label": "Battle of the Sexes",
      "@fieldTypes": "out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#14:3",
      "@version": 19,
      "@class": "Construct",
      "in_Number": ["#12:21", "#12:31"],
      "out_explain": ["#24:6"],
      "out_CoreExample": ["#30:6"],
      "out_CSError": ["#36:24"],
      "in_contain": ["#19:368"],
      "Label": "Access Control",
      "out_appear": ["#27:2"],
      "@fieldTypes": "in_Number=g,out_explain=g,out_CoreExample=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:4",
      "@version": 10,
      "@class": "Construct",
      "out_HasCode": ["#41:41"],
      "out_CSExample": ["#29:5"],
      "in_Number": ["#12:30"],
      "out_explain": ["#24:8"],
      "in_contain": ["#19:6"],
      "Label": "Getters & Setters",
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#14:7",
      "@version": 11,
      "@class": "Construct",
      "out_contain": ["#19:12", "#19:267", "#19:353"],
      "in_Number": ["#12:1"],
      "out_CSExample": ["#29:91"],
      "out_explain": ["#24:31"],
      "in_contain": ["#19:11"],
      "Label": "Methods",
      "out_appear": ["#27:9"],
      "@fieldTypes": "out_contain=g,in_Number=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:8",
      "@version": 9,
      "@class": "Construct",
      "out_HasCode": ["#41:30"],
      "in_Number": ["#12:9"],
      "out_explain": ["#24:32"],
      "in_contain": ["#19:12"],
      "Label": "Main method",
      "out_appear": ["#27:10", "#27:11"],
      "@fieldTypes": "out_HasCode=g,in_Number=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:11",
      "@version": 22,
      "@class": "Construct",
      "in_CoreExample": [],
      "out_contain": ["#19:241"],
      "out_HasCode": ["#41:21"],
      "in_teaches": ["#12:85"],
      "in_Number": ["#12:18", "#12:20"],
      "out_explain": ["#24:39"],
      "out_CoreExample": ["#30:12", "#30:13"],
      "in_contain": ["#19:211"],
      "Label": "Arrays",
      "out_implements": [],
      "out_appear": ["#27:35", "#27:36"],
      "@fieldTypes": "in_CoreExample=g,out_contain=g,out_HasCode=g,in_teaches=g,in_Number=g,out_explain=g,out_CoreExample=g,in_contain=g,out_implements=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:12",
      "@version": 16,
      "@class": "Construct",
      "out_contain": ["#19:261"],
      "out_HasCode": ["#41:25"],
      "in_Number": ["#12:7"],
      "out_explain": ["#24:41"],
      "out_CoreExample": ["#30:11", "#30:33"],
      "in_contain": ["#19:214"],
      "Label": "Strings",
      "out_appear": ["#27:13", "#27:176"],
      "@fieldTypes": "out_contain=g,out_HasCode=g,in_Number=g,out_explain=g,out_CoreExample=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:15",
      "@version": 12,
      "@class": "Construct",
      "out_CSExample": ["#29:73", "#29:92"],
      "in_Number": ["#12:32"],
      "out_explain": ["#24:56"],
      "in_contain": ["#19:28"],
      "Label": "Constructors",
      "out_appear": ["#27:16", "#27:17", "#27:18"],
      "out_Related": ["#33:9"],
      "@fieldTypes": "out_CSExample=g,in_Number=g,out_explain=g,in_contain=g,out_appear=g,out_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#14:16",
      "@version": 20,
      "@class": "Construct",
      "out_HasCode": ["#41:38"],
      "in_Number": ["#12:35"],
      "out_CSExample": ["#29:93"],
      "out_explain": ["#24:59"],
      "out_produce": [],
      "out_CoreExample": ["#30:2"],
      "out_CSError": ["#36:7"],
      "in_contain": ["#19:206"],
      "Label": "Overriding",
      "out_implements": [],
      "out_appear": ["#27:22", "#27:23", "#27:24"],
      "in_Related": ["#33:8"],
      "@fieldTypes": "out_HasCode=g,in_Number=g,out_CSExample=g,out_explain=g,out_produce=g,out_CoreExample=g,out_CSError=g,in_contain=g,out_implements=g,out_appear=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#14:17",
      "@version": 31,
      "@class": "Construct",
      "out_contain": [],
      "out_CSExample": ["#29:87"],
      "out_": [],
      "out_explain": ["#24:62"],
      "Label": "For loop",
      "out_HasCode": ["#41:1"],
      "in_explain": [],
      "out_CoreExample": ["#30:14", "#30:15", "#30:16"],
      "out_produce": [],
      "out_CSError": ["#36:5"],
      "in_contain": ["#19:242"],
      "out_implements": [],
      "out_appear": ["#27:25", "#27:26", "#27:169", "#27:170"],
      "@fieldTypes": "out_contain=g,out_CSExample=g,out_=g,out_explain=g,out_HasCode=g,in_explain=g,out_CoreExample=g,out_produce=g,out_CSError=g,in_contain=g,out_implements=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:18",
      "@version": 14,
      "@class": "Construct",
      "out_HasCode": ["#41:2"],
      "out_CSExample": ["#29:78", "#29:103", "#29:107"],
      "out_explain": ["#24:69"],
      "in_contain": ["#19:35"],
      "Label": "While loop",
      "out_appear": ["#27:27"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:19",
      "@version": 11,
      "@class": "Construct",
      "out_HasCode": ["#41:0"],
      "out_CSExample": ["#29:79", "#29:108"],
      "out_explain": ["#24:67"],
      "in_contain": ["#19:36"],
      "Label": "Do While loop",
      "out_appear": ["#27:28"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:20",
      "@version": 22,
      "@class": "Construct",
      "out_contain": [],
      "out_CSExample": ["#29:15"],
      "out_explain": ["#24:70"],
      "out_CSError": ["#36:25", "#36:26"],
      "out_CoreExample": ["#30:17", "#30:18", "#30:32"],
      "in_contain": ["#19:38"],
      "Label": "If-else statement",
      "out_implements": [],
      "out_appear": ["#27:29", "#27:30"],
      "@fieldTypes": "out_contain=g,out_CSExample=g,out_explain=g,out_CSError=g,out_CoreExample=g,in_contain=g,out_implements=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:22",
      "@version": 11,
      "@class": "Construct",
      "out_CSExample": ["#29:13", "#29:25"],
      "out_explain": ["#24:74"],
      "out_CSError": ["#36:27"],
      "in_contain": ["#19:40"],
      "Label": "Switch-case statement",
      "out_implements": [],
      "out_appear": ["#27:31"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,out_implements=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:23",
      "@version": 10,
      "@class": "Construct",
      "in_Number": ["#12:24"],
      "out_CSExample": ["#29:86"],
      "out_explain": ["#24:77"],
      "in_contain": ["#19:43"],
      "Label": "JUnit",
      "out_appear": ["#27:32", "#27:160", "#27:183"],
      "@fieldTypes": "in_Number=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:24",
      "@version": 13,
      "@class": "Construct",
      "out_HasCode": ["#41:24"],
      "out_CSExample": ["#29:12"],
      "in_Number": ["#12:6"],
      "out_explain": ["#24:78"],
      "out_CSError": ["#36:17"],
      "in_contain": ["#19:212"],
      "Label": "Null",
      "out_implements": [],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,out_CSError=g,in_contain=g,out_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#14:25",
      "@version": 8,
      "@class": "Construct",
      "in_Number": ["#12:37"],
      "out_explain": ["#24:97"],
      "in_contain": ["#19:335"],
      "Label": "Arithmetic Operators",
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#14:26",
      "@version": 7,
      "@class": "Construct",
      "out_MTError": ["#37:7"],
      "out_explain": ["#24:98"],
      "in_contain": ["#19:170"],
      "Label": "Boolean",
      "out_MTExample": ["#31:52"],
      "@fieldTypes": "out_MTError=g,out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#14:27",
      "@version": 9,
      "@class": "Construct",
      "out_HasCode": ["#41:53"],
      "out_explain": ["#24:104"],
      "in_contain": ["#19:355"],
      "Label": "Elif",
      "out_MTExample": ["#31:7"],
      "@fieldTypes": "out_HasCode=g,out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#14:28",
      "@version": 14,
      "@class": "Construct",
      "out_MTError": ["#37:0"],
      "out_explain": ["#24:107"],
      "in_contain": ["#19:348"],
      "Label": "Exceptions",
      "out_MTExample": ["#31:8"],
      "out_appear": ["#27:53"],
      "out_Related": ["#33:22"],
      "in_Related": ["#33:21"],
      "@fieldTypes": "out_MTError=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#14:29",
      "@version": 12,
      "@class": "Construct",
      "out_HasCode": ["#41:50"],
      "in_Number": ["#12:42"],
      "out_explain": ["#24:110"],
      "in_contain": ["#19:164"],
      "Label": "For loop",
      "out_MTExample": ["#31:12", "#31:13", "#31:14"],
      "out_appear": ["#27:57", "#27:58"],
      "@fieldTypes": "out_HasCode=g,in_Number=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:30",
      "@version": 16,
      "@class": "Construct",
      "out_contain": ["#19:177", "#19:178", "#19:180"],
      "in_Number": ["#12:45"],
      "out_MTError": ["#37:1"],
      "out_explain": ["#24:114"],
      "out_produce": [],
      "in_contain": ["#19:345"],
      "Label": "Functions",
      "out_MTExample": ["#31:15", "#31:16"],
      "@fieldTypes": "out_contain=g,in_Number=g,out_MTError=g,out_explain=g,out_produce=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#14:31",
      "@version": 17,
      "@class": "Construct",
      "out_HasCode": ["#41:52"],
      "out_MTError": ["#37:3", "#37:4"],
      "out_explain": ["#24:117"],
      "out_produce": ["#21:8"],
      "in_contain": ["#19:334"],
      "Label": "If statement",
      "out_MTExample": ["#31:17"],
      "out_appear": ["#27:59"],
      "@fieldTypes": "out_HasCode=g,out_MTError=g,out_explain=g,out_produce=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:32",
      "@version": 9,
      "@class": "Construct",
      "in_Number": ["#12:39"],
      "out_explain": ["#24:120"],
      "in_contain": ["#19:182"],
      "Label": "Import",
      "out_MTExample": ["#31:20", "#31:21"],
      "out_appear": ["#27:60"],
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:33",
      "@version": 13,
      "@class": "Construct",
      "in_Number": ["#12:48"],
      "out_explain": ["#24:123"],
      "in_contain": ["#19:168"],
      "Label": "Lists",
      "out_MTExample": ["#31:22", "#31:48", "#31:50"],
      "out_appear": ["#27:61", "#27:62", "#27:63", "#27:166"],
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:34",
      "@version": 6,
      "@class": "Construct",
      "out_explain": ["#24:130"],
      "in_contain": ["#19:181"],
      "Label": "Matplotlib",
      "out_appear": ["#27:64"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:35",
      "@version": 7,
      "@class": "Construct",
      "out_MTError": ["#37:8"],
      "out_explain": ["#24:131"],
      "in_contain": ["#19:169"],
      "Label": "None",
      "out_MTExample": ["#31:53"],
      "@fieldTypes": "out_MTError=g,out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#14:36",
      "@version": 8,
      "@class": "Construct",
      "in_Number": ["#12:47"],
      "out_explain": ["#24:132"],
      "in_contain": ["#19:179"],
      "Label": "Numpy",
      "out_MTExample": ["#31:30"],
      "out_appear": ["#27:65"],
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:38",
      "@version": 6,
      "@class": "Construct",
      "out_explain": ["#24:135"],
      "in_contain": ["#19:174"],
      "Label": "Print statement",
      "out_appear": ["#27:67"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:39",
      "@version": 8,
      "@class": "Construct",
      "out_explain": ["#24:140"],
      "in_contain": ["#19:178"],
      "Label": "Return keyword",
      "out_MTExample": ["#31:34", "#31:35", "#31:36"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#14:40",
      "@version": 10,
      "@class": "Construct",
      "out_explain": ["#24:145"],
      "in_contain": ["#19:172"],
      "Label": "Tuples",
      "out_MTExample": ["#31:37"],
      "out_appear": ["#27:75", "#27:76", "#27:77", "#27:211"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:41",
      "@version": 7,
      "@class": "Construct",
      "in_Number": ["#12:46"],
      "out_explain": ["#24:148"],
      "in_contain": ["#19:175"],
      "Label": "User I/O",
      "out_MTExample": ["#31:39"],
      "@fieldTypes": "in_Number=g,out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#14:42",
      "@version": 17,
      "@class": "Construct",
      "out_contain": ["#19:176", "#19:335"],
      "out_CSExample": ["#29:26"],
      "out_explain": ["#24:149"],
      "out_CoreExample": ["#30:26"],
      "in_contain": ["#19:171"],
      "Label": "Variables",
      "out_MTExample": ["#31:40", "#31:41", "#31:42"],
      "out_appear": ["#27:78", "#27:79", "#27:80"],
      "@fieldTypes": "out_contain=g,out_CSExample=g,out_explain=g,out_CoreExample=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:43",
      "@version": 14,
      "@class": "Construct",
      "out_HasCode": ["#41:49"],
      "in_Number": ["#12:43"],
      "out_explain": ["#24:155"],
      "in_contain": ["#19:337"],
      "Label": "While Loop",
      "out_MTExample": ["#31:45", "#31:46", "#31:58"],
      "out_appear": ["#27:82", "#27:208"],
      "@fieldTypes": "out_HasCode=g,in_Number=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:44",
      "@version": 6,
      "@class": "Construct",
      "out_HasCode": ["#41:11"],
      "out_CSExample": ["#29:21"],
      "out_explain": ["#24:161"],
      "in_contain": ["#19:237"],
      "Label": "ArrayLists",
      "out_appear": ["#27:181"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:45",
      "@version": 6,
      "@class": "Construct",
      "out_HasCode": ["#41:14"],
      "out_CSExample": ["#29:90"],
      "out_explain": ["#24:163"],
      "in_contain": ["#19:238"],
      "Label": "LinkedLists",
      "out_appear": ["#27:180"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:46",
      "@version": 6,
      "@class": "Construct",
      "out_HasCode": ["#41:12"],
      "out_CSExample": ["#29:75"],
      "out_explain": ["#24:164"],
      "in_contain": ["#19:239"],
      "Label": "Map",
      "out_appear": ["#27:179"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:47",
      "@version": 8,
      "@class": "Construct",
      "out_HasCode": ["#41:13"],
      "out_CSExample": ["#29:89"],
      "out_explain": ["#24:165"],
      "in_contain": ["#19:240"],
      "Label": "Set",
      "out_appear": ["#27:87", "#27:177", "#27:178"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:48",
      "@version": 11,
      "@class": "Construct",
      "out_HasCode": ["#41:22"],
      "out_CSExample": ["#29:23"],
      "in_Number": ["#12:62"],
      "out_explain": ["#24:166"],
      "in_contain": ["#19:241"],
      "Label": "n-dimension arrays",
      "out_appear": ["#27:88"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:49",
      "@version": 6,
      "@class": "Construct",
      "out_CSExample": ["#29:34"],
      "out_explain": ["#24:181"],
      "in_contain": ["#19:258"],
      "Label": "Prepared Statements (Dynamic Queries)",
      "out_appear": ["#27:104", "#27:105"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:50",
      "@version": 8,
      "@class": "Construct",
      "out_HasCode": ["#41:26"],
      "out_CSExample": ["#29:37"],
      "in_Number": ["#12:57"],
      "out_explain": ["#24:184"],
      "in_contain": ["#19:261"],
      "Label": "StringBuilder",
      "out_appear": ["#27:111", "#27:112"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,in_Number=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:52",
      "@version": 4,
      "@class": "Construct",
      "out_CSExample": ["#29:44"],
      "out_explain": ["#24:189"],
      "in_contain": ["#19:266"],
      "Label": "Ternary Operator",
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#14:53",
      "@version": 9,
      "@class": "Construct",
      "out_HasCode": ["#41:31"],
      "out_CSExample": ["#29:45", "#29:46"],
      "out_explain": ["#24:190"],
      "out_CSError": ["#36:18"],
      "in_contain": ["#19:267"],
      "Label": "Varags",
      "out_appear": ["#27:119", "#27:120"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:54",
      "@version": 8,
      "@class": "Construct",
      "out_HasCode": ["#41:35"],
      "out_CSExample": ["#29:47"],
      "out_explain": ["#24:191"],
      "in_contain": ["#19:268"],
      "Label": "Comparable Interface",
      "out_appear": ["#27:121"],
      "out_Related": ["#33:20"],
      "in_Related": ["#33:19"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g,out_Related=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#14:55",
      "@version": 9,
      "@class": "Construct",
      "out_HasCode": ["#41:34"],
      "out_explain": ["#24:192"],
      "in_contain": ["#19:269"],
      "Label": "Iterable Interface",
      "out_appear": ["#27:122", "#27:123", "#27:124"],
      "in_Related": [],
      "@fieldTypes": "out_HasCode=g,out_explain=g,in_contain=g,out_appear=g,in_Related=g"
    },
    {
      "@type": "d",
      "@rid": "#14:56",
      "@version": 8,
      "@class": "Construct",
      "out_HasCode": ["#41:3"],
      "out_CSExample": ["#29:104"],
      "out_explain": ["#24:194"],
      "in_contain": ["#19:271"],
      "Label": "Iterators",
      "out_appear": ["#27:127", "#27:128", "#27:191"],
      "@fieldTypes": "out_HasCode=g,out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:57",
      "@version": 13,
      "@class": "Construct",
      "out_contain": [],
      "out_CSExample": ["#29:98"],
      "out_explain": ["#24:200"],
      "out_CSError": ["#36:23"],
      "in_contain": ["#19:366"],
      "Label": "Static",
      "out_appear": ["#27:134", "#27:136"],
      "@fieldTypes": "out_contain=g,out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:58",
      "@version": 9,
      "@class": "Construct",
      "out_CSExample": ["#29:96"],
      "out_explain": ["#24:198"],
      "out_CSError": ["#36:21", "#36:22"],
      "in_contain": ["#19:364"],
      "Label": "Final",
      "out_appear": ["#27:135"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:59",
      "@version": 6,
      "@class": "Construct",
      "out_CSExample": ["#29:95"],
      "out_explain": ["#24:199"],
      "in_contain": ["#19:363"],
      "Label": "Abstract",
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#14:60",
      "@version": 7,
      "@class": "Construct",
      "out_CSExample": ["#29:97"],
      "out_explain": ["#24:245"],
      "in_contain": ["#19:365"],
      "Label": "Default",
      "out_appear": ["#27:137"],
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:61",
      "@version": 6,
      "@class": "Construct",
      "out_CSExample": ["#29:94"],
      "out_explain": ["#24:203"],
      "in_contain": ["#19:361"],
      "Label": "Public",
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#14:62",
      "@version": 7,
      "@class": "Construct",
      "out_explain": ["#24:204"],
      "out_CSError": ["#36:19"],
      "in_contain": ["#19:360"],
      "Label": "Private",
      "out_appear": ["#27:133"],
      "@fieldTypes": "out_explain=g,out_CSError=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:64",
      "@version": 7,
      "@class": "Construct",
      "out_CSExample": ["#29:99"],
      "out_explain": ["#24:206"],
      "in_contain": ["#19:367"],
      "Label": "None",
      "@fieldTypes": "out_CSExample=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#14:65",
      "@version": 6,
      "@class": "Construct",
      "out_explain": ["#24:205"],
      "out_CSError": ["#36:20"],
      "in_contain": ["#19:362"],
      "Label": "Protected",
      "@fieldTypes": "out_explain=g,out_CSError=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#14:66",
      "@version": 5,
      "@class": "Construct",
      "out_explain": ["#24:253"],
      "in_contain": ["#19:369"],
      "Label": "SciPy",
      "out_appear": ["#27:161", "#27:162"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:67",
      "@version": 6,
      "@class": "Construct",
      "out_HasCode": ["#41:55"],
      "out_explain": ["#24:254"],
      "in_contain": ["#19:370"],
      "Label": "Dictionaries",
      "out_MTExample": ["#31:49"],
      "out_appear": ["#27:167"],
      "@fieldTypes": "out_HasCode=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:68",
      "@version": 7,
      "@class": "Construct",
      "out_HasCode": ["#41:54"],
      "out_MTError": ["#37:9"],
      "out_explain": ["#24:255"],
      "in_contain": ["#19:371"],
      "Label": "Set",
      "out_MTExample": ["#31:54"],
      "out_appear": ["#27:168"],
      "@fieldTypes": "out_HasCode=g,out_MTError=g,out_explain=g,in_contain=g,out_MTExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#14:69",
      "@version": 4,
      "@class": "Construct",
      "out_explain": ["#24:256"],
      "in_contain": ["#19:372"],
      "Label": "Type Coercion",
      "out_MTExample": ["#31:51"],
      "@fieldTypes": "out_explain=g,in_contain=g,out_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#14:70",
      "@version": 9,
      "@class": "Construct",
      "out_explain": ["#24:265"],
      "out_CoreExample": ["#30:34", "#30:35"],
      "in_contain": ["#19:381"],
      "Label": "JSON",
      "out_appear": ["#27:187", "#27:188", "#27:189", "#27:190"],
      "@fieldTypes": "out_explain=g,out_CoreExample=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#15:0",
      "@version": 10,
      "@class": "Error",
      "in_produce": [],
      "in_CSError": ["#36:10"],
      "out_explain": [],
      "Explanation": "In this example the variable i stops existing and then we try to use it. This will thrown an error.",
      "Label": null,
      "in_CSExample": [],
      "Body": "for(int i = 0 ; i<10; i++){\u000a doStuff(i); //still exists\u000a}\u000aSystem.out.println(i); //error: i is no longer in scope",
      "@fieldTypes": "in_produce=g,in_CSError=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#15:1",
      "@version": 9,
      "@class": "Error",
      "in_produce": [],
      "in_CSError": ["#36:1"],
      "out_explain": [],
      "Explanation": "We import relative to the current working directory. In this case we would just do: import Person.*;\u000aWhich will import all (excluding packages) from Person folder.\u000aThe exception to this is the built in Java libraries which use the: java.<library> notation",
      "Label": null,
      "in_CSExample": [],
      "Body": "import home/Documents/myPackage/src/Person",
      "@fieldTypes": "in_produce=g,in_CSError=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#15:2",
      "@version": 11,
      "@class": "Error",
      "in_produce": [],
      "in_CSError": ["#36:0"],
      "out_explain": [],
      "Explanation": "This will print out \"Cat\". What is happening is that s1 and s2 point to the same object, not that s1 and s2 hold copies of the same object. \u000aWe would have to perform a deep copy to make s1 and s2 hold identical objects.",
      "Label": null,
      "in_CSExample": [],
      "Body": "String s1 = \"Hello World\";\u000aString s2 =  s1;\u000as2 = \"Cat\";\u000aSystem.out.println(s1);",
      "@fieldTypes": "in_produce=g,in_CSError=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#15:3",
      "@version": 11,
      "@class": "Error",
      "in_CSError": ["#36:8"],
      "in_produce": [],
      "out_explain": [],
      "Explanation": "We are only allowed to extend one class at most! (But recall we can chain them).",
      "Label": null,
      "Body": "public class Student extends Person, Human{\u000a //Class body here\u000a}",
      "@fieldTypes": "in_CSError=g,in_produce=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#15:4",
      "@version": 7,
      "@class": "Error",
      "in_produce": [],
      "in_CSError": ["#36:7"],
      "out_explain": [],
      "Explanation": "A method declared 'final' may not be overridden.",
      "Label": null,
      "Body": "public class Person{\u000a  public final void method(){//method}\u000a}\u000apublic class Student extends Person{\u000a  public final void method(){//different stuff}\u000a}",
      "@fieldTypes": "in_produce=g,in_CSError=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#15:5",
      "@version": 7,
      "@class": "Error",
      "in_produce": [],
      "in_CSError": ["#36:5"],
      "out_explain": [],
      "Explanation": "This snippet has two problems:\u000a1. This will be an infinite loop because i will always be less than 100\u000a2. On line 4 it attempts to access a variable that is not in scope: variable defined in a for loop can only be accessed from within the for loop (but this would never be executed because of the infinite loop).",
      "Label": null,
      "Body": "for (int i = 5; i<100; i--){\u000a\u0009System.out.println(i);\u000a}\u000aSystem.out.println(i);",
      "@fieldTypes": "in_produce=g,in_CSError=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#15:7",
      "@version": 7,
      "@class": "Error",
      "in_produce": [],
      "in_CSError": ["#36:9"],
      "out_explain": [],
      "Explanation": "We should not cast a more general type to a more precise type, ie we should not cast a superclass to a subclass. In this example we are trying to cast an Object (which could be ANY object) to a Student which will cause problems.",
      "Label": null,
      "Body": "Student s = new Student();\u000aObject o = (Object)s;\u000aStudent newStudent = o;",
      "@fieldTypes": "in_produce=g,in_CSError=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#15:8",
      "@version": 7,
      "@class": "Error",
      "in_MTExample": [],
      "out_explain": [],
      "Explanation": "This will generate us the following output on our screen:\u000a\"Traceback (most recent call last):                                                                                                                       \u000a  File \"main.py\", line 2, in <module>                                                                                                                    \u000a    message/3                                                                                                                                            TypeError: unsupported operand type(s) for /: 'str' and 'int'\"\u000a\u000aThis is because an error is occurring and we are doing nothing about it.",
      "Label": null,
      "in_MTError": ["#37:0"],
      "Body": "message = \"Hello World\"\u000amessage/3",
      "@fieldTypes": "in_MTExample=g,out_explain=g,in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:9",
      "@version": 7,
      "@class": "Error",
      "in_produce": [],
      "out_explain": [],
      "Explanation": "This will not do anything. We define our function after we have tried to invoke it which means the interpreter wont know that the function exists and will crash.",
      "Label": null,
      "in_MTError": ["#37:1"],
      "Body": "print_weather(\"Sun!\")\u000a\u000adef print_weather(weather):\u000a\u0009print \"The weather today is:\",weather #probably rain",
      "@fieldTypes": "in_produce=g,out_explain=g,in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:10",
      "@version": 8,
      "@class": "Error",
      "in_MTExample": [],
      "out_explain": [],
      "Explanation": "This example will not work. Each side of an AND can be consider \"self-contained\" so this should be read as: if (x is not 3) and 6 which does not make sense. It should be if x is not 3 and x is not 6.",
      "Label": null,
      "in_MTError": ["#37:4"],
      "Body": "if x != 3 and 6:\u000a\u0009#code",
      "@fieldTypes": "in_MTExample=g,out_explain=g,in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:11",
      "@version": 8,
      "@class": "Error",
      "in_MTExample": [],
      "out_explain": [],
      "Explanation": "In this case y is \"out of scope\" meaning that at that outer level of indentation the variable has never been declared, y can only be accessed from within that for loop.",
      "Label": null,
      "in_MTError": ["#37:3"],
      "Body": "x = \"Hello\"\u000aif x == \"Hello\":\u000a\u0009y = 3\u000aprint y",
      "@fieldTypes": "in_MTExample=g,out_explain=g,in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:12",
      "@version": 7,
      "@class": "Error",
      "in_MTExample": [],
      "out_explain": [],
      "Explanation": "This is completely unnecessary. Whilst 5 is repeated twice the two \"meanings\" of the values are completely different and the two methods are not related at all. When the method is called multiplyBy5 and you changed FIVE = 6 then suddenly the function makes no sense anymore.",
      "Label": null,
      "in_MTError": ["#37:5"],
      "Body": "FIVE = 5\u000adef multiplyBy5(x):\u000a\u0009return FIVE*x\u000adef add5(x):\u000a\u0009return x + FIVE",
      "@fieldTypes": "in_MTExample=g,out_explain=g,in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:13",
      "@version": 8,
      "@class": "Error",
      "in_MTExample": [],
      "out_explain": [],
      "Explanation": "This recursion will go on forever and will crash Python when the recursive stack becomes too deep. You require a base case.",
      "Label": null,
      "in_MTError": ["#37:2"],
      "Body": "def f(x):\u000a\u0009return f(x+1)",
      "@fieldTypes": "in_MTExample=g,out_explain=g,in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:14",
      "@version": 11,
      "@class": "Error",
      "in_MathError": [],
      "in_MTExample": [],
      "out_explain": [],
      "Explanation": "This will not work when we try to run this program because local_variable is only in scope when method1 is being executed.\u000aWe are able to 'pass' local_variable from method1 to method2 if method1 invokes method2, this is covered in arguments.",
      "Label": null,
      "in_MTError": ["#37:6"],
      "Body": "def method1():\u000a  local_variable = \"Hello\"\u000adef method2()\u000a  print local_variable\u000a\u000amethod1()\u000amethod2()",
      "@fieldTypes": "in_MathError=g,in_MTExample=g,out_explain=g,in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:15",
      "@version": 5,
      "@class": "Error",
      "in_CSError": ["#36:6"],
      "Explanation": "Do not catch \"Exception\" - be more precise. Also note that whilst Stack Traces are great for programmers they are awful for users.\u000a<a href=\"http://i.imgur.com/0amsRAB.jpg\" target=\"_blank\">Wont someone PLEASE think about the users</a>.",
      "Label": null,
      "in_CSExample": [],
      "Body": "try {\u000a\u0009methodMayThrowError();\u000a}catch(Exception e){\u000a\u0009e.printStackTrace();\u000a}",
      "@fieldTypes": "in_CSError=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#15:16",
      "@version": 6,
      "@class": "Error",
      "in_CSError": ["#36:3"],
      "Explanation": "",
      "Label": null,
      "in_CSExample": [],
      "Body": "List&lt;String&gt; myList;\u000amyList.add(new Integer(5)); //Type exception will be thrown here",
      "@fieldTypes": "in_CSError=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#15:17",
      "@version": 8,
      "@class": "Error",
      "in_CSError": ["#36:2"],
      "Explanation": "Whilst String is a subtype of Object List<String\\> IS NOT a subtype of List<Object\\>. This means you cannot add a String to an Object List without casting it to an Object. You will then get Objects back.",
      "Label": null,
      "in_CSExample": [],
      "Body": "List&lt;Object&gt;objList = new ArrayList&lt;String&gt;();",
      "@fieldTypes": "in_CSError=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#15:18",
      "@version": 4,
      "@class": "Error",
      "in_CSError": ["#36:4"],
      "Explanation": "At compile time generic information is removed, which means that the compiler sees:\u000apublic void method1(Map, String) and public void method2(Map, String) which means this is not allowed.",
      "Label": null,
      "in_CSExample": [],
      "Body": "public void method1(Map<String, Integer> words, String source){}\u000apublic void method2(Map<String, Person> names, String source(){}",
      "@fieldTypes": "in_CSError=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#15:19",
      "@version": 4,
      "@class": "Error",
      "in_CSError": ["#36:11"],
      "Explanation": "This will not work. At compile time generics are removed thus making the signatures the same.\u000aThey must not have the same parameters.",
      "Label": null,
      "Body": "public void displayList(List&lt;String&gt; list){\u000a\u0009//Display list here\u000a}\u000a\u000apublic void displayList(List&lt;Integer&gt; list){\u000a\u0009//Do stuff\u000a}",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:20",
      "@version": 2,
      "@class": "Error",
      "in_CSError": ["#36:12"],
      "Explanation": "This is a bad comment. It is obvious (probably even to non-programmers) that x is being set to 5. But why is x being set to 5?",
      "Label": null,
      "Body": "int x = 5; //sets x to 5",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:21",
      "@version": 3,
      "@class": "Error",
      "in_CSError": ["#36:15"],
      "Explanation": "<code>int getAge</code> does not exist in the Object class and cannot be invoked. This might seem strange, but in the successful examples we can guarantee that a method at least exists but with this example we cannot guarantee a method exists and will throw an compile time error because of that.",
      "Label": null,
      "Body": "Person p = new Person(\"name\",42);\u000aObject o = p;\u000aSystem.out.println(o.getAge());",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:22",
      "@version": 3,
      "@class": "Error",
      "in_CSError": ["#36:17"],
      "Explanation": "Two things can go wrong here: Firstly we do not know is Person is null, and when we try to invoke getName() on a null value our program will throw a NullPointerException and secondly we do not know if the name returned will be null or not and if it is null we will then output \"Name: null\" which doesn't always make sense.",
      "Label": null,
      "Body": "public static void printName(Person p){\u000a    System.out.println(\"Name: \" + p.getName());\u000a}",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:23",
      "@version": 3,
      "@class": "Error",
      "in_CSError": ["#36:25"],
      "Explanation": "This is going to print 'Buzz' because indentation is not important to the Java compiler. The else statement attaches to the second if statement and is never executed. The first if statement resolves to false (hence why 'Fizz' is not output) but the second if statement is not inside the first hence why 'Buzz' is output. \u000aThis is why curly braces are important - they make the scope clear.",
      "Label": null,
      "Body": "int x = 10;\u000a        if (x > 12)\u000a            System.out.println(\"Fizz\");\u000a            if (x < 5) System.out.println(\"Buzz\");\u000a            else System.out.println(\".\");",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:24",
      "@version": 2,
      "@class": "Error",
      "in_CSError": ["#36:26"],
      "Explanation": "The curly braces create a new scope which y is in. You cannot access y from outside the curly braces it was created in.",
      "Label": null,
      "Body": "int x = 3;\u000aif (x < 5){\u000a    int y = 5;\u000a}\u000aSystem.out.println(y);",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:25",
      "@version": 2,
      "@class": "Error",
      "in_CSError": ["#36:27"],
      "Explanation": "We cannot use ranges. Only exact values.",
      "Label": null,
      "Body": "int x = 3;\u000aswitch(x){\u000a    case x > 1 && x < 3: System.out.println(\"Bacon\");\u000a}",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:26",
      "@version": 2,
      "@class": "Error",
      "in_CSError": ["#36:28"],
      "Explanation": "We cannot invoke methods on primitive types.",
      "Label": null,
      "Body": "long number = 0x11010234;\u000anumber.double();",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:27",
      "@version": 2,
      "@class": "Error",
      "in_CSError": ["#36:29"],
      "Explanation": "Java does not support the '**' operator (unlike Python).",
      "Label": null,
      "Body": "long expon = 3 ** 2;",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:28",
      "@version": 4,
      "@class": "Error",
      "Explanation": "",
      "Label": null,
      "in_MTError": ["#37:10"],
      "Body": "a) Students sometimes attempt to try and the find the arc elasticity between two prices even when only provided with information about a single price.  This might appear to be a natural approach given the initial definition of a price elasticity using percentage changes. Indeed, it is often taught this way in High School Economics.  However, professional economists ignore arc elasticities and always calculate point elasticities at a single price.\u000a<br>\u000ab) Arithmetical errors often arise in choice of slope.  Be careful to use the right slope in the right place (that is, b or d)\u000a<br>\u000ac) If you are confused over how to find the slope of any linear equation then there is not much hope of correctly calculating an elasticity. Have a look at this simple video tutorial from the Khan Academy: <href>https://youtu.be/IL3UCuXrUzE</href>",
      "@fieldTypes": "in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:29",
      "@version": 6,
      "@class": "Error",
      "Explanation": "",
      "Label": null,
      "in_MTError": ["#37:11"],
      "Body": "It is a frequent error to define a normal good as one which satisfies the law of demand such that when price increases, demand declines.  But normality has nothing to do with price and everything to do with the relationship between income and demand.",
      "@fieldTypes": "in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:30",
      "@version": 8,
      "@class": "Error",
      "Explanation": "",
      "Label": null,
      "in_MTError": ["#37:12"],
      "Body": "a) Students sometimes attempt to try and the find the arc elasticity between two prices even when only provided with information about a single price.  This might appear to be a natural approach given the initial definition of a price elasticity using percentage changes. Indeed, it is often taught this way in High School Economics.  However, professional economists ignore arc elasticities and always calculate point elasticities at a single price.\u000a<br>\u000a<br>\u000ab) Arithmetical errors often arise in choice of slope.  Be careful to use the right slope in the right place (that is, b or d)\u000a<br>\u000a<br>\u000ac) If you are confused over how to find the slope of any linear equation then this can lead to errors in correctly calculating an elasticity. Have a look at this simple video tutorial from the Khan Academy:  <a href=\"https://youtu.be/IL3UCuXrUzE\" target=\"_blank\"> https://youtu.be/IL3UCuXrUzE</a>",
      "@fieldTypes": "in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:31",
      "@version": 2,
      "@class": "Error",
      "in_CSError": ["#36:30"],
      "Explanation": "Enumerations cannot contain numbers",
      "Label": null,
      "Body": "public enum Rating {\u000a\u0009U, PG, 12A\u000a}",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:32",
      "@version": 2,
      "@class": "Error",
      "in_CoreError": ["#38:0"],
      "Explanation": null,
      "Label": null,
      "Body": "Returns to scale and diminishing marginal returns are easily confused.  Remember that in the case of returns to scale, we are changing all inputs simultaneously by the same proportionate amount. But in the case of diminishing marginal returns, one of the inputs is held constant and the other input is increased.",
      "@fieldTypes": "in_CoreError=g"
    },
    {
      "@type": "d",
      "@rid": "#15:33",
      "@version": 2,
      "@class": "Error",
      "in_CoreError": ["#38:1"],
      "Explanation": null,
      "Label": null,
      "Body": "Whether goods are normal or inferior depends only on the sign of the income effect.  It would be a serious mistake to say that a good is normal simply because consumption increases following a fall in prices.  It is perfectly possible even in the case of an inferior good for consumption to increase following the fall in price of a good.  This will happen when the substitution effect (increasing consumption) outweighs the income effect (reducing consumption) for an inferior good such that the total price effect results in consumption of the good rising overall.",
      "@fieldTypes": "in_CoreError=g"
    },
    {
      "@type": "d",
      "@rid": "#16:0",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:0"],
      "Body": "http://people.cs.aau.dk/~torp/Teaching/E04/OOP/handouts/introduction.pdf",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:1",
      "@version": 3,
      "@class": "Resource",
      "out_explain": ["#24:3"],
      "Label": null,
      "in_appear": ["#27:1"],
      "Body": "http://www.tutorialspoint.com/java/java_encapsulation.htm",
      "@fieldTypes": "out_explain=g,in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:2",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:2"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:3",
      "@version": 3,
      "@class": "Resource",
      "in_appear": ["#27:3", "#27:97"],
      "Label": null,
      "Body": "https://www.cs.umd.edu/~clin/MoreJava/Objects/local.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:4",
      "@version": 4,
      "@class": "Resource",
      "in_appear": ["#27:95"],
      "Label": null,
      "Body": "https://docs.oracle.com/javase/tutorial/java/concepts/class.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:5",
      "@version": 4,
      "@class": "Resource",
      "in_appear": ["#27:94"],
      "Label": null,
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:6",
      "@version": 5,
      "@class": "Resource",
      "in_appear": ["#27:6", "#27:96"],
      "Label": null,
      "Body": "https://docs.oracle.com/javase/tutorial/java/IandI/interfaceDef.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:7",
      "@version": 5,
      "@class": "Resource",
      "in_appear": ["#27:7", "#27:137"],
      "Label": null,
      "Body": "https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:8",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:10"],
      "Body": "https://stackoverflow.com/questions/146576/why-is-the-java-main-method-static",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:9",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:11"],
      "Body": "https://stackoverflow.com/questions/26522205/why-interface-in-java-8-allowed-to-have-the-main-method",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:10",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:8"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/index.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:11",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:9"],
      "Body": "https://javarevisited.blogspot.com/2011/09/variable-argument-in-java5-varargs.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:12",
      "@version": 5,
      "@class": "Resource",
      "in_appear": ["#27:13", "#27:83"],
      "Label": null,
      "Body": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:13",
      "@version": 3,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:14"],
      "Body": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:15",
      "@version": 10,
      "@class": "Resource",
      "in_explain": [],
      "in_contain": [],
      "in_appear": ["#27:134", "#27:136"],
      "Label": null,
      "Body": "https://stackoverflow.com/questions/413898/what-does-the-static-keyword-do-in-a-class",
      "@fieldTypes": "in_explain=g,in_contain=g,in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:16",
      "@version": 3,
      "@class": "Resource",
      "in_explain": [],
      "Label": null,
      "Body": "https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#16:17",
      "@version": 6,
      "@class": "Resource",
      "in_appear": ["#27:194", "#27:195", "#27:196"],
      "Label": null,
      "Body": "http://www.oracle.com/technetwork/articles/java/index-137868.html",
      "in_require": [],
      "@fieldTypes": "in_appear=g,in_require=g"
    },
    {
      "@type": "d",
      "@rid": "#16:18",
      "@version": 4,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:43"],
      "Body": "https://google.github.io/styleguide/javaguide.html#s7-javadoc",
      "in_require": [],
      "@fieldTypes": "in_appear=g,in_require=g"
    },
    {
      "@type": "d",
      "@rid": "#16:19",
      "@version": 5,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:193"],
      "Body": "https://joostdevblog.blogspot.co.uk/2015/01/what-most-young-programmers-need-to.html",
      "in_require": ["#22:2"],
      "@fieldTypes": "in_appear=g,in_require=g"
    },
    {
      "@type": "d",
      "@rid": "#16:20",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:15"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/index.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:21",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:18"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:22",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:17"],
      "Body": "https://stackoverflow.com/questions/260666/can-an-abstract-class-have-a-constructor",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:23",
      "@version": 5,
      "@class": "Resource",
      "in_appear": ["#27:16", "#27:133"],
      "Label": null,
      "Body": "https://stackoverflow.com/questions/2816123/can-a-constructor-in-java-be-private",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:24",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:20"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/concepts/inheritance.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:25",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:21"],
      "Body": "http://beginnersbook.com/2014/01/exception-handling-in-method-overriding-with-example/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:26",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:22"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:27",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:24"],
      "Body": "http://www.tutorialspoint.com/java/java_overriding.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:28",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:23"],
      "Body": "http://beginnersbook.com/2014/01/exception-handling-in-method-overriding-with-example/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:29",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:26"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:30",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:25"],
      "Body": "https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/enhanced-for-loops.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:32",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:27"],
      "Body": "http://www.tutorialspoint.com/java/java_loop_control.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:33",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:28"],
      "Body": "http://www.tutorialspoint.com/java/java_loop_control.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:34",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:29"],
      "Body": "http://www.tutorialspoint.com/java/if_statement_in_java.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:35",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:30"],
      "Body": "http://www.tutorialspoint.com/java/java_decision_making.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:36",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:31"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:37",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:32"],
      "Body": "http://junit.org/junit4/javadoc/latest/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:38",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:33"],
      "Body": "http://users.drew.edu/bburd/JavaForDummies4/ShortCircuitEval.pdf",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:39",
      "@version": 5,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:34"],
      "Body": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:40",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:35"],
      "Body": "http://math.hws.edu/javanotes/c7/s5.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:41",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:36"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:42",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:38"],
      "Body": "http://www.tutorialspoint.com/java/java_polymorphism.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:43",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:37"],
      "Body": "http://www.javatpoint.com/static-binding-and-dynamic-binding",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:44",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:41"],
      "Body": "http://www.tutorialspoint.com/java/java_polymorphism.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:45",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:48"],
      "Body": "http://www.tutorialspoint.com/python/python_functions.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:46",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:47"],
      "Body": "https://docs.python.org/2/tutorial/controlflow.html#arbitrary-argument-lists",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:47",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:49"],
      "Body": "https://alb.host.cs.st-andrews.ac.uk/cole/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:48",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:50"],
      "Body": "https://www.python.org/dev/peps/pep-0008/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:49",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:51"],
      "Body": "https://joostdevblog.blogspot.co.uk/2015/01/what-most-young-programmers-need-to.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:50",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:52"],
      "Body": "http://introtopython.org/introducing_functions.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:51",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:53"],
      "Body": "http://www.python-course.eu/exception_handling.php",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:52",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:54"],
      "Body": "https://docs.python.org/2/tutorial/inputoutput.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:53",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:55"],
      "Body": "https://docs.python.org/2/library/functions.html#open",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:54",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:56"],
      "Body": "http://preshing.com/20110920/the-python-with-statement-by-example/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:55",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:57"],
      "Body": "https://www.youtube.com/watch?v=OSGv2VnC0go",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:56",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:58"],
      "Body": "https://docs.python.org/2/tutorial/datastructures.html#looping-techniques",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:57",
      "@version": 2,
      "@class": "Resource",
      "in_produce": ["#21:8"],
      "Label": null,
      "Body": "http://www.openbookproject.net/books/bpp4awd/ch04.html",
      "@fieldTypes": "in_produce=g"
    },
    {
      "@type": "d",
      "@rid": "#16:58",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:59"],
      "Body": "https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:59",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:60"],
      "Body": "https://en.wikibooks.org/wiki/A_Beginner%27s_Python_Tutorial/Importing_Modules",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:60",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:61"],
      "Body": "https://docs.python.org/2/tutorial/datastructures.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:61",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:62"],
      "Body": "http://effbot.org/zone/python-list.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:62",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:63"],
      "Body": "https://docs.python.org/2.3/whatsnew/section-slices.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:63",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:64"],
      "Body": "http://matplotlib.org/examples/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:64",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:65"],
      "Body": "https://docs.scipy.org/doc/numpy/reference/index.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:65",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:66"],
      "Body": "http://www.tutorialspoint.com/python/python_classes_objects.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:66",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:67"],
      "Body": "http://learnpythonthehardway.org/book/ex5.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:67",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:68"],
      "Body": "https://www.python.org/dev/peps/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:68",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:70"],
      "Body": "https://www.python.org/doc/essays/blurb/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:69",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:69"],
      "Body": "https://www.python.org/dev/peps/pep-0020/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:70",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:71"],
      "Body": "https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:71",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:72"],
      "Body": "https://www.google.co.uk/search?q=define%3Arecursion&oq=define%3Arecursion",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:72",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:73"],
      "Body": "http://docs.python-guide.org/en/latest/writing/tests/\u000al",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:73",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:74"],
      "Body": "https://docs.python.org/2.7/library/unittest.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:74",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:75"],
      "Body": "http://openbookproject.net/thinkcs/python/english3e/tuples.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:75",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:77"],
      "Body": "https://en.wikibooks.org/wiki/Python_Programming/Tuples#Packing_and_Unpacking",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:76",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:76"],
      "Body": "https://en.wikipedia.org/wiki/John_von_Neumann",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:77",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:80"],
      "Body": "http://www.davekuhlman.org/python_101.html#built-in-data-types",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:78",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:78"],
      "Body": "https://en.wikibooks.org/wiki/Python_Programming/Variables_and_Strings",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:79",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:79"],
      "Body": "http://openbookproject.net/thinkcs/python/english3e/tuples.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:80",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:81"],
      "Body": "http://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:81",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:82"],
      "Body": "http://learnpythonthehardway.org/book/ex33.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:82",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:84"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:83",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:85"],
      "Body": "https://docs.oracle.com/javase/tutorial/collections/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:84",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:86"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/Map.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:85",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:87"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/Set.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:86",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:88"],
      "Body": "https://www.cs.cmu.edu/~mrmiller/15-110/Handouts/arrays2D.pdf",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:88",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:91"],
      "Body": "https://stackoverflow.com/questions/1958636/what-is-double-brace-initialization-in-java",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:89",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:90"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:90",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:92"],
      "Body": "http://0.30000000000000004.com/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:92",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:98"],
      "Body": "http://www.java2s.com/Tutorial/Java/0020__Language/VariableScope.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:93",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:99"],
      "Body": "http://www.tutorialspoint.com/jpa/jpa_quick_guide.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:94",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:102"],
      "Body": "https://docs.oracle.com/javase/tutorial/jdbc/basics/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:95",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:101"],
      "Body": "https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:96",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:100"],
      "Body": "http://www.tutorialspoint.com/jdbc/jdbc-driver-types.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:97",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:103"],
      "Body": "http://hibernate.org/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:98",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:105"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:99",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:104"],
      "Body": "https://en.wikipedia.org/wiki/SQL_injection#Examples",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:100",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:106"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:101",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:107"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/io/FileReader.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:102",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:108"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:103",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:109"],
      "Body": "https://docs.oracle.com/javase/tutorial/essential/io/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:105",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:111"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:106",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:112"],
      "Body": "http://www.tutorialspoint.com/java/lang/java_lang_stringbuilder.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:107",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:113"],
      "Body": "http://www.tutorialspoint.com/design_pattern/factory_pattern.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:108",
      "@version": 4,
      "@class": "Resource",
      "in_appear": ["#27:169"],
      "Label": null,
      "Body": "https://blogs.oracle.com/CoreJavaTechTips/entry/using_enhanced_for_loops_with",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:109",
      "@version": 4,
      "@class": "Resource",
      "in_appear": ["#27:170"],
      "Label": null,
      "Body": "https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:110",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:116"],
      "Body": "https://stackoverflow.com/questions/1754315/how-to-create-custom-exceptions-in-java",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:111",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:117"],
      "Body": "https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:112",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:118"],
      "Body": "https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:113",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:119"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html#varargs",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:114",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:120"],
      "Body": "https://stackoverflow.com/questions/766559/when-do-you-use-varargs-in-java",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:115",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:121"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:116",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:122"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:117",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:123"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:118",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:124"],
      "Body": "https://blogs.oracle.com/CoreJavaTechTips/entry/using_enhanced_for_loops_with",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:119",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:125"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/generics/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:120",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:126"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/generics/why.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:121",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:127"],
      "Body": "https://www.cs.colostate.edu/~cs161/Summer16/slides/14_iterators.pdf",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:122",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:128"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:123",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:129"],
      "Body": "https://en.wikipedia.org/wiki/MapReduce",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:124",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:130"],
      "Body": "http://research.google.com/archive/mapreduce.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:125",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:131"],
      "Body": "https://www-01.ibm.com/software/data/infosphere/hadoop/mapreduce/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:126",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:132"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:127",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:135"],
      "Body": "https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:128",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:138"],
      "Body": "https://stackoverflow.com/questions/21220155/what-does-abstraction-mean-in-programming",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:129",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:139"],
      "Body": "https://www.ima.umn.edu/~arnold/disasters/ariane.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:130",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:140"],
      "Body": "http://www.json.org/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:131",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:141"],
      "Body": "http://agiledata.org/essays/tdd.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:132",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:142"],
      "Body": "https://xkcd.com/927/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:133",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:143"],
      "Body": "http://softwaretestingfundamentals.com/unit-testing/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:135",
      "@version": 10,
      "@class": "Resource",
      "in_appear": [
        "#27:145",
        "#27:146",
        "#27:147",
        "#27:148",
        "#27:149",
        "#27:150",
        "#27:151",
        "#27:154",
        "#27:155"
      ],
      "Label": null,
      "Body": "https://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:137",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:152"],
      "Body": "http://pages.cs.wisc.edu/~hasti/cs302/examples/UMLdiagram.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:138",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:153"],
      "Body": "http://www.tutorialspoint.com/uml/uml_class_diagram.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:139",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:156"],
      "Body": "https://info.cs.st-andrews.ac.uk/student-handbook/learning-teaching/programming-style.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:140",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:157"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:141",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:158"],
      "Body": "http://steve.hollasch.net/cgindex/coding/ieeefloat.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:142",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:159"],
      "Body": "https://docs.oracle.com/javase/tutorial/essential/io/cl.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:143",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:160"],
      "Body": "http://www.vogella.com/tutorials/JUnit/article.html#testorganization",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:144",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:162"],
      "Body": "http://www.scipy.org/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:145",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:161"],
      "Body": "http://docs.scipy.org/doc/scipy/reference/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:146",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:163"],
      "Body": "http://stackoverflow.com/questions/1504717/why-does-comparing-strings-in-python-using-either-or-is-sometimes-produce",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:147",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:164"],
      "Body": "http://stackoverflow.com/questions/2988017/string-comparison-in-python-is-vs",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:148",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:165"],
      "Body": "http://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:149",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:166"],
      "Body": "http://www.secnetix.de/olli/Python/list_comprehensions.hawk",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:150",
      "@version": 3,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:167"],
      "Body": "http://www.pythonforbeginners.com/dictionary/how-to-use-dictionaries-in-python",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:151",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:168"],
      "Body": "https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:152",
      "@version": 4,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:171"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#parseInt-java.lang.String-",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:153",
      "@version": 1,
      "@class": "Resource",
      "Label": null,
      "Body": "http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html"
    },
    {
      "@type": "d",
      "@rid": "#16:154",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:172"],
      "Body": "http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:155",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:173"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#deepEquals-java.lang.Object-java.lang.Object-",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:156",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:174"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#equals-java.lang.Object-java.lang.Object-",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:157",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:175"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:158",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:176"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:159",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:177"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:160",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:178"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:161",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:179"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/Map.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:162",
      "@version": 3,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:180"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:163",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:181"],
      "Body": "http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:164",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:182"],
      "Body": "https://hadoop.apache.org/docs/r1.2.1/mapred_tutorial.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:165",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:183"],
      "Body": "http://junit.org/junit5/docs/current/user-guide/#writing-tests",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:166",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:184"],
      "Body": "https://www.tutorialspoint.com/jpa/jpa_jpql.htm",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:167",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:185"],
      "Body": "http://docs.oracle.com/html/E13946_04/ejb3_langref.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:168",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:186"],
      "Body": "http://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:169",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:187"],
      "Body": "http://www.oracle.com/technetwork/articles/java/json-1973242.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:170",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:188"],
      "Body": "https://docs.oracle.com/javame/8.0/api/json/api/com/oracle/json/JsonObject.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:171",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:189"],
      "Body": "https://docs.oracle.com/javame/8.0/api/json/api/com/oracle/json/Json.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:172",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:190"],
      "Body": "http://theoryapp.com/parse-json-in-java/",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:173",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:191"],
      "Body": "https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:174",
      "@version": 3,
      "@class": "Resource",
      "Label": "",
      "in_appear": ["#27:192"],
      "Body": "https://stackoverflow.com/questions/6863182/what-is-the-difference-between-iterator-and-iterable-and-how-to-use-them",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:175",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:197"],
      "Body": "https://stackoverflow.com/questions/2504959/why-can-java-collections-not-directly-store-primitives-types",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:176",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:198"],
      "Body": "https://stackoverflow.com/questions/21974361/what-java-collection-should-i-use",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:177",
      "@version": 3,
      "@class": "Resource",
      "Label": "Demand Equation",
      "in_appear": ["#27:199"],
      "Body": "If you unsure how to find the slope of any linear equation then have a look at this simple video tutorial from the Khan Academy: https://youtu.be/IL3UCuXrUzE",
      "out_appear": ["#27:200"],
      "@fieldTypes": "in_appear=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:178",
      "@version": 6,
      "@class": "Resource",
      "Label": "Demand Equation",
      "in_appear": ["#27:201"],
      "Body": "https://youtu.be/IL3UCuXrUzE",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:179",
      "@version": 2,
      "@class": "Resource",
      "Label": "Inverse Demand Equation",
      "in_appear": ["#27:202"],
      "Body": "https://youtu.be/IL3UCuXrUzE",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:180",
      "@version": 3,
      "@class": "Resource",
      "in_appear": ["#27:203", "#27:205"],
      "Label": "Supply equation",
      "Body": "https://youtu.be/IL3UCuXrUzE",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:181",
      "@version": 7,
      "@class": "Resource",
      "in_appear": ["#27:204", "#27:212"],
      "Label": "inverse supply",
      "Body": "https://youtu.be/IL3UCuXrUzE",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:182",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:207"],
      "Body": "https://msdn.microsoft.com/en-us/library/ee798441(v=cs.20).aspx",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:183",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:208"],
      "Body": "https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:184",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:209"],
      "Body": "https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:185",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:210"],
      "Body": "https://stackoverflow.com/questions/22885931/when-if-ever-to-use-the-is-keyword-in-python",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:186",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:211"],
      "Body": "https://docs.python.org/3/library/collections.html#collections.namedtuple",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#16:187",
      "@version": 2,
      "@class": "Resource",
      "Label": null,
      "in_appear": ["#27:213"],
      "Body": "https://www.quora.com/Why-do-cartels-fail",
      "@fieldTypes": "in_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#17:0",
      "@version": 8,
      "@class": "Example",
      "in_CoreExample": ["#30:4"],
      "in_explain": [],
      "out_explain": [],
      "Explanation": "This holds all the data and methods for that class, implemented by the 'class' keyword.",
      "Label": null,
      "Body": "public abstract class Person{ ... }",
      "@fieldTypes": "in_CoreExample=g,in_explain=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:1",
      "@version": 9,
      "@class": "Example",
      "in_CoreExample": ["#30:5"],
      "in_explain": ["#24:3"],
      "out_explain": [],
      "Explanation": "This shows relevant members and methods together within the same class.",
      "Label": null,
      "Body": "public class Module {\u000a\u000a    private String name;\u000a    private double grade;\u000a\u000a    /*\u000a     * This is the maximum grade for a student at St Andrews\u000a     * It can only be accessed internally, cannot be changed and only has 1 copy of it for all the Student objects.\u000a     */\u000a    private static final double MAX_RESULTS = 20.0;\u000a\u000a    /*\u000a     * All of the below methods can (and were) created by the IDE.\u000a     */\u000a    public String getName() {\u000a        return name;\u000a    }\u000a... //other methods omitted for brevity.\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_explain=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:2",
      "@version": 5,
      "@class": "Example",
      "in_CoreExample": ["#30:6"],
      "in_explain": [],
      "Label": null,
      "Body": "private String name;\u000aprotected String name;\u000aprivate static final double MAX_RESULTS = 20.0;",
      "@fieldTypes": "in_CoreExample=g,in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:3",
      "@version": 9,
      "@class": "Example",
      "in_explain": [],
      "out_explain": [],
      "Explanation": "The private members now can only be accessed from within the class or through these methods that we provided.",
      "Label": null,
      "in_CSExample": ["#29:5"],
      "Body": "private String name;\u000a    private double grade;\u000a\u000a    /*\u000a     * All of the below methods can (and were) created by the IDE.\u000a     */\u000a    public String getName() {\u000a        return name;\u000a    }\u000a\u000a    public void setName(String name) {\u000a        this.name = name;\u000a    }\u000a\u000a    public double getGrade() {\u000a        return grade;\u000a    }\u000a\u000a    public void setGrade(double grade) {\u000a        this.grade = grade;\u000a    }",
      "@fieldTypes": "in_explain=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:4",
      "@version": 6,
      "@class": "Example",
      "in_explain": [],
      "out_explain": [],
      "Label": null,
      "in_CSExample": ["#29:6"],
      "Body": "Object obj;\u000a\u000apublic method(){\u000a  Object newObj = new Object();\u000a  obj = newObj;\u000a  ...//other stuff\u000a}",
      "@fieldTypes": "in_explain=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:5",
      "@version": 11,
      "@class": "Example",
      "in_explain": [],
      "out_explain": [],
      "Explanation": "This gives us a class which will create objects of type Cat which has a (private) name and a method to access that name. You may wish to refer to access modifiers.",
      "Label": null,
      "in_CSExample": ["#29:27"],
      "Body": "public class Cat {\u000a    private String name;\u000a    public String getName() {\u000a        return name;\u000a    }\u000a}",
      "@fieldTypes": "in_explain=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:6",
      "@version": 8,
      "@class": "Example",
      "in_CoreExample": ["#30:29"],
      "in_explain": [],
      "Explanation": "This class has additional requirements imposed on it. Firstly it is a subclass of Person so inherits from it, and it also agrees to implement an Interface making it examinable.",
      "Label": null,
      "Body": "public class Student extends Person implements ExaminableInterface{\u000a    //methods and data\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:7",
      "@version": 7,
      "@class": "Example",
      "in_explain": [],
      "Label": null,
      "in_CSExample": ["#29:28"],
      "Body": "//This is an abstract class, thus we cannot have an object of type Person\u000apublic abstract class Person {\u000a    //methods and data\u000a}",
      "@fieldTypes": "in_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:8",
      "@version": 11,
      "@class": "Example",
      "in_CoreExample": ["#30:30"],
      "in_explain": ["#24:23"],
      "out_explain": [],
      "Explanation": "Any class that 'extends' this interface must implement the method's with the same signature as declared in the interface. In this case that class must contain a method called getModules which takes no parameters and returns an array of Modules.",
      "Label": null,
      "in_CSExample": [],
      "Body": "public interface ExaminableInterface {\u000a    /*\u000a     * Whilst we are allowed to put constants here, we typically choose not to.\u000a     * Interfaces should deal with the service an Object will provide and not\u000a     * the data it contains.\u000a     */\u000a\u000a    /*\u000a     * In interface it is unnecessary to have the methods with (non-static) modifiers,\u000a     * this is because they are implicitly 'public abstract'\u000a     */\u000a    /**\u000a     * Will find all the module codes for the exams that an Object\u000a     * has been scheduled to sit.\u000a     * @return An array containing the module codes of the exams to be sat\u000a     */\u000a    Module[] getModules();\u000a\u000a    /* This provides a default implementation which will be used if it is not overwritten */\u000a    default int totalCredits(){\u000a        return 240;\u000a    }\u000a\u000a    static String examInformation(){\u000a        return \"https://www.st-andrews.ac.uk/students/academic/examinations/frequentlyaskedquestions-exams/\";\u000a    }\u000a\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_explain=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:9",
      "@version": 6,
      "@class": "Example",
      "in_explain": ["#24:24"],
      "Label": null,
      "in_CSExample": ["#29:29"],
      "Body": "public class Student extends Person implements ExaminableInterface{\u000a    //methods\u000a}",
      "@fieldTypes": "in_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:10",
      "@version": 11,
      "@class": "Example",
      "in_CoreExample": [],
      "in_explain": [],
      "Label": null,
      "in_CSExample": ["#29:9"],
      "Body": "package people;\u000a\u000aimport exception.NoArgumentsException;\u000aimport interfaces.ExaminableInterface;\u000a\u000aimport java.security.InvalidParameterException;",
      "@fieldTypes": "in_CoreExample=g,in_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:11",
      "@version": 8,
      "@class": "Example",
      "in_explain": [],
      "out_explain": [],
      "Explanation": "This will import everything from java.util (a library built in to Java).",
      "Label": null,
      "in_CSExample": ["#29:8"],
      "Body": "import java.util.*",
      "@fieldTypes": "in_explain=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:12",
      "@version": 6,
      "@class": "Example",
      "in_CoreExample": ["#30:28"],
      "in_explain": [],
      "Label": null,
      "Body": "protected int matricNumber;",
      "@fieldTypes": "in_CoreExample=g,in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:13",
      "@version": 7,
      "@class": "Example",
      "in_CoreExample": ["#30:27"],
      "in_explain": [],
      "Label": null,
      "Body": "for (int i =0; i<100; i++){\u000a    //Code\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:14",
      "@version": 9,
      "@class": "Example",
      "in_CoreExample": ["#30:13"],
      "in_explain": [],
      "out_explain": [],
      "Explanation": "This creates an array of Modules called 'modules'. Each index in the array will hold a reference to an object of type module.",
      "Label": null,
      "Body": "private Module[] modules;",
      "@fieldTypes": "in_CoreExample=g,in_explain=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:15",
      "@version": 7,
      "@class": "Example",
      "in_CoreExample": ["#30:11"],
      "in_explain": [],
      "Label": null,
      "Body": "String message = \"Hello World!\";",
      "@fieldTypes": "in_CoreExample=g,in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:18",
      "@version": 6,
      "@class": "Example",
      "in_CoreExample": ["#30:0"],
      "in_explain": [],
      "Label": null,
      "Body": "/**\u000a * The representation for a person.\u000a * @author Programmer\u000a * @date 18/3/2005\u000a */\u000a\u000a /**\u000a  * Will find all the module codes for the exams that an Object has been scheduled to sit.\u000a  * @return An array containing the module codes of the exams to be sat\u000a  */\u000apublic module[] findExams(){}\u000a\u000a/**\u000a  * Finds the square root of the sum of two integers\u000a  *\u000a  * @param a the first integer\u000a  * @param b the second integer\u000a  *\u000a  * @return the square root of the two integers summed together\u000a  */\u000apublic double sumAndSquareRoot(int a, int b){\u000a    return Math.sqrt(a+b);\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:19",
      "@version": 8,
      "@class": "Example",
      "in_CoreExample": ["#30:31"],
      "in_explain": [],
      "Label": null,
      "Body": "final int MAX_SIZE = 64; //Used for our arrays.",
      "@fieldTypes": "in_CoreExample=g,in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:20",
      "@version": 7,
      "@class": "Example",
      "in_CoreExample": ["#30:3"],
      "Label": null,
      "in_CSExample": [],
      "in_implements": [],
      "Body": "public class Person{\u000a    protected int age;\u000a    \u000a    public Person(int age){\u000a        this.age = age;\u000a    }\u000a\u000a    public int getAge(){\u000a        return age;\u000a    }\u000a\u000a    public String getAgeMessage(){\u000a        return \"This person is \" + age + \" years old!\";\u000a    }\u000a}\u000a\u000apublic class Student extends Person{\u000a    protected yearOfStudy = 0;\u000a    \u000a    public Student(int age){\u000a        super(age);\u000a    }\u000a\u000a    public Student(int age, int yearOfStudy){\u000a        this(age);\u000a        this.yearOfStudy = yearOfStudy;\u000a    }\u000a\u000a    public int getYearOfStudy(){\u000a        return yearOfStudy;\u000a    }\u000a\u000a    @Override\u000a    public String getAgeMessage(){\u000a        return super() + \" and is in year\" + yearOfStudy +\" of their studies!\";\u000a    }\u000a\u000a}\u000a\u000a//Elsewhere\u000aStudent clint = new Student(17, 1);\u000a//Will output: This person is 17 years old and is in year 1 of their studies!\u000aSystem.out.println(clint.getAgeMessage);\u000a//Will print 17\u000aSystemout.println(clint.getAge);",
      "@fieldTypes": "in_CoreExample=g,in_CSExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:21",
      "@version": 5,
      "@class": "Example",
      "in_CoreExample": ["#30:2"],
      "Explanation": "This is from our Student class. When we do something like:\u000a\u000aSystem.out.println(studentObjThatIsNotNull);\u000a\u000aIt will output for us:\u000a\u000aThe Student's name is (whatever the Student's name actually is)\u000a\u000aNormally we would just get a seemingly random String (technically it is the Object reference). This is far more useful for us.\u000aThe '@Override' is an annotation, it provides the compiler with additional information but it is not required for the program to compile and run.",
      "Label": null,
      "in_implements": [],
      "Body": "@Override\u000apublic String toString() {\u000a    return \"The Student's name is: \" + getName();\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:22",
      "@version": 7,
      "@class": "Example",
      "in_CoreExample": ["#30:14"],
      "out_explain": [],
      "Explanation": "This illustrates the basic use of the for loop. It will output:\u000aValue: 0\u000aValue: 1\u000aValue: 2\u000aValue: 3\u000aValue: 4\u000aValue: 5\u000aValue: 6\u000aValue: 7\u000aValue: 8\u000aValue: 9\u000aThe variable i is incremented by 1 after each time through the loop until the value of i is not below 10 when it exits the loop.",
      "Label": null,
      "in_implements": [],
      "Body": "for (int i =0; i<10; i++){\u000a    System.out.println(\"Value: \"+i):\u000a}",
      "@fieldTypes": "in_CoreExample=g,out_explain=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:23",
      "@version": 7,
      "@class": "Example",
      "in_CoreExample": ["#30:15"],
      "out_explain": [],
      "Explanation": "This will output whatever numbers are at: 100,102,104,106,108,110 in the array numbers incremented by the current value of j. If the value of numbers[102] is 257 then this would output 257 + 1 = 258. i has the value of 100 at the beginning and j has the value 0. After one loop j is incremented by 1 to give it the value 1 and i is incremented by 2 to give it the value 102.",
      "Label": null,
      "in_implements": [],
      "Body": "int MAX_SIZE = 110;\u000aint[] numbers = getNumbers(MAX_SIZE);\u000aint i = 100;\u000afor (int j = 0; i<=MAX_SIZE; i+=2, j++){\u000a\u0009System.out.println(numbers[i]+j);\u000a}",
      "@fieldTypes": "in_CoreExample=g,out_explain=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:25",
      "@version": 6,
      "@class": "Example",
      "in_CoreExample": ["#30:16"],
      "Label": null,
      "in_implements": [],
      "Body": "//This uses a normal for loop because we require to manipulate indexes.\u000afor (int i =0; i< names.length; i++){\u000a//Sets the ith position of one array the name member of the object in the ith position of the other.\u000a       names[i] = modules[i].getName();\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:26",
      "@version": 4,
      "@class": "Example",
      "in_CoreExample": ["#30:18"],
      "Label": null,
      "in_implements": [],
      "Body": "int x = 5;\u000aif (x < 5){\u000a  //do something\u000a}else {\u000a  //do something else\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:27",
      "@version": 7,
      "@class": "Example",
      "out_explain": [],
      "Explanation": "pwd.contain(\"Hello\") will return true, but the not ('!') will negate it and this will overall resolve to fals",
      "Label": null,
      "in_CSExample": ["#29:15"],
      "in_implements": [],
      "Body": "String pwd = \"Hello World\";\u000aif (!(pwd.contains(\"Hello\"))){\u000a  //do something\u000a}",
      "@fieldTypes": "out_explain=g,in_CSExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:28",
      "@version": 7,
      "@class": "Example",
      "in_CoreExample": ["#30:17"],
      "out_explain": [],
      "Explanation": "Brackets are not necessary for single line if-statements but these can cause dangling-if errors if used wrongly.",
      "Label": null,
      "in_implements": [],
      "Body": "if (name == null) throw new InvalidParameterException();",
      "@fieldTypes": "in_CoreExample=g,out_explain=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:29",
      "@version": 7,
      "@class": "Example",
      "in_CoreExample": ["#30:32"],
      "Label": null,
      "in_implements": [],
      "Body": "int x = 5;\u000aif (x < 5){\u000a     //do something \u000a}else if (x == 5){\u000a     //do something else\u000a}",
      "@fieldTypes": "in_CoreExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:30",
      "@version": 6,
      "@class": "Example",
      "Explanation": "Please note that this is an example and not official university requirements. If you are unsure as to the credits you must achieve please ask your adviser or check the university's website (specifically undergraduate senate regulations).",
      "Label": null,
      "in_CSExample": ["#29:13"],
      "in_implements": [],
      "Body": "String message = \"The student requires: \";\u000aswitch (year) {\u000a    case 1:\u000a        System.out.println(message + \"at least a 7.0 in all modules across 120 credits\");\u000a        break; //this stops the follow through, and is required in switch statements\u000a    case 2:\u000a        //notice we split a long line into two lines for readability on small screens\u000a        System.out.println(message + \"at least a 11.0 in on all Honours related courses and a 7.0\" +\u000a                \" in all modules across 120 credits\");\u000a        break;\u000a    //We reverse course here since we want all 3,4 and 5th year to get the same message\u000a    case 5: //the lack of break means it will fall through\u000a    case 4:\u000a    case 3:\u000a        System.out.println(\"Student is on an Honours course and should consult their course handbook\");\u000a        break;\u000a    //it is good practice to have a default statement incase of an invalid input\u000a    default:\u000a        System.out.println(year+\" is not a valid year at St Andrews\");\u000a        break;\u000a}",
      "@fieldTypes": "in_CSExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:31",
      "@version": 8,
      "@class": "Example",
      "out_explain": [],
      "Explanation": "This program begins with the main method (as all Java programs will do).\u000aIt then outputs: 1,2,1,2,1,2,1,2,1,2 because it invoked method1 and the method2.\u000aThis is effectively doing:\u000a  i = 0\u000a    then 0 % 2 = 0 == 0 then\u000a      method 1\u000a  i = 1\u000a    then 1 % 2 = 1 != 0 then\u000a      method 2\u000aWhich is repeated until\u000a  i = 10\u000a    10 not < 10 so end\u000a\u000aIt then outputs: 3 but NOT 4. 3 is not less than 3 thus it will never enter the if statement, but 3 will be printed because method3() is invoked in the if declaration.\u000aOverall we get 1,2,1,2,1,2,1,2,1,2,3.",
      "Label": null,
      "in_CSExample": ["#29:14"],
      "in_implements": [],
      "Body": "public static final int VALUE = 3;\u000a\u000apublic static void method1(){\u000a  System.out.println(\"1\");\u000a}\u000a\u000apublic static void method2(){\u000a  System.out.println(\"2\");\u000a}\u000a\u000apublic static int method3(){\u000a  System.out.println(\"3\");\u000a  return 3;\u000a}\u000a\u000apublic static final main(String[] args){\u000a  for (int i =0; i<10; i++){\u000a  //if even\u000a    if (i % 2 == 0){\u000a      method1();\u000a    }else {\u000a      method2();\u000a    }\u000a  }\u000a  if (method3() < VALUE){\u000a    System.out.println(\"4\");\u000a  }\u000a}",
      "@fieldTypes": "out_explain=g,in_CSExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:32",
      "@version": 5,
      "@class": "Example",
      "Explanation": "Note: Having an Array that is null means that we do not have an array at all, this is different from having an array with only null values in it (demonstrated on the next line). There we have an array of Persons who all are null.",
      "Label": null,
      "in_CSExample": ["#29:12"],
      "in_implements": [],
      "Body": "String[] array = null;\u000aPerson[] array2 = {null, null, null};\u000aObject obj = null;\u000aString = null; //Different from String = \"\";",
      "@fieldTypes": "in_CSExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:33",
      "@version": 10,
      "@class": "Example",
      "out_explain": [],
      "Explanation": "In this example the double will be truncated to make c = 7.\u000aThis is called an unsafe cast because when we do this we lose data.\u000a<p>\u000aThe latter part is an example of an implicit cast, where-as the first part is an  explicit cast.",
      "Label": null,
      "in_CSExample": ["#29:0"],
      "in_implements": [],
      "Body": "int a = 5;\u000adouble b = 7.3;\u000aint c = (int)b;\u000a//\u000aPerson p = new Person();\u000aAnimal a = p;",
      "@fieldTypes": "out_explain=g,in_CSExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:34",
      "@version": 8,
      "@class": "Example",
      "in_CoreExample": ["#30:12"],
      "out_explain": [],
      "Explanation": "This is called a staggered array, because of each index of the 'grid' array is an array itself then each index in that array can hold a pointer to an array of different sizes",
      "Label": null,
      "in_implements": [],
      "Body": "int[][] grid = new int[3][]; //creates a 2-d array of grids which is 3 long\u000agrid[0] = new int[3];\u000agrid[1] = new int[4];\u000agrid[2] = new int[2];",
      "@fieldTypes": "in_CoreExample=g,out_explain=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:35",
      "@version": 9,
      "@class": "Example",
      "out_explain": [],
      "Explanation": "This example would invoke the <code>String toString()</code> method in Person class, despite being of type Object and not of type Person. The compiler 'remembers' the type that the reference.\u000aThis would output \"This person's name is: name\", and not what Object.toString() would print out.\u000aDespite this there is no way to get the original type back and we can only invoke methods that exist in the type of the variable (in this case Object), this means we are not allowed to invoke <code>o.getAge()</code>.",
      "Label": null,
      "in_CSExample": ["#29:2"],
      "in_implements": [],
      "Body": "Person p = new Person(\"name\",42);\u000aObject o = p;\u000aSystem.out.println(o);",
      "@fieldTypes": "out_explain=g,in_CSExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:36",
      "@version": 8,
      "@class": "Example",
      "in_explain": [],
      "out_explain": [],
      "Explanation": "This will still invoke the <code>int getAge()</code> method in Student and not the one in Person despite o being a Person object.",
      "Label": null,
      "in_CSExample": ["#29:1"],
      "Body": "Student s = new Student(\"name\", 42);\u000aPerson o = s;\u000aSystem.out.println(o.getAge());",
      "@fieldTypes": "in_explain=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:37",
      "@version": 6,
      "@class": "Example",
      "Explanation": "This will return a Person object, and since all reference types are implicitly subclasses of object then Person objects can be stored in an Object variable. We can only treat this variable as if it was an Object which means we can only invoke methods that exist in Object because we can guarantee that those exist.",
      "Label": null,
      "in_CSExample": ["#29:3"],
      "in_implements": [],
      "Body": "Object o = getNewPerson();",
      "@fieldTypes": "in_CSExample=g,in_implements=g"
    },
    {
      "@type": "d",
      "@rid": "#17:38",
      "@version": 8,
      "@class": "Example",
      "Explanation": "In this example s, p and o all refer to the same Student object.\u000aRecall from Type Coercion that it is only safe to invoke methods that exist in the type it is declared as, ie only invoke Person methods on p despite us knowing it is a Student.",
      "Label": null,
      "in_CSExample": ["#29:4"],
      "in_implements": [],
      "out_appear": [],
      "Body": "Student s = new Student();\u000aPerson p = s;\u000aObject o = p;",
      "@fieldTypes": "in_CSExample=g,in_implements=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#17:39",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:1"],
      "out_explain": [],
      "Explanation": "We are allowed, and is advised to, show what parameter is what when we are invoking a function.",
      "Label": null,
      "Body": "def f(x,y):\u000a\u0009return x+y\u000anumbers=[1,2]\u000aprint f(x=numbers[0],y=numbers[1])",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:40",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:3"],
      "out_explain": [],
      "Explanation": "Note that appending a list in an function will update our original list.",
      "Label": null,
      "Body": "def add_to_list(list=None,name):\u000a\u0009if list is None:\u000a\u0009\u0009list = []\u000a\u0009list.append(name)\u000aadd_to_list(name='J. Cole')",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:41",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:2"],
      "out_explain": [],
      "Explanation": "Notice that the variables being passed in can be called anything you like, but within the function they are called the name given to them in the function signature.",
      "Label": null,
      "Body": "def f(x,y):\u000a\u0009return x+y\u000aa = 3\u000ab = 72\u000aprint f(a,b)",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:42",
      "@version": 6,
      "@class": "Example",
      "in_MTExample": ["#31:4"],
      "out_explain": [],
      "Explanation": "This is a bad comment. Any programmer can obviously see that x is being set to 0, but what is x and why is it 0?\u000aThe latter is significantly better.",
      "Label": null,
      "Body": "x = 0 #set x to 0\u000ay = 0 #Sets the y coordinate to a default value of 0 to ensure a consistent starting location",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:43",
      "@version": 3,
      "@class": "Example",
      "in_MTExample": ["#31:5"],
      "Explanation": "It is good practice to explain what your method does, its inputs and its return value in the line below its declaration.",
      "Label": null,
      "Body": "def f(x,y):\u000a\u0009\"\"\"Takes two values (x,y) and returns them added them together\"\"\"\u000a\u0009return x+y",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:44",
      "@version": 9,
      "@class": "Example",
      "in_MTExample": [],
      "in_DesignExample": [],
      "out_explain": [],
      "Explanation": "Whilst for this small example it takes more lines of code to do the more \"correct\" version if we had 1000 names we would save a very significant amount of time and prevent many bugs by doing it. Additionally if we wanted to change it so that it just output a number and name with no other text we only need change 1 line of code as opposed to 3.",
      "Label": null,
      "in_CSExample": ["#29:69"],
      "Body": "names = ['Bill','Alan','Grace']\u000a\u000a#One option\u000aprint \"Person 1 is called:\",names[0]\u000aprint \"Person 2 is called:\",names[1]\u000aprint \"Person 3 is called:\",names[2]\u000a\u000a#A better option\u000adef print_name(number, name):\u000a\u0009print \"Person %d is called: %s\" ,%(number,name)\u000a\u000afor number, name in enumerate(names):\u000a\u0009print_name(number,name)",
      "@fieldTypes": "in_MTExample=g,in_DesignExample=g,out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:45",
      "@version": 4,
      "@class": "Example",
      "in_MTExample": ["#31:7"],
      "Label": null,
      "Body": "if pokemon is Pikachu:\u000a\u0009print \"Gotta catch 'em all!\"\u000aelif pokemon is Slowpoke:\u000a\u0009print \"Have you heard about this cool game Pokemon Go?\"",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:47",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:8"],
      "out_explain": [],
      "Explanation": "This will now not crash, and will output \"Hello World\" to screen. This is because we tell Python to ignore the error, which is typically a bad idea.",
      "Label": null,
      "Body": "try:\u000a    message = \"Hello World\"\u000a    message/3\u000aexcept TypeError as e:\u000a    pass\u000aprint message",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:48",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:10"],
      "Label": null,
      "Body": "f1 = open('file.txt',r) #This will READ a file\u000af2 = open('file2.txt',w) #This will WRITE to a file\u000a\u000aprint f1.read() #Will output all of file1.txt to screen\u000af2.write(\"Hello World!\") #Writes Hello World to file2.txt\u000a\u000a#It is good practice to close files when you are done with them\u000af1.close()\u000af2.close()",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:49",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:11"],
      "out_explain": [],
      "Explanation": "There is no need to close a file when we are using a context manager. This is generally only for more advanced users as novice users may  run into some unexpected scoping issues.",
      "Label": null,
      "Body": "with open('file1.txt\",r) as f:\u000a\u0009print f.read()",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:51",
      "@version": 6,
      "@class": "Example",
      "in_MTExample": ["#31:12"],
      "out_explain": [],
      "Explanation": "This will print all the numbers between 0 and 10 taking a step of 2 each time. Our output to screen should be \"0, 2, 4, 6, 8\" note that it includes 0 excludes 10. This can be read as 'for i in {0, 1, 2, ... 10} st i % 2 = 0 and i < 10 then print i' for the mathematically minded.",
      "Label": null,
      "Body": "for i in range(0, 10, 2):\u000a\u0009print i",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:52",
      "@version": 6,
      "@class": "Example",
      "in_MTExample": ["#31:13"],
      "out_explain": [],
      "Explanation": "This will output 1,2,3 on separate lines. This should be read as \"for each element in our list execute the indented code\"",
      "Label": null,
      "Body": "list = [1,2,3]\u000a\u000afor e in list:\u000a\u0009print e\u000a#Note that this unintended code it outside the for loop\u000aprint list #this only happens once",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:53",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:14"],
      "out_explain": [],
      "Explanation": "This will output 0 red, 1 blue, 2 green. This is technically returning a tuple with the index and the element at that index.",
      "Label": null,
      "Body": "colours = ['red','blue','green']\u000a\u000afor i,c in enumerate(colours):\u000a\u0009print i,c",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:54",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:15"],
      "Label": null,
      "Body": "def f(x):\u000a\u0009\"\"\"Returns the result of f(x) = x^2 + 3\"\"\"\u000a\u0009return x**2 + 3",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:55",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:16"],
      "out_explain": [],
      "Explanation": "This will output to screen \"The weather today is: Sun!\" as (un?)expected.",
      "Label": null,
      "Body": "def print_weather(weather):\u000a\u0009print \"The weather today is:\",weather #probably rain\u000a\u000aprint_weather(\"Sun!\")",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:56",
      "@version": 3,
      "@class": "Example",
      "in_MTExample": ["#31:17"],
      "Label": null,
      "Body": "if x !=6:\u000a\u0009#code\u000a\u000aif x == 6 and y != 3:\u000a\u0009#code\u000aelse: #if x is not 6 or y is 3\u000a\u0009#other code",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:57",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:20"],
      "out_explain": [],
      "Explanation": "You can now use all the method in numpy.\u000aThe second one would import everything from numpy also (the * is a wildcard) but we can choose to only import specific methods.",
      "Label": null,
      "Body": "import numpy\u000afrom numpy import *",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:58",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:21"],
      "out_explain": [],
      "Explanation": "We can invoke methods from numpy using the 'np' as an 'object' and using the dot operator on it.\u000aThis is very good practice as it makes it explicit where the methods come from.",
      "Label": null,
      "Body": "import numpy as np\u000ainput_array = np.array([1,2,3])",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:59",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:22"],
      "out_explain": [],
      "Explanation": "This is called list slicing. We are asking for it to return the element at index 1 and 2, and not the full list.",
      "Label": null,
      "Body": "list_of_numbers = [1,2,3]\u000alist_of_numbers.append(4) #adds 4 to the end\u000aprint list_of_numbers[1:2] #Will output 2,3",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:60",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:23"],
      "Label": null,
      "Body": "if x != 5 and (y != 3 or y == x):\u000a\u0009#code",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:61",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:24"],
      "Label": null,
      "Body": "def f(names):\u000a\u0009if names is None:\u000a\u0009\u0009names = []\u000a\u0009#code",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:62",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:25"],
      "Label": null,
      "Body": "a = 3\u000awhile a:\u000a\u0009#will loop while a is non zero\u000a\u0009a -= 1",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:63",
      "@version": 3,
      "@class": "Example",
      "in_MTExample": ["#31:26"],
      "Explanation": "*Generally* do not do this. Often it is bad practice to have infinite loops, they are usually not needed. Reconsider why you need this, perhaps your program can be designed or structured differently.",
      "Label": null,
      "Body": "while True:\u000a\u0009#will loop forever",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:64",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:27"],
      "out_explain": [],
      "Explanation": "Notice that we repeat 1.8 and 32 twice. This is not only hard to read (why are these values here?) but hard to maintain: what if these values changed? (In this they wont, but as you'll see in the next examples they may).\u000aA better way is done in the second part.",
      "Label": null,
      "Body": "temp_degC = 30\u000atemp_degF = 1.8 * temp_degC + 32\u000a\u000adef convert_to_degC(temp):\u000a\u0009return (temp - 32)/1.8\u000a\u000a#Better Solution\u000adeg_factor = 1.8\u000adeg_const = 32\u000atemp_degC = 30\u000atemp_degF = deg_factor* temp_degC + deg_const\u000a\u000adef convert_to_degC(temp):\u000a\u0009return (temp - deg_const)/deg_factor",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:65",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:28"],
      "out_explain": [],
      "Explanation": "Now when the GBP/USD rate changes we have to update two places in our program. This can cause errors if we update one and forget to update the other.",
      "Label": null,
      "Body": "def convert_to_USD(capital):\u000a\u0009return capital*1.316 #Capital * current rate\u000a\u0009\u000adef convert_to_gbp(capital):\u000a\u0009return capital/1.316 #Capital / current rate\u000a\u0009\u000a#Better methods\u000aconv_factor = 1.316 #GBP to USD conversion factor at time of typing - if we were so included we could get this price live. \u000a\u000adef convert_to_USD(capital):\u000a\u0009return capital*conv_factor\u000a\u0009\u000adef convert_to_gbp(capital):\u000a\u0009return capital/conv_factor",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:66",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:30"],
      "out_explain": [],
      "Explanation": "This will solve the linear equations: 5x + 12 = 3 and 2x + 1 =7.",
      "Label": null,
      "Body": "import numpy as np\u000aprint np.array([1,1,2,3])\u000aprint np.arange(7) #Creates an array 0,1,2,3,4,5,6\u000a\u000aimport numpy as np\u000aa = np.array([5,12],[2,1])\u000ab = np.array([3,7])\u000aprint np.solve(a,b)",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:67",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:31"],
      "Label": null,
      "Body": "group = set_group() #This makes group have a group object\u000agroup_degree = group.degree() #This invokes the degree() method on the group object and sets the value it returns to this variable",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:68",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:32"],
      "out_explain": [],
      "Explanation": "This will calculate n!. This is also an example of the \"ternary\" operator in Python.",
      "Label": null,
      "Body": "def factorial(n):\u000a\u0009return 1 if n <= 1 else n*factorial(n-1)",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:69",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:34"],
      "out_explain": [],
      "Explanation": "This will do f(5) which will return 15, then do g(15) and finally print 18 to the screen.",
      "Label": null,
      "Body": "def f(x):\u000a\u0009return 3*x\u000adef g(x):\u000a\u0009return x+3\u000aprint g(f(5))",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:70",
      "@version": 7,
      "@class": "Example",
      "in_MTExample": ["#31:35"],
      "out_explain": [],
      "Explanation": "In this example if the name entered is not Duncan then it will return the value 0, but if the name is Duncan it will skip the if statement (and the return therein) and go straight to the return 100, notice that we do not required the else statement but you could use one if you preferred.",
      "Label": null,
      "Body": "def get_score(name):\u000a\u0009if name is not 'Duncan':\u000a\u0009\u0009return 0\u000a\u0009return 100",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:71",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:36"],
      "out_explain": [],
      "Explanation": "This will return two values, the positive and negative square root (and hopefully will only get positive inputs).",
      "Label": null,
      "Body": "def bad_sqrt_finder(x):\u000a\u0009return sqrt(x), -sqrt(x)",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:72",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:37"],
      "out_explain": [],
      "Explanation": "This can represent a person called \"John von Nuemann\" born in 1903.",
      "Label": null,
      "Body": "person = (\"John von Nuemann\", 1903)\u000aname, year_of_birth = person #unpacking",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:74",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:39"],
      "Label": null,
      "Body": "message = raw_input(\"Please enter a message: \")\u000aprint message",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:75",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:40"],
      "Label": null,
      "Body": "message = \"Hello World\"",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:76",
      "@version": 6,
      "@class": "Example",
      "in_MTExample": ["#31:41"],
      "out_explain": [],
      "Explanation": "Variables in Python can have the 'type' of data stored in them changed as the program runs (this can be a common source of errors).",
      "Label": null,
      "Body": "messsage = \"Hello World\"\u000a#other code in your program\u000amessage = 5",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:77",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:42"],
      "out_explain": [],
      "Explanation": "Python allows you to declare (and initialise) many variables at the same time and to further that you can modify multiple variables at the same time using the tuple unpacking.",
      "Label": null,
      "Body": "x,y = 5,3\u000ay,x = x,y #Now y = 5 and x = 3",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:78",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:43"],
      "out_explain": [],
      "Explanation": "This will work, and output Hello World, because global_variable is in scope.",
      "Label": null,
      "Body": "global_variable = \"Hello World\"\u000a\u000adef method():\u000a  print global_variable",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:79",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:45"],
      "out_explain": [],
      "Explanation": "This is actually code from Python's standard library to generate the gcd of two integers a and b.\u000aIt will repeat until b is zero (and thus give you the gcd).",
      "Label": null,
      "Body": "while b:\u000a\u0009a,b = b, a%b\u000areturn a",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:80",
      "@version": 6,
      "@class": "Example",
      "in_MTExample": ["#31:46"],
      "out_explain": [],
      "Explanation": "This is logically equivalent to a for loop. Whilst a is less than 100, it will print a and increment a by 1 until it reaches 100.\u000aNotice that for loops and while loops can be used interchangeably but generally one is easier for a situation than the other.",
      "Label": null,
      "Body": "while a < 100:\u000a\u0009print a\u000a\u0009a = a + 1",
      "@fieldTypes": "in_MTExample=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#17:81",
      "@version": 2,
      "@class": "Example",
      "in_CoreExample": ["#30:25"],
      "Label": null,
      "Body": "x = 5 #sets x to 5",
      "@fieldTypes": "in_CoreExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:82",
      "@version": 2,
      "@class": "Example",
      "in_CoreExample": ["#30:26"],
      "Label": null,
      "Body": "i #This currently has 'None' has a value\u000aj = 5 #This currently has 5 as a value",
      "@fieldTypes": "in_CoreExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:83",
      "@version": 5,
      "@class": "Example",
      "Explanation": "A Set is a member of the Java Collections Framework.",
      "Label": null,
      "in_CSExample": ["#29:20"],
      "Body": "Set&lt;String&gt; words;\u000awords.add(\"Hello\");\u000awords.add(\"Apple\");",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:84",
      "@version": 8,
      "@class": "Example",
      "out_explain": [],
      "Explanation": "This should print: DarudeSandstorm. (If wrapped in the correct boilerplate).",
      "Label": null,
      "in_CSExample": ["#29:21"],
      "Body": "ArrayList&lt;String&gt; words = new ArrayList&lt;String&gt;(2); //Initial size - is not necessary but can increase performance. \u000awords.add(\"Daru\"); //1\u000awords.add(\"de\"); //2 \u000awords.add(\"Sandstorm\"); //Can now add a 3rd item\u000awords.sort(Comparator.naturalOrder());\u000afor (String word : words){\u000a\u0009System.out.print(word);\u000a}",
      "@fieldTypes": "out_explain=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:86",
      "@version": 3,
      "@class": "Example",
      "Explanation": "Here we have an example two dimensional array of length 2 (it contains two arrays). Note that each element in exampleArray must be an array itself.\u000aWe can then access the elements from within the second array by adding more brackets, thus exampleArray[0][0] will give us 1; exampleArray[0][1] will give us 2 etc.",
      "Label": null,
      "in_CSExample": ["#29:23"],
      "Body": "int[][] exampleArray =  new int[3][4];",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:87",
      "@version": 10,
      "@class": "Example",
      "Explanation": "This demonstrates how to declare and initialise an Object.",
      "Label": "",
      "in_CSExample": ["#29:24"],
      "Body": "Person p = new Person(\"Saul\");",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:88",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:25"],
      "Body": "String msg = \"Hello\";\u000aswitch (msg){\u000a\u0009case \"Hello\": System.out.println(\"Hello to you too!\"); break;\u000a\u0009case \"Goodbye\": System.out.println(\"It was nice to see you!\"); break;\u000a\u0009default: System.out.println(\"Sorry I do not recognise that!\"); break;\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:89",
      "@version": 2,
      "@class": "Example",
      "Explanation": "This allow us to declare and initialise multiple variables of one type on the same line.",
      "Label": null,
      "in_CSExample": ["#29:26"],
      "Body": "int defaultXCoordinate = 0, defaultYCoordinate = 0;",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:90",
      "@version": 9,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:32"],
      "Body": "@Entity\u000apublic class TelevisionShow {\u000a\u0009\u000a        @id\u000a\u0009private String id;\u000a\u0009private String name;\u000a\u0009private int year;\u000a\u0009\u000a\u0009public TelevisionShow(){}\u000a\u0009public TelevisionShow(String name, int year){\u000a\u0009\u0009this.id = name+year;\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009}\u000a\u0009\u000a\u0009/* Getters & Setters are omitted for brevity */\u000a}\u000a...\u000a//Somewhere in another class managing the JPA\u000aEntityManagerFactory factory = Persistence.createEntityManagerFactory(optional_properties);\u000aEntityManager manager = factory.createEntityManager();\u000a\u000a//Start our transaction using our EntityManager\u000aTransaction transaction = manager.getTransaction();\u000atransaction.begin();\u000amanager.persist(new TelevisionShow(\"Breaking Bad\", 2008);\u000atransaction.commit();  //don't lose your data\u000amanager.close();  //don't forget to close!\u000a\u000aTelevisionShow bb = manager.find(TelevisionShow.class, Breaking Bad2008);  //class, id\u000aSystem.out.println(bb.name);  //Prints \"Breaking Bad\"",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:91",
      "@version": 3,
      "@class": "Example",
      "Explanation": "There are many ways to store and access the necessary inputs for the DriverManager, the worst way is to hardcode them into your program. \u000aAn easy way would be to pass the username and password into your program as arguments at command line. \u000aNote that DriverManager will return the best type of Driver for us, which will vary from database to database, further note that for brevity the necessary try block was omitted. \u000aOnce we are connected to the DB we are able to issue SQL queries and get results.",
      "Label": null,
      "in_CSExample": ["#29:33"],
      "Body": "Connection conn; //You require a Connection object to hold your connection to the DB\u000aconn = DriverManager.getConnection(database, username, password);\u000astatement = conn.getStatement();\u000astatement.executeUpdate(\"CREATE TABLE people\");",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:92",
      "@version": 2,
      "@class": "Example",
      "Explanation": "Not only is it safer but it is also far more efficient. We can reuse our query many times for different inputs.",
      "Label": null,
      "in_CSExample": ["#29:34"],
      "Body": "PreparedStatement query = con.PreparedStatement(\"SELECT FROM * WHERE name like ?\");\u000aquery.setString(1, \"Bobby Tables\"); //Note that these count from 1\u000aquery.execute();",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:93",
      "@version": 4,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:35"],
      "Body": "String fileName = \"obvious_pop_culture_reference/jokes.txt\";\u000a    try {\u000a        PrintWriter writer = new PrintWriter(fileName);\u000a        writer.println(\"Don't forget your towel!\");\u000a    }catch(FileNotFoundException e){\u000a        System.out.println(\"File does not exist!\");\u000a    }\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:94",
      "@version": 6,
      "@class": "Example",
      "in_CSError": ["#36:16"],
      "Explanation": "<b>DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.</b><br>\u000a<b>DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.</b><br>\u000a<b>DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.</b><br>\u000a<b>DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.</b><br>\u000a<b>DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.</b><br>\u000a<b>DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.</b><br>\u000a<b>DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.</b><br>\u000a<b>DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.</b><br>",
      "Label": null,
      "in_CSExample": [],
      "Body": "String fileName = \"usefulJSONData.json\";\u000aFileReader reader = new FileReader(fileName);\u000aBufferedReader file = new BufferedReader(reader);",
      "@fieldTypes": "in_CSError=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:95",
      "@version": 5,
      "@class": "Example",
      "Explanation": "This will print out the alphabet from z to a.",
      "Label": null,
      "in_CSExample": ["#29:37"],
      "Body": "StringBuilder sb = new StringBuilder((int)('z'-'a')); //There are many constructors to choose from\u000afor (char i='a'; i<='z'; i++){\u000a\u0009sb.append(i);\u000a}\u000aSystem.out.println((sb.reverse()).toString());",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:96",
      "@version": 7,
      "@class": "Example",
      "Explanation": "We treat each element in our data structure as 'name' and the loop will update it at the end of each time through the block. This means we do not have to use any indexes.",
      "Label": null,
      "in_CSExample": ["#29:87"],
      "in_": [],
      "Body": "for(String name: names){\u000a\u0009System.out.println(name); \u000a}",
      "@fieldTypes": "in_CSExample=g,in_=g"
    },
    {
      "@type": "d",
      "@rid": "#17:97",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:39"],
      "Body": "try {\u000a\u0009//code where an exception may occur\u000acatch (Exception e){\u000a\u0009e.printStackTrace();\u000a}finally{\u000a\u0009System.out.println(\"Program has finished executing!\");\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:98",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:40"],
      "Body": "public class InvalidInputException extends Exception{}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:99",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:41"],
      "Body": "public void accessSecretMethod(String username) throws InvalidInputException{\u000a\u0009(!(username.equals(\"Jake Peralta\"))?throw new InvalidInputException: doSecretMethod();\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:100",
      "@version": 2,
      "@class": "Example",
      "Explanation": "",
      "Label": null,
      "in_CSExample": ["#29:42"],
      "Body": "public static void main(String[] args){\u000a\u0009try{\u000a\u0009\u0009accessSecretMethod(\"Norman Scully\");\u000a\u0009}catch(InValidInputException e){\u000a\u0009\u0009System.out.println(\"Invalid username!\");\u000a\u0009}\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:101",
      "@version": 3,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:44"],
      "Body": "//Using normal if-else\u000aif (var == 3){\u000a\u0009doOneMethod();\u000aelse {\u000a\u0009doOtherMethod();\u000a}\u000a\u000a//Using Ternary\u000a(var == 3)?doOneMethod():doOtherMethod();",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:102",
      "@version": 3,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:45"],
      "Body": "public int sum(int... numbers){\u000a    int sum = 0;\u000a    for (int n: numbers){\u000a        sum += n;\u000a    }\u000a    return sum;\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:103",
      "@version": 3,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:46"],
      "Body": "public static void(String... main){\u000a        MyClass name = new MyClass(); //Terrible name for a class\u000a\u0009System.out.println(name.sum(1,5,6,7,3,5));\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:104",
      "@version": 4,
      "@class": "Example",
      "Explanation": "If x.compareTo(y) == 0 then generally x.equals(y) == true. This is not required but is strongly suggested.",
      "Label": null,
      "in_CSExample": ["#29:47"],
      "Body": "public class Car implements Comparable&lt;Car&gt;{\u000a\u0009publc int compareTo(Car obj){\u000a\u0009\u0009ourCarMaxSpeed = maxSpeed;\u000a\u0009\u0009theirCarMaxSpeed = obj.getMaxSpeed();\u000a\u0009\u0009return (ourCarMaxSpeed.equals(theirCarMaxSpeed))?0: ourCarMaxSpeed-theirCarMaxSpeed;\u000a\u0009}\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:105",
      "@version": 6,
      "@class": "Example",
      "Explanation": "Notice we can use K in our method declarations too, notice we can have multiple generic parameters separated by a comma.",
      "Label": null,
      "in_CSExample": ["#29:48"],
      "Body": "public abstract class AnAwesomeClass&lt;K, V&gt;{\u000a\u0009\u0009private K anExampleVariable;\u000a\u0009\u0009private V anotherExampleVariable;\u000a\u0009\u0009\u000a\u0009\u0009public abstract V anExampleMethod(K anExampleInput);\u000a\u0009}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:106",
      "@version": 3,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:49"],
      "Body": "List&lt;String&gt;myList;\u000amyList.add(\"Hello\");\u000amyList.add(\"World\");",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:107",
      "@version": 5,
      "@class": "Example",
      "Explanation": "",
      "Label": null,
      "in_CSExample": ["#29:51"],
      "Body": "public class SpecialList&lt;T extends Person&gt;{\u000a\u0009private T first;\u000a\u0009public T getFirst(){\u000a\u0009\u0009return first;\u000a\u0009}\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:108",
      "@version": 4,
      "@class": "Example",
      "Explanation": "We use ? when we do not know, nor care what the type in the generics are. Note that we are not allowed to update or add to the list when we are using the ? notation since we do not know its type and there is no way to find it out.",
      "Label": null,
      "in_CSExample": ["#29:52"],
      "Body": "void printObj(List&lt;? extends Object&gt; list){\u000a\u0009for (Object l: list){\u000a\u0009\u0009System.out.println(l);\u000a\u0009}\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:109",
      "@version": 2,
      "@class": "Example",
      "Explanation": "MapReduce has a large amount of overhead in its infrastructure so it is only advisable to use it for extremely large and complex data sets.\u000aFurther if the problem is more complex it is suggested, and possible, to use multiple Maps and multiple Reduces.",
      "Label": null,
      "in_CSExample": ["#29:55"],
      "Body": "Count the number of student above 1.5m.\u000a\u000a1. Map - filter all the students below 1.5m.\u000a2. Reduce - count the number of students left.",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:110",
      "@version": 7,
      "@class": "Example",
      "Explanation": "All Enumerations should be in capital letters because they are implicitly final.",
      "Label": null,
      "in_CSExample": ["#29:56"],
      "Body": "public enum Coffee{\u000a    YIRGACHEFFEE, JAVA, COLOMBIA\u000a}\u000a\u000a//Elsewhere\u000apublic class CoffeeShop extends Shop{\u000a    public Coffee origin = Coffee.YIRGACHEFFEE;\u000a\u000a    public void makeCoffee(Coffee type){\u000a        if (type == origin){\u000a            produceCoffee();\u000a        }\u000a    }\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:111",
      "@version": 3,
      "@class": "Example",
      "Explanation": "Note: Variables in functions are parameters and do not go in <b>\" \"</b>",
      "Label": null,
      "in_CSExample": ["#29:57"],
      "Body": "String  message = \"How much refuse would a refuse dump need to have to refuse refuse?\"\u000aSystem.out.println(message);",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:112",
      "@version": 4,
      "@class": "Example",
      "Explanation": "Notice here that we have two types of variables: a Person object (a reference type) and an int (a primitive type).\u000aWe can then give them a value later on, but note that in the interim they do have a value (Null for the Person and 0 for the int) which was assigned by the compiler.\u000aFinally we declare and initialise another Person and a float on one line.",
      "Label": null,
      "in_CSExample": ["#29:58"],
      "Body": "//Declare our variables. This determines their scope.\u000aPerson p;\u000aint age;\u000a//Initialise our variable to a value that we want them to have\u000aage = 21;\u000ap = new Person(\"Steve\", age);\u000a//One line trick\u000aPerson joel = new Person(\"Joel\",  43);\u000afloat sol = 42.0;",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:113",
      "@version": 4,
      "@class": "Example",
      "Explanation": "We can update what Object is held by the variable but two objects exist. Both b and c hold a reference to the <b>Circle(5)</b> object, so updating using one or the other does the same thing. \u000aThe value of areaC and areaB are equal because they are both accessing the same object.",
      "Label": null,
      "in_CSExample": ["#29:59"],
      "Body": "Circle c = new Circle(3);\u000aCircle b = new Circle(5);\u000ac = b;\u000afloat areaC = c.area();\u000afloat areaB = b.area();",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:115",
      "@version": 4,
      "@class": "Example",
      "in_DesignExample": [],
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:65"],
      "Body": "Design a program to read integers from a file and print double of their value.\u000aWe will need the following methods:\u000a\u00091. Ensure the file exists and no errors opening\u000a\u00092. Read the values in\u000a\u00093. Ensure the values are integers\u000a\u00094. Double the integers\u000a\u00095. Print out the new values",
      "@fieldTypes": "in_DesignExample=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:116",
      "@version": 4,
      "@class": "Example",
      "in_DesignExample": [],
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:66"],
      "Body": "Java: public int getAge(person p);\u000aPython: getAge(p)",
      "@fieldTypes": "in_DesignExample=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:117",
      "@version": 4,
      "@class": "Example",
      "in_DesignExample": [],
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:67"],
      "Body": "Psuedocode:\u000aget list of VIPs\u000asearch list for name\u000aif name is on list of vips:\u000a\u0009let person in\u000aelse:\u000a\u0009do not let them in\u000a\u000a//Java code\u000apublic boolean isVIP(person p){\u000a\u0009String name = person.getName();\u000a\u0009List<String> list = getVIPList();\u000a\u0009return list.contains(name)?true:false;\u0009\u000a}",
      "@fieldTypes": "in_DesignExample=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:118",
      "@version": 5,
      "@class": "Example",
      "in_DesignExample": [],
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:68"],
      "Body": "1. Project specification\u000a2. Rough plan\u000a3. UML diagram\u000a4. Actual code",
      "@fieldTypes": "in_DesignExample=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:119",
      "@version": 4,
      "@class": "Example",
      "in_DesignExample": [],
      "Explanation": "This ensures we can safely say we have a good coverage with a low chance of unpredictable behaviour. \u000aThese tests might highlight some unexpected behaviour, if doublesValue returned 2*x and x was a string, in Python we may get a different value than what we originally expected and would have to update our program.",
      "Label": null,
      "in_CSExample": ["#29:61"],
      "Body": "For a method with the method signature doublesValue(x) we may wish to unit test it with the following inputs:\u000a\u0009x = 0\u000a\u0009x = 1\u000a\u0009x = -1\u000a\u0009x = \"Hello World\"\u000a\u0009x = 1.0\u000a\u0009x = null (or similar)",
      "@fieldTypes": "in_DesignExample=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:121",
      "@version": 4,
      "@class": "Example",
      "in_DesignExample": [],
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:63"],
      "Body": "<img class=\"example-img\" src=\"http://i.imgur.com/Us0K5eO.png\"></img>",
      "@fieldTypes": "in_DesignExample=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:122",
      "@version": 4,
      "@class": "Example",
      "in_DesignExample": [],
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:62"],
      "Body": "+ name : String",
      "@fieldTypes": "in_DesignExample=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:124",
      "@version": 4,
      "@class": "Example",
      "in_DesignExample": [],
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:64"],
      "Body": "+ getAge(): int\u000a# setName(name: String): void",
      "@fieldTypes": "in_DesignExample=g,in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:125",
      "@version": 3,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:71"],
      "Body": "public int setAge(int age){\u000a\u0009this.age = age;\u000a}\u000a\u000apublic int setAge(String age){\u000a\u0009this.age = parseStringtoInt(age);\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:126",
      "@version": 3,
      "@class": "Example",
      "Explanation": "This means we can change 1 line and can update all the places where we invoke our function.\u000aFor example if we want to change our program to work for planes we need only change the getVehicle function.\u000aNote: This example assumes we have interfaces with valid and workable methods.",
      "Label": null,
      "in_CSExample": ["#29:72"],
      "Body": "public abstract class VehicleFactoryMaker implements MoveableInterface, DestroyableInterface{\u000a\u0009public static Vehicle getVehicle(){\u000a\u0009\u0009return new Car();\u000a\u0009}\u000a}\u000a\u000apublic class Transporter{\u000a\u0009Vehicle v = VehicleFactoryMaker.getNewVehicle();\u000a\u0009\u000a\u0009public void moveVehicle(){\u000a\u0009\u0009v.move();\u000a\u0009}\u000a}\u000a\u000apublic class Destroyer{\u000a\u0009Vehicle v = VehicleFactoryMaker.getNewVehicle();\u000a\u0009\u000a\u0009public void destroyVehicle(){\u000a\u0009\u0009v.destroy();\u000a\u0009}\u000a}\u000a\u000apublic class Creator{\u000a\u0009Vehicle v;\u000a\u0009public Creator(){\u000a\u0009\u0009v = VehicleFactoryMaker.getVehicle();\u000a\u0009}\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:127",
      "@version": 2,
      "@class": "Example",
      "Explanation": "We can use method overloading with constructors too.",
      "Label": null,
      "in_CSExample": ["#29:73"],
      "Body": "public class Person{\u000a\u0009protected String name;\u000a\u0009protected int age;\u000a\u0009\u000a\u0009public Person(){}\u000a\u0009public Person(String name){\u000a\u0009\u0009this.name = name;\u000a\u0009}\u000a\u0009public Person(String name, int age){\u000a\u0009\u0009this(name);\u000a\u0009\u0009this.age = age;\u000a\u0009}\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:128",
      "@version": 9,
      "@class": "Example",
      "Explanation": "Using the double brace notation we can declare and initialise a reference type on one line. This is creating an anonymous class inside our class.  \u000aJava is usually able to infer the type of ArrayList we want from the type of the List, but we cannot use it when using inner classes. This is an advanced trick for initialising data structures in line.",
      "Label": null,
      "in_CSExample": ["#29:74"],
      "Body": "List&lt;String&gt; moviesLeoShouldHaveWonAnOscarFor = new ArrayList&lt;String&gt;(){{\u000a\u0009\u0009\u0009\u0009\u0009add(\"Catch me if you can\");\u000a\u0009\u0009\u0009\u0009\u0009add(\"Inception\");\u000a\u0009\u0009\u0009\u0009\u0009add(\"The Wolf of Wall Street\");\u000a\u0009\u0009\u0009\u0009\u0009}};",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:129",
      "@version": 5,
      "@class": "Example",
      "Explanation": "This allows us to efficiently test to see if the same String occurs multiple times within a specific file.",
      "Label": null,
      "in_CSExample": ["#29:75"],
      "Body": "import java.util.*;\u000aimport java.io.*;\u000a\u000apublic class test{\u000a\u0009public static final String fileName = \"words.txt\";\u000a\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009//Open our file\u000a\u0009\u0009BufferedReader reader = null;\u000a\u0009\u0009try{\u000a\u0009\u0009\u0009reader = new BufferedReader(new FileReader(fileName));\u000a\u0009\u0009\u0009assert(reader != null);\u000a\u0009\u0009\u0009System.out.println((isDuplicates(reader))?\"Duplicates exist\":\"Duplicates do not exist!\");\u000a\u0009\u0009}catch (FileNotFoundException e){\u000a\u0009\u0009\u0009System.out.println(\"This file could not be located!\");\u000a\u0009\u0009}catch (IOException e){\u000a\u0009\u0009\u0009System.out.println(\"Something went wrong reading the file\");\u000a\u0009\u0009}\u000a\u000a\u000a\u0009}\u000a\u000a    /**\u000a     * Will determine if a file has duplicate Strings\u000a     * @param reader the BufferedReader for the Strings to be read in from\u000a     * @return true if duplicates exist, and false otherwise\u000a     * @throws IOException if the file does not exist or cannot load\u000a     */\u000a\u0009public static boolean isDuplicates(BufferedReader reader) throws IOException\u000a\u0009{\u000a\u0009\u0009//Create a map for the word count\u000a\u0009\u0009Map&lt;String, Integer&gt;  words = new HashMap<>();\u000a\u0009\u0009\u000a\u0009\u0009//Read each word\u000a\u0009\u0009String word = reader.readLine();\u000a\u0009\u0009while (word != null)\u000a\u0009\u0009{\u000a\u0009\u0009\u0009Integer success = words.putIfAbsent(word, 1);\u000a\u0009\u0009\u0009if (success != null)\u000a\u0009\u0009\u0009{\u000a\u0009\u0009\u0009\u0009return true;\u000a\u0009\u0009\u0009}\u000a\u0009\u0009}\u000a\u0009\u0009//otherwise\u000a\u0009\u0009return false;\u000a\u0009}\u000a\u0009\u0009\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:130",
      "@version": 2,
      "@class": "Example",
      "Explanation": "This shows an example of a class with a field. The rest has been omitted for brevity.",
      "Label": null,
      "in_CSExample": ["#29:76"],
      "Body": "public class Student extends Person implements ExaminableInterface{\u000a    protected int matricNumber;\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:131",
      "@version": 4,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:78"],
      "Body": "while (superheroFilm.another()){\u000a        eyes.roll();\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:132",
      "@version": 4,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:79"],
      "Body": "do \u000a{\u000a        System.out.println(\"Are you sure this isn't a terrible mistake?\");\u000a        allowChanceToChange();\u000a}while (!theMummyFilm.actor.equals(\"B Fraser\");",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:133",
      "@version": 2,
      "@class": "Example",
      "Explanation": "Class and Interface",
      "Label": "",
      "in_CSExample": ["#29:80"],
      "Body": "<img class=\"example-img\" src=\"http://i.imgur.com/NotAzd6.png\"></img>",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:134",
      "@version": 2,
      "@class": "Example",
      "Explanation": "Class and Interface with access control modifiers.",
      "Label": null,
      "in_CSExample": ["#29:81"],
      "Body": "<img class=\"example-img\" src=\"http://i.imgur.com/NotAzd6.png\"></img>",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:135",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:82"],
      "Body": "<img class=\"example-img\" src=\"http://i.imgur.com/WUHM8O8.png\"></img>",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:136",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:83"],
      "Body": "<img class=\"example-img\" src=\"http://i.imgur.com/NotAzd6.png\"></img>",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:137",
      "@version": 4,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:84"],
      "Body": "<img class=\"example-img\" src=\"http://i.imgur.com/yMed9WE.png\"></img>",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:138",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:85"],
      "Body": "<img class=\"example-img\" src=\"http://i.imgur.com/Qfi6UC0.png\"></img>",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:139",
      "@version": 5,
      "@class": "Example",
      "Label": null,
      "in_CSExample": ["#29:86"],
      "Body": "@test\u000apublic validAdditionOfInts(){\u000a    AdderClass adder = new AdderClass();\u000a    assertEquals(6, adder.add(4,2)); //of form: EXPECTED, ACTUAL\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:140",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:48"],
      "Explanation": "This will create a list between of 0,1,2 ..., 99.",
      "Label": null,
      "Body": "list_of_numbers = [x for x in xrange(100)]",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:141",
      "@version": 3,
      "@class": "Example",
      "in_MTExample": ["#31:49"],
      "Explanation": "This gives us an easy way to look up the name of a module from just its module code. \u000a<br>\u000aFor example <code>print classes['MT2502']</code> would output <code>Analysis</code> for us.",
      "Label": null,
      "Body": "classes = {\u000a\u0009'MT2501': 'Linear Algebra',\u000a\u0009'MT2502': 'Analysis',\u000a\u0009'MT2503': 'Multivariate Calculus'\u000a\u0009}\u000aprint classes['MT2502']",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:142",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:50"],
      "Explanation": "Prints them as a list, see for yourself by running this example",
      "Label": null,
      "Body": "list_of_colours = ['red','blue','green','yellow']\u000aprint list_of_colours[2:] #prints green and yellow\u000aprint list_of_colours[:2] #prints red and blue",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:143",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:51"],
      "Explanation": null,
      "Label": null,
      "Body": "int(5.3) #converts a float to an int",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:144",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:88"],
      "Body": "public class GoldFish{\u000a    private float weight;\u000a    private String name;\u000a\u000a    @Override\u000a    public boolean equals(Fish a){\u000a        return weight == a.getWeight() && name.equals(a.getName());\u000a    }\u000a\u000a    public GoldFish(String name, float weight){\u000a        this.weight = weight;\u000a        this.name += name; //Recall Strings are special so we can do this\u000a}\u000a\u000a//Elsewhere in our program\u000aGoldFish f1 = new GoldFish(\"Nemo\",  7.1);\u000aGoldFish f2 = new GoldFish(\"Nemo\", 7.1);\u000a\u000a//Correct to compare if two fish are the same:\u000af1.equals(f2); //This is true        \u000a//Wrong way\u000af1 == f2; //This is false since they are pointing to different objects.",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:145",
      "@version": 5,
      "@class": "Example",
      "in_CoreExample": ["#30:33"],
      "Explanation": "",
      "Label": null,
      "Body": "String firstPart = \"Send\"\u000aString secondPart \" memes\"\u000aString msg = firstPart + secondPart; //Contains \"Send memes\"",
      "@fieldTypes": "in_CoreExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:146",
      "@version": 2,
      "@class": "Example",
      "Explanation": "Boolean b1 and b2 are both True, but b3 returns False because we already have a square of size 3. There is no guarantees about the ordering because we used a HashSet.",
      "Label": null,
      "in_CSExample": ["#29:89"],
      "Body": "public class Square extends Shape{\u000a    int size;\u000a\u000a    public Square(int size){\u000a        this.size = size;\u000a    }\u000a\u000a    @Override\u000a    public boolean equals(Square s){\u000a        return size == s.size;\u000a    }\u000a}\u000a\u000a//Elsewhere\u000aSquare s1 = new Square(3);\u000aSquare s2 = new Square(4);\u000aSquare s3 = new Square(3);\u000a\u000aSet&lt;Squares&gt; squares = new HashSet<>();\u000aboolean b1 = squares.add(s1);\u000aboolean b2 = squares.add(s2);\u000aboolean b3 = squares.add(s3);",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:147",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:90"],
      "Body": "LinkedList&lt;Person&gt; queue = new LinkedList<>();\u000aPerson p1 = new Person(\"Norbit\", 37);\u000aPerson p2 = new Person(\"Ericia\", 21);\u000aPerson p3 = new Person(\"Victoria\", 89);\u000aPerson p4 = new Person(\"Edward\", 7);\u000aPerson p5 = new Person(\"Robert\", 32);\u000a\u000a//As a Person enters our store (Good Goods Inc.) we may want to add them to the queue of customers to be served.\u000aqueue.add(p1);\u000aqueue.add(p2);\u000aqueue.add(p3);\u000a\u000a//As we service them we may want to remove them from the queue\u000aqueue.removeFirst();\u000aqueue.add(p4);\u000aqueue.removeFirst();\u000aqueue.removeFirst();\u000aqueue.add(p5);\u000a\u000a//At this point our queue only consists of Edward and Robert since everyone before them is removed first (in this example).",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:148",
      "@version": 4,
      "@class": "Example",
      "Explanation": "Internally we just use the method name, externally we use the object name with the dot operator and for static methods we use the class name with the dot operator.",
      "Label": null,
      "in_CSExample": ["#29:91"],
      "Body": "public class Person{\u000a    private int age;\u000a    private static int people; //Defaults to 0\u000a\u000a    public Person(int age){\u000a        this.age = age;\u000a        people++;\u000a    }\u000a\u000a    private void changeAge(int change){\u000a        age += change;\u000a    }\u000a\u000a    public void haveBirthday(){\u000a        changeAge(1);\u000a    }\u000a\u000a    public static int numberOfPeople(){\u000a        return people;\u000a    }\u000a}\u000a\u000a//Elsewhere we could have a Person object\u000aPerson abigail = new Person(19);\u000aabigail.haveBirthday(); //Now her age is 20!\u000aint totalGuests = Person.numberOfPeople();",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:149",
      "@version": 2,
      "@class": "Example",
      "Explanation": "We are allowed to initialise FINAL variables in Constructors.",
      "Label": null,
      "in_CSExample": ["#29:92"],
      "Body": "public class Shop{\u000a    public final double MAX_DEBT;\u000a    public double currentDebt = 0;\u000a\u000a    public Shop(double MAX_DEBT, double currentDebt){\u000a        this.MAX_DEBT = MAX_DEBT;\u000a        this.currentDebt = currentDebt;\u000a    }\u000a\u000a    public boolean takeLoan(double amount){\u000a        if (currentDebt + amount <= MAX_DEBT){\u000a            currentDebt += amount;\u000a            return True;\u000a        }\u000a        return False;\u000a    }\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:150",
      "@version": 3,
      "@class": "Example",
      "in_CSError": ["#36:18"],
      "Explanation": "Any varags must go at the end of the parameter list. We are also limited to 1 varag parameter per method at most.  Think carefully about whether you need varags over an array. Arrays are typically better but there are cases where varags reigns supreme.",
      "Label": null,
      "Body": "public int sumAndMultiply(int... sum, int multiply){\u000a    int sum = sum(sum);\u000a    return sum*multiply();\u000a}",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:151",
      "@version": 2,
      "@class": "Example",
      "Explanation": "@Override is an annotation and simply provides additional information to the compiler. It is technically not necessary. This shows us method overriding across classes.\u000a\u000aSee: https://en.wikipedia.org/wiki/Duck#Communication",
      "Label": null,
      "in_CSExample": ["#29:93"],
      "Body": "public abstract class Animal{\u000a    public String noise();\u000a}\u000a\u000apublic class Fox extends Animal{\u000a    @Override\u000a    public String noise(){\u000a        return \"What does a fox say?\";\u000a    }\u000a}\u000a\u000apublic class Duck extends Animal(){\u000a    @Override\u000a    public String noise(){\u000a        return \"Quack!\";\u000a    }\u000a}\u000a\u000apublic class DivingDuck extends Duck{\u000a    @Override\u000a    public String noise(){\u000a        return \"Scaup!\";\u000a    }\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:152",
      "@version": 3,
      "@class": "Example",
      "in_CSError": ["#36:19"],
      "Explanation": "Variables and methods that are private can only be accessed from within the class itself.",
      "Label": null,
      "Body": "public class Car {\u000a    private double mpg;\u000a    public int miles;\u000a\u000a    public Car(int miles, double mpg){\u000a        this.miles = miles;\u000a        this.mpg = mpg;\u000a    }\u000a\u000a    private void resetMiles(){\u000a        miles = 0;\u000a    }\u000a}\u000a\u000a//Elsewhere\u000aCar c = new Car(1000, 25.2);\u000aint miles = c.miles;\u000adouble mpg = c.mpg; //This will not work.\u000ac.resetMiles(); //This will not work either.",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:153",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:94"],
      "Body": "public class Car {\u000a    public double mpg;\u000a    public int miles;\u000a\u000a    public Car(int miles, double mpg){\u000a        this.miles = miles;\u000a        this.mpg = mpg;\u000a    }\u000a\u000a    public void resetMiles(){\u000a        miles = 0;\u000a    }\u000a}\u000a\u000a//Elsewhere\u000aCar c = new Car(1000, 25.2);\u000aint miles = c.miles;\u000adouble mpg = c.mpg; \u000ac.resetMiles(); //Miles is now 0",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:154",
      "@version": 2,
      "@class": "Example",
      "in_CSError": ["#36:20"],
      "Explanation": null,
      "Label": null,
      "Body": "public class Car {\u000a    protected double mpg;\u000a    public int miles;\u000a\u000a    public Car(int miles, double mpg){\u000a        this.miles = miles;\u000a        this.mpg = mpg;\u000a    }\u000a\u000a    protected void resetMiles(){\u000a        miles = 0;\u000a    }\u000a}\u000a\u000apublic class SportsCar extends Car{\u000a    public void sellCar(){\u000a        resetMiles();\u000a    }\u000a\u000a    public SportsCar(int miles){\u000a        this.miles = miles;\u000a       mpg = 0.5;\u000a    }\u000a}\u000a//Elsewhere\u000aCar c = new Car(1000, 25.2);\u000aint miles = c.miles;\u000adouble mpg = c.mpg; //This will not work.\u000ac.resetMiles(); //This will not work either.\u000aSportsCar sc = new SportsCar(10);\u000asc.sellCar(); //Miles is now 0 since it is a subclass and can access the protected methods in the superclass.\u000asc.resetMiles(); //Will not work. The class can access it, but we cannot externally.",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:155",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:95"],
      "Body": "public abstract class Animal{\u000a    private int age;\u000a\u000a    abstract int getAge();\u000a    abstract String noise();\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:156",
      "@version": 2,
      "@class": "Example",
      "Explanation": "This gives us a constant that cannot be updated after it has been initialised by the constructor.",
      "Label": null,
      "in_CSExample": ["#29:96"],
      "Body": "public abstract class Tree&lt;T&gt; {\u000a    public final int NUMBER_OF_CHILDREN;\u000a\u000a    public Tree(int NUMBER_OF_CHILDREN){\u000a        this.NUMBER_OF_CHILDREN = NUMBER_OF_CHILDREN;\u000a    }\u000a\u000a    public abstract T getChildNumber(int i);\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:157",
      "@version": 3,
      "@class": "Example",
      "in_CSError": ["#36:21"],
      "Explanation": "We are not allowed to extend a final class. This means CartesianTree cannot inherit from BinaryTree.",
      "Label": null,
      "Body": "public final class BinaryTree&lt;T&gt;  extends Tree&lt;T&gt;{\u000a    public T left;\u000a    public T right;\u000a\u000a    public BinaryTree(int NUMBER_OF_CHILDREN){\u000a        super(NUMBER_OF_CHILDREN);\u000a    }\u000a\u000a    public T getChildNumber(int i){\u000a        if (i==0) return left;\u000a        if (i==1) return right;\u000a        return null;\u000a    }\u000a}\u000a\u000apublic class CartesianTree&lt;T&gt; extends BinaryTree&ltT&gt{\u000a    //\u000a}",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:158",
      "@version": 2,
      "@class": "Example",
      "in_CSError": ["#36:22"],
      "Explanation": null,
      "Label": null,
      "Body": "public class Cat{\u000a    public final boolean pet(){\u000a        return True;\u000a    }\u000a}\u000a\u000apublic class Lion extends Cat{\u000a //\u000a}\u000a\u000a//Elsewhere\u000aLion l = new Lion();\u000al.pet(); //Lion has no pet method.",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:159",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:97"],
      "Body": "public interface EntityInterface{\u000a    private double x;\u000a    private double y;\u000a\u000a    public default move(double dx, double dy){\u000a        x += dx;\u000a        y += dy;\u000a    }\u000a}\u000a\u000apublic class Entity implement EntityInterface{\u000a    protected double z;\u000a}\u000a\u000apublic class Mob extends Entity implements EntityInterface{\u000a    private final Window window = Window.getWindowObject();\u000a\u000a    public move(double dx, double dy){\u000a        dx /= 2;\u000a        EntityInterface.super.move(dx, dy);\u000a    }\u000a\u000a    public move(double dx, double dy, double dz){\u000a        z += dz;\u000a        move(dx, dy);\u000a        window.reDraw();\u000a    }\u000a\u000a}\u000a\u000a//Elsewhere\u000aEntity e = new Entity(); //Fields default to 0,0\u000ae.move(1.0, 2.0); //This is valid. Now the coordinates are 1.0, 2.0. This is using the default method in the interface. \u000a\u000aMob m = new Mob();\u000am.move(2.0, 2.0); //This is valid. The coordinates are again 1.0, 2.0, 0.0\u000a\u000aMob m2 = new Mob();\u000am.move(2.0, 3.0, 5.0); //This is valid. Now the coordinates are 1.0, 3.0, 5.0",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:160",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:98"],
      "Body": "public class MathLib{\u000a    public static double hyp(double a, double b){\u000a        return Math.sqrt(a*a+b*b);\u000a    }\u000a}\u000a\u000a//Elsewhere\u000apublic class Triangle(){\u000a    public double side1;\u000a    public double side2;\u000a    public double hyp;\u000a\u000a    public Triangle(double a, double b){\u000a        side1 = a;\u000a        side2 = b;\u000a        hyp = MathLib.hyp(a,b);\u000a    }\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:161",
      "@version": 2,
      "@class": "Example",
      "in_CSError": ["#36:23"],
      "Explanation": "A static method cannot access a non-static method (or variables).",
      "Label": null,
      "Body": "public class MathLib{\u000a\u000a    public int add(int a, int b){\u000a        return a + b;\u000a    }\u000a\u000a    public static int addAndSqrt(){\u000a        return sqrt(add(a,b));\u000a    }\u000a\u000a}",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:162",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:99"],
      "Body": "public class Fruit{\u000a    double weight;\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:163",
      "@version": 2,
      "@class": "Example",
      "in_CSError": ["#36:24"],
      "Explanation": "There is no need to put access control on local variables. They can only be accessed by that method.",
      "Label": null,
      "Body": "public int add(int a, int b){\u000a    private int c = a + b;\u000a    return c;\u000a}",
      "@fieldTypes": "in_CSError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:164",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:100"],
      "Body": "int forrest = 1;\u000aint jenny = 1;\u000a\u000aif (forrest + jenny < 3){\u000a    return Oscars.all();\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:165",
      "@version": 5,
      "@class": "Example",
      "Explanation": "This could also be done by polymorphism.",
      "Label": null,
      "in_CSExample": ["#29:102"],
      "Body": "public String catchphrase(Person p){\u000a    if(p.name.equals(\"Jeff\"){\u000a        return \"Whatever. I don't care\";\u000a    }\u000a    if(p.name.equals(\"Abed\"){\u000a        return \"Cool. Cool cool.\";\u000a    }\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:166",
      "@version": 4,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:103"],
      "Body": "while(tok.hasToken() && !found){\u000a   found = tok.next().equals(searchTerm);\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:167",
      "@version": 3,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:104"],
      "Body": "public void print(Iterable&lt;E&gt; i){\u000a    for(E o: i){\u000a        System.out.println(o);\u000a    }\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:168",
      "@version": 2,
      "@class": "Example",
      "Explanation": "This is an example using the Scanner object. Many other options are available.",
      "Label": null,
      "in_CSExample": ["#29:105"],
      "Body": "Scanner scan = new Scanner(System.in);\u000aSystem.out.print(\"Please input your age: \");\u000aint age = sc.nextInt();",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:169",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:52"],
      "Explanation": null,
      "Label": null,
      "Body": "boolean_var = False #Set our boolean to false\u000aif not boolean_var: #If not True\u000a    boolean_var = True #Set this variable to True",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:170",
      "@version": 2,
      "@class": "Example",
      "Explanation": "<code>\"True\"</code> is not the same as <code>True</code> which is different from <code>true</code>.",
      "Label": null,
      "in_MTError": ["#37:7"],
      "Body": "boolean_var = \"True\"",
      "@fieldTypes": "in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:171",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:53"],
      "Explanation": "If our list does not exist we simply create one.",
      "Label": null,
      "Body": "def add_to_list(list, elem):\u000a    if list is none:\u000a        list = []\u000a    list.append(elem)\u000a    return list",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:172",
      "@version": 2,
      "@class": "Example",
      "Explanation": "This will throw an exception since list is none and we cannot append to it.",
      "Label": null,
      "in_MTError": ["#37:8"],
      "Body": "def add_to_list(list, elem):\u000a    list.append(elem)\u000a    return list\u000a\u000aadd_to_list(None, 'a')",
      "@fieldTypes": "in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:173",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:54"],
      "Explanation": "This program will print False, True (1), True (3), False (4)",
      "Label": null,
      "Body": "s1 = Set((1,2,3))\u000as2 = Set((1,3,4))\u000aprint s1.issubset(s2)\u000afor e in s1:\u000a    print e in s2",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:174",
      "@version": 2,
      "@class": "Example",
      "Explanation": "Set constructor takes one parameter - an iterable object eg a dictionary, list or tuple.",
      "Label": null,
      "in_MTError": ["#37:9"],
      "Body": "s = set(1,2,3)",
      "@fieldTypes": "in_MTError=g"
    },
    {
      "@type": "d",
      "@rid": "#17:175",
      "@version": 3,
      "@class": "Example",
      "Explanation": "We can repeatedly loop over readLine() whilsts the BufferedReader file.hasNext() to read the entire file.\u000aNote: Whenever you read a line it will always move to the next line automatically and not reset. In this example when we do the first readLine() if we do another readLine() we get line 2 and not line 1.",
      "Label": null,
      "in_CSExample": ["#29:106"],
      "Body": "String fileName = \"memes/hot_memes_2k18.txt\" \u000a\u000apublic String line() throws FileNotFoundException{\u000a    FileReader r = new FileReader(fileName);\u000a    BufferedReader file = new BufferedReader(r); //Notice r and not our filename\u000a    return file.readLine(); //Returns the first line (up to '\\n')\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:176",
      "@version": 2,
      "@class": "Example",
      "in_CoreExample": ["#30:34"],
      "Explanation": "This example shows reading JSON from a local file, but often JSON is a response from web APIs.",
      "Label": null,
      "Body": "JsonReader jReader = Json.createReader(new Reader('filename.json')); //Much like reading a file we need this to be in our object. Note: JSON Readers are Object based models.\u000aJsonObject obj = jReader.readObject(); //This will read our first JSON Object and load it into memory for us.\u000adouble cost = obj.getJsonNumber(\"cost\").doubleValue(); //Gets us the attribute called cost from this specific object. \u000aString type = obj.getString(\"type\"); //This gets us the type attribute. Notice that they are slightly different.",
      "@fieldTypes": "in_CoreExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:177",
      "@version": 2,
      "@class": "Example",
      "in_CoreExample": ["#30:35"],
      "Explanation": "This demonstrates how to write an object from our memory to disk in JSON format.",
      "Label": null,
      "Body": "JsonBuilderFactory personFactory = Json.createObjectBuilder(); //Notice this is a Factory!\u000aJsonObject = personFactory.createObjectBuilder();\u000aperson.add(\"firstName\",  \"Doug\");\u000aperson.add(\"lastName\",  \"Stamper\");\u000aperson.add(\"age\", 52);\u000aperson.add(\"Occupation\", \"Chief of Staff\");\u000aperson.build(); //Notice we have to build at the end. This is now a JSON object which can be written to a file as normal.",
      "@fieldTypes": "in_CoreExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:178",
      "@version": 3,
      "@class": "Example",
      "Explanation": "For loops are able to be converted into while loops (although do not do this unless you have a specific reason to do so), and secondly notice that the condition (x > 1) is checked before the code block is executed.\u000a<p>\u000aThe output is <code>3, 2 </code>",
      "Label": null,
      "in_CSExample": ["#29:107"],
      "Body": "int x = 3;\u000awhile (x > 1){\u000a   System.out.println(x);\u000a   x--;\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:179",
      "@version": 2,
      "@class": "Example",
      "Explanation": "This still loops once outputting <code>3</code>",
      "Label": null,
      "in_CSExample": ["#29:108"],
      "Body": "int x = 3;\u000ado{\u000a   System.out.println(x);\u000a   x--;\u000a}while (x > 3);",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:180",
      "@version": 2,
      "@class": "Example",
      "Explanation": "If we are expecting a method (or value) to be simple TRUE or FALSE  we typically omit the the equality. \u000aI.e instead of <pre>cat.ill() == true</pre> we simply  have <pre>cat.ill()</pre>.",
      "Label": null,
      "in_CSExample": ["#29:109"],
      "Body": "if (cat.height > 0.1 && cat.weight > 20 || cat.ill()){\u000a    admitToVet(cat);\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:181",
      "@version": 2,
      "@class": "Example",
      "Explanation": "Primitive types, when passed into a method, are copied to the local variable. We cannot update the original in this way.",
      "Label": null,
      "in_CSExample": ["#29:110"],
      "Body": "boolean useCar = false;\u000a\u000apublic void activateCar(boolean currentState){\u000a    currentState = true;\u000a}\u000a\u000aSystem.out.println(userCar); //would still output false",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:183",
      "@version": 3,
      "@class": "Example",
      "in_MTExample": ["#31:56"],
      "Explanation": "",
      "Label": null,
      "Body": "This type of supply function for a firm arises in the case of perfectly competitive markets. Here, competition has pushed prices down to the level of the firm\u2019s costs.  A lower price would generate losses and the firm would not supply to the market.  The firm would like to supply at a higher price but competition prevents this.",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:184",
      "@version": 4,
      "@class": "Example",
      "in_MTExample": ["#31:57"],
      "Explanation": "Suppose  $$c=-2$$.  In that case $$P=-2+dQ^S$$  \u000a\u000aWhen P=0, this implies $$Q^S=\\frac{2}{d}$$ which is a positive number given that the slope is positive: $$d>0$$ by the law of supply.  In other words, when the price is zero, suppliers would provide some goods for free when the choke price is negative.  \u000a<br>\u000aClearly this is not very realistic and explains why we would normally expect the choke price to be positive.",
      "Label": null,
      "Body": "Example 1",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:185",
      "@version": 2,
      "@class": "Example",
      "Explanation": null,
      "Label": null,
      "in_CSExample": ["#29:111"],
      "Body": "public class Main {\u000a\u000a    public static void main(String[] args) {\u000a        if (args.length > 0) System.out.println(\"The first parameter is: \" + args[0]);\u000a    }\u000a}",
      "@fieldTypes": "in_CSExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:186",
      "@version": 2,
      "@class": "Example",
      "in_MTExample": ["#31:58"],
      "Explanation": "",
      "Label": null,
      "Body": "x = 0\u000awhile x < 3:\u000a    y = 3*x + 5\u000a    x = x + 1\u000a\u000a# Whilst this is *technically* valid Python it is generally frowned upon\u000a# It is not clear when y is created what its scope is to be and can \u000a# make debugging in complex code more challenging.\u000a# As a general rule of thumb code should be declared at the highest scope\u000a# It will be used in\u000ax = y",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:187",
      "@version": 5,
      "@class": "Example",
      "in_MTExample": ["#31:59"],
      "Explanation": "Let $$Q^D = 5 - \\frac{1}{2}P$$ and $$Q^S = -1 + P$$\u000a\u000aIn equilibrium:\u000a\u000a$$Q^D = Q^S \\implies 5 - \\frac{1}{2}P = -1 + P$$\u000a\u000aWhich we can rearrange to get:\u000a\u000a$$P = P_e = \\frac{-1 - 5}{\\frac{-1}{2}-1} = - 4 $$\u000a\u000aAnd the equilibrium quantity:\u000a\u000a$$ Q_e = 5 - \\frac{1}{2}P_e = -1 + P_e = 3 $$",
      "Label": null,
      "Body": "Example 1",
      "@fieldTypes": "in_MTExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:188",
      "@version": 2,
      "@class": "Example",
      "in_CoreExample": ["#30:36"],
      "Explanation": null,
      "Label": null,
      "Body": "<i>Why is MPL diminishing?</i><p>\u000aThink of a pub with a beer dispenser behind the bar. If at any given time there is only one bartender operating the dispenser, he may be able to give good service to all clients most of the time. A second person operating the dispenser might be useful on particularly busy nights but will overall serve few additional drinks beyond those which a sole bartender does by himself. A third person will be useful rarely if ever, and so on. The contribution to the job which every consecutive bartender hired provides (assuming no one is fired!) is the marginal product of their labour. As you can see, this contribution is smaller and smaller for every new worker, and the marginal product is hence diminishing.\u000a\u000a<i>When is MPL increasing?</i><p>\u000aIt is not necessarily always the case that the marginal product of labour will diminish when another worker is hired.  In the bartender example, the marginal product may initially increase if a sole bartender is seriously overworked completing all of the tasks alone and facing long queues at the bar.  In that case, an additional worker may be able to specialize (operating the till?) such that the marginal product of labour initially increases.  Nevertheless, it is likely that diminishing returns will eventually set in as more workers are employed.",
      "@fieldTypes": "in_CoreExample=g"
    },
    {
      "@type": "d",
      "@rid": "#17:189",
      "@version": 2,
      "@class": "Example",
      "in_CoreExample": ["#30:37"],
      "Explanation": null,
      "Label": null,
      "Body": "Suppose U = XY then:\u000a<p>\u000a$$ MY_X = Y$$\u000a<p>\u000aand also:\u000a<p>\u000a$$ MU_Y = X$$\u000a<p>\u000a$$ MRS_{XY} = \\frac{MU_X}{MU_Y} = \\frac{Y}{X} $$",
      "@fieldTypes": "in_CoreExample=g"
    },
    {
      "@type": "d",
      "@rid": "#19:6",
      "@version": 1,
      "@class": "contain",
      "in": "#14:4",
      "out": "#13:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:7",
      "@version": 1,
      "@class": "contain",
      "in": "#13:12",
      "out": "#13:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:11",
      "@version": 1,
      "@class": "contain",
      "in": "#14:7",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:12",
      "@version": 1,
      "@class": "contain",
      "in": "#14:8",
      "out": "#14:7",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:28",
      "@version": 1,
      "@class": "contain",
      "in": "#14:15",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:35",
      "@version": 1,
      "@class": "contain",
      "in": "#14:18",
      "out": "#13:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:36",
      "@version": 1,
      "@class": "contain",
      "in": "#14:19",
      "out": "#13:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:38",
      "@version": 1,
      "@class": "contain",
      "in": "#14:20",
      "out": "#13:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:40",
      "@version": 1,
      "@class": "contain",
      "in": "#14:22",
      "out": "#13:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:43",
      "@version": 1,
      "@class": "contain",
      "in": "#14:23",
      "out": "#13:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:48",
      "@version": 1,
      "@class": "contain",
      "in": "#13:33",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:51",
      "@version": 1,
      "@class": "contain",
      "in": "#13:34",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:148",
      "@version": 1,
      "@class": "contain",
      "in": "#13:16",
      "out": "#34:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:151",
      "@version": 1,
      "@class": "contain",
      "in": "#34:2",
      "out": "#28:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:152",
      "@version": 1,
      "@class": "contain",
      "in": "#34:3",
      "out": "#28:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:153",
      "@version": 1,
      "@class": "contain",
      "in": "#34:4",
      "out": "#28:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:164",
      "@version": 1,
      "@class": "contain",
      "in": "#14:29",
      "out": "#13:41",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:168",
      "@version": 1,
      "@class": "contain",
      "in": "#14:33",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:169",
      "@version": 1,
      "@class": "contain",
      "in": "#14:35",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:170",
      "@version": 1,
      "@class": "contain",
      "in": "#14:26",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:171",
      "@version": 1,
      "@class": "contain",
      "in": "#14:42",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:172",
      "@version": 1,
      "@class": "contain",
      "in": "#14:40",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:173",
      "@version": 1,
      "@class": "contain",
      "in": "#13:42",
      "out": "#13:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:174",
      "@version": 1,
      "@class": "contain",
      "in": "#14:38",
      "out": "#13:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:175",
      "@version": 1,
      "@class": "contain",
      "in": "#14:41",
      "out": "#13:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:176",
      "@version": 1,
      "@class": "contain",
      "in": "#13:50",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:177",
      "@version": 1,
      "@class": "contain",
      "in": "#13:47",
      "out": "#14:30",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:178",
      "@version": 1,
      "@class": "contain",
      "in": "#14:39",
      "out": "#14:30",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:179",
      "@version": 1,
      "@class": "contain",
      "in": "#14:36",
      "out": "#13:35",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:180",
      "@version": 1,
      "@class": "contain",
      "in": "#13:36",
      "out": "#14:30",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:181",
      "@version": 1,
      "@class": "contain",
      "in": "#14:34",
      "out": "#13:35",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:182",
      "@version": 1,
      "@class": "contain",
      "in": "#14:32",
      "out": "#13:35",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:187",
      "@version": 1,
      "@class": "contain",
      "in": "#13:55",
      "out": "#34:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:188",
      "@version": 1,
      "@class": "contain",
      "in": "#13:54",
      "out": "#34:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:192",
      "@version": 1,
      "@class": "contain",
      "in": "#34:6",
      "out": "#28:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:193",
      "@version": 1,
      "@class": "contain",
      "in": "#34:5",
      "out": "#28:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:198",
      "@version": 1,
      "@class": "contain",
      "in": "#34:8",
      "out": "#28:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:200",
      "@version": 1,
      "@class": "contain",
      "in": "#13:27",
      "out": "#34:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:201",
      "@version": 1,
      "@class": "contain",
      "in": "#13:29",
      "out": "#34:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:202",
      "@version": 1,
      "@class": "contain",
      "in": "#13:26",
      "out": "#34:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:203",
      "@version": 1,
      "@class": "contain",
      "in": "#13:25",
      "out": "#34:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:204",
      "@version": 1,
      "@class": "contain",
      "in": "#13:23",
      "out": "#34:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:205",
      "@version": 1,
      "@class": "contain",
      "in": "#13:11",
      "out": "#34:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:206",
      "@version": 1,
      "@class": "contain",
      "in": "#14:16",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:207",
      "@version": 1,
      "@class": "contain",
      "in": "#13:10",
      "out": "#34:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:209",
      "@version": 1,
      "@class": "contain",
      "in": "#13:56",
      "out": "#34:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:210",
      "@version": 1,
      "@class": "contain",
      "in": "#13:57",
      "out": "#34:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:211",
      "@version": 1,
      "@class": "contain",
      "in": "#14:11",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:212",
      "@version": 1,
      "@class": "contain",
      "in": "#14:24",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:213",
      "@version": 1,
      "@class": "contain",
      "in": "#13:31",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:214",
      "@version": 1,
      "@class": "contain",
      "in": "#14:12",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:215",
      "@version": 1,
      "@class": "contain",
      "in": "#13:32",
      "out": "#13:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:217",
      "@version": 1,
      "@class": "contain",
      "in": "#34:9",
      "out": "#28:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:219",
      "@version": 1,
      "@class": "contain",
      "in": "#26:0",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:220",
      "@version": 1,
      "@class": "contain",
      "in": "#26:1",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:221",
      "@version": 1,
      "@class": "contain",
      "in": "#26:2",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:222",
      "@version": 1,
      "@class": "contain",
      "in": "#26:3",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:223",
      "@version": 1,
      "@class": "contain",
      "in": "#26:4",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:224",
      "@version": 1,
      "@class": "contain",
      "in": "#26:5",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:225",
      "@version": 1,
      "@class": "contain",
      "in": "#26:6",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:226",
      "@version": 1,
      "@class": "contain",
      "in": "#26:8",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:227",
      "@version": 1,
      "@class": "contain",
      "in": "#26:9",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:228",
      "@version": 1,
      "@class": "contain",
      "in": "#26:10",
      "out": "#35:0",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:229",
      "@version": 1,
      "@class": "contain",
      "in": "#26:11",
      "out": "#35:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:230",
      "@version": 1,
      "@class": "contain",
      "in": "#26:12",
      "out": "#35:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:231",
      "@version": 1,
      "@class": "contain",
      "in": "#26:13",
      "out": "#35:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:232",
      "@version": 1,
      "@class": "contain",
      "in": "#26:14",
      "out": "#35:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:233",
      "@version": 1,
      "@class": "contain",
      "in": "#26:15",
      "out": "#35:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:234",
      "@version": 1,
      "@class": "contain",
      "in": "#26:16",
      "out": "#35:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:235",
      "@version": 1,
      "@class": "contain",
      "in": "#13:58",
      "out": "#34:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:237",
      "@version": 1,
      "@class": "contain",
      "in": "#14:44",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:238",
      "@version": 1,
      "@class": "contain",
      "in": "#14:45",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:239",
      "@version": 1,
      "@class": "contain",
      "in": "#14:46",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:240",
      "@version": 1,
      "@class": "contain",
      "in": "#14:47",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:241",
      "@version": 1,
      "@class": "contain",
      "in": "#14:48",
      "out": "#14:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:242",
      "@version": 1,
      "@class": "contain",
      "in": "#14:17",
      "out": "#13:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:244",
      "@version": 1,
      "@class": "contain",
      "in": "#13:14",
      "out": "#34:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:245",
      "@version": 1,
      "@class": "contain",
      "in": "#13:15",
      "out": "#34:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:246",
      "@version": 1,
      "@class": "contain",
      "in": "#13:59",
      "out": "#34:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:248",
      "@version": 1,
      "@class": "contain",
      "in": "#13:19",
      "out": "#34:9",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:249",
      "@version": 1,
      "@class": "contain",
      "in": "#13:21",
      "out": "#34:9",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:250",
      "@version": 1,
      "@class": "contain",
      "in": "#13:28",
      "out": "#34:9",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:252",
      "@version": 1,
      "@class": "contain",
      "in": "#13:60",
      "out": "#34:9",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:253",
      "@version": 1,
      "@class": "contain",
      "in": "#34:11",
      "out": "#28:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:254",
      "@version": 1,
      "@class": "contain",
      "in": "#13:61",
      "out": "#34:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:255",
      "@version": 1,
      "@class": "contain",
      "in": "#13:62",
      "out": "#13:61",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:256",
      "@version": 1,
      "@class": "contain",
      "in": "#13:63",
      "out": "#13:61",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:257",
      "@version": 1,
      "@class": "contain",
      "in": "#13:64",
      "out": "#13:61",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:258",
      "@version": 1,
      "@class": "contain",
      "in": "#14:49",
      "out": "#13:63",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:260",
      "@version": 1,
      "@class": "contain",
      "in": "#13:66",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:261",
      "@version": 1,
      "@class": "contain",
      "in": "#14:50",
      "out": "#14:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:262",
      "@version": 1,
      "@class": "contain",
      "in": "#13:68",
      "out": "#34:9",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:263",
      "@version": 1,
      "@class": "contain",
      "in": "#13:69",
      "out": "#34:9",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:265",
      "@version": 1,
      "@class": "contain",
      "in": "#13:70",
      "out": "#34:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:266",
      "@version": 1,
      "@class": "contain",
      "in": "#14:52",
      "out": "#13:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:267",
      "@version": 1,
      "@class": "contain",
      "in": "#14:53",
      "out": "#14:7",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:268",
      "@version": 1,
      "@class": "contain",
      "in": "#14:54",
      "out": "#13:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:269",
      "@version": 1,
      "@class": "contain",
      "in": "#14:55",
      "out": "#13:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:270",
      "@version": 1,
      "@class": "contain",
      "in": "#13:71",
      "out": "#34:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:271",
      "@version": 1,
      "@class": "contain",
      "in": "#14:56",
      "out": "#13:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:272",
      "@version": 1,
      "@class": "contain",
      "in": "#13:72",
      "out": "#34:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:273",
      "@version": 1,
      "@class": "contain",
      "in": "#13:22",
      "out": "#13:72",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:274",
      "@version": 1,
      "@class": "contain",
      "in": "#13:73",
      "out": "#13:72",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:275",
      "@version": 1,
      "@class": "contain",
      "in": "#26:19",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:276",
      "@version": 1,
      "@class": "contain",
      "in": "#26:18",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:277",
      "@version": 1,
      "@class": "contain",
      "in": "#26:21",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:278",
      "@version": 1,
      "@class": "contain",
      "in": "#26:22",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:279",
      "@version": 1,
      "@class": "contain",
      "in": "#26:17",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:280",
      "@version": 1,
      "@class": "contain",
      "in": "#26:20",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:281",
      "@version": 1,
      "@class": "contain",
      "in": "#13:74",
      "out": "#34:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:292",
      "@version": 1,
      "@class": "contain",
      "in": "#13:75",
      "out": "#13:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:293",
      "@version": 1,
      "@class": "contain",
      "in": "#13:76",
      "out": "#13:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:294",
      "@version": 1,
      "@class": "contain",
      "in": "#13:77",
      "out": "#13:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:295",
      "@version": 1,
      "@class": "contain",
      "in": "#34:12",
      "out": "#28:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:296",
      "@version": 1,
      "@class": "contain",
      "in": "#34:13",
      "out": "#28:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:297",
      "@version": 1,
      "@class": "contain",
      "in": "#13:78",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:298",
      "@version": 1,
      "@class": "contain",
      "in": "#34:14",
      "out": "#28:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:299",
      "@version": 1,
      "@class": "contain",
      "in": "#13:80",
      "out": "#34:14",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:301",
      "@version": 1,
      "@class": "contain",
      "in": "#13:81",
      "out": "#13:80",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:302",
      "@version": 1,
      "@class": "contain",
      "in": "#13:82",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:303",
      "@version": 1,
      "@class": "contain",
      "in": "#13:83",
      "out": "#13:82",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:304",
      "@version": 1,
      "@class": "contain",
      "in": "#13:84",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:305",
      "@version": 1,
      "@class": "contain",
      "in": "#13:85",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:307",
      "@version": 1,
      "@class": "contain",
      "in": "#13:87",
      "out": "#13:80",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:308",
      "@version": 1,
      "@class": "contain",
      "in": "#13:88",
      "out": "#13:82",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:309",
      "@version": 1,
      "@class": "contain",
      "in": "#13:86",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:310",
      "@version": 1,
      "@class": "contain",
      "in": "#13:89",
      "out": "#13:78",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:311",
      "@version": 1,
      "@class": "contain",
      "in": "#13:90",
      "out": "#13:84",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:312",
      "@version": 1,
      "@class": "contain",
      "in": "#13:91",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:313",
      "@version": 1,
      "@class": "contain",
      "in": "#13:92",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:314",
      "@version": 1,
      "@class": "contain",
      "in": "#13:93",
      "out": "#13:84",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:315",
      "@version": 1,
      "@class": "contain",
      "in": "#13:94",
      "out": "#13:80",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:316",
      "@version": 1,
      "@class": "contain",
      "in": "#13:95",
      "out": "#13:80",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:317",
      "@version": 1,
      "@class": "contain",
      "in": "#13:96",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:318",
      "@version": 1,
      "@class": "contain",
      "in": "#13:97",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:319",
      "@version": 1,
      "@class": "contain",
      "in": "#13:98",
      "out": "#13:80",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:320",
      "@version": 1,
      "@class": "contain",
      "in": "#13:99",
      "out": "#13:82",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:321",
      "@version": 1,
      "@class": "contain",
      "in": "#13:100",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:322",
      "@version": 1,
      "@class": "contain",
      "in": "#13:101",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:323",
      "@version": 1,
      "@class": "contain",
      "in": "#13:102",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:324",
      "@version": 1,
      "@class": "contain",
      "in": "#13:103",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:325",
      "@version": 1,
      "@class": "contain",
      "in": "#13:104",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:326",
      "@version": 1,
      "@class": "contain",
      "in": "#13:105",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:327",
      "@version": 1,
      "@class": "contain",
      "in": "#13:106",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:328",
      "@version": 1,
      "@class": "contain",
      "in": "#13:107",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:329",
      "@version": 1,
      "@class": "contain",
      "in": "#13:108",
      "out": "#34:13",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:330",
      "@version": 1,
      "@class": "contain",
      "in": "#13:39",
      "out": "#34:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:331",
      "@version": 1,
      "@class": "contain",
      "in": "#34:15",
      "out": "#28:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:332",
      "@version": 1,
      "@class": "contain",
      "in": "#13:41",
      "out": "#34:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:333",
      "@version": 1,
      "@class": "contain",
      "in": "#13:110",
      "out": "#34:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:334",
      "@version": 1,
      "@class": "contain",
      "in": "#14:31",
      "out": "#13:110",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:335",
      "@version": 1,
      "@class": "contain",
      "in": "#14:25",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:336",
      "@version": 1,
      "@class": "contain",
      "in": "#13:43",
      "out": "#34:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:337",
      "@version": 1,
      "@class": "contain",
      "in": "#14:43",
      "out": "#13:41",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:339",
      "@version": 1,
      "@class": "contain",
      "in": "#34:16",
      "out": "#28:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:340",
      "@version": 1,
      "@class": "contain",
      "in": "#13:48",
      "out": "#34:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:341",
      "@version": 1,
      "@class": "contain",
      "in": "#13:44",
      "out": "#34:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:342",
      "@version": 1,
      "@class": "contain",
      "in": "#13:46",
      "out": "#34:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:343",
      "@version": 1,
      "@class": "contain",
      "in": "#13:37",
      "out": "#34:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:344",
      "@version": 1,
      "@class": "contain",
      "in": "#13:38",
      "out": "#34:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:345",
      "@version": 1,
      "@class": "contain",
      "in": "#14:30",
      "out": "#34:5",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:346",
      "@version": 1,
      "@class": "contain",
      "in": "#13:45",
      "out": "#34:5",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:347",
      "@version": 1,
      "@class": "contain",
      "in": "#13:35",
      "out": "#34:5",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:348",
      "@version": 1,
      "@class": "contain",
      "in": "#14:28",
      "out": "#34:5",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:349",
      "@version": 1,
      "@class": "contain",
      "in": "#26:23",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:350",
      "@version": 1,
      "@class": "contain",
      "in": "#26:24",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:351",
      "@version": 1,
      "@class": "contain",
      "in": "#26:25",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:352",
      "@version": 1,
      "@class": "contain",
      "in": "#26:26",
      "out": "#35:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:353",
      "@version": 1,
      "@class": "contain",
      "in": "#13:111",
      "out": "#14:7",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:355",
      "@version": 1,
      "@class": "contain",
      "in": "#14:27",
      "out": "#13:110",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:358",
      "@version": 1,
      "@class": "contain",
      "in": "#13:113",
      "out": "#34:14",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:359",
      "@version": 1,
      "@class": "contain",
      "in": "#13:114",
      "out": "#13:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:360",
      "@version": 1,
      "@class": "contain",
      "in": "#14:62",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:361",
      "@version": 1,
      "@class": "contain",
      "in": "#14:61",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:362",
      "@version": 1,
      "@class": "contain",
      "in": "#14:65",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:363",
      "@version": 1,
      "@class": "contain",
      "in": "#14:59",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:364",
      "@version": 1,
      "@class": "contain",
      "in": "#14:58",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:365",
      "@version": 1,
      "@class": "contain",
      "in": "#14:60",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:366",
      "@version": 1,
      "@class": "contain",
      "in": "#14:57",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:367",
      "@version": 1,
      "@class": "contain",
      "in": "#14:64",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:368",
      "@version": 1,
      "@class": "contain",
      "in": "#14:3",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:369",
      "@version": 1,
      "@class": "contain",
      "in": "#14:66",
      "out": "#13:35",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:370",
      "@version": 1,
      "@class": "contain",
      "in": "#14:67",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:371",
      "@version": 1,
      "@class": "contain",
      "in": "#14:68",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:372",
      "@version": 1,
      "@class": "contain",
      "in": "#14:69",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:373",
      "@version": 1,
      "@class": "contain",
      "in": "#13:115",
      "out": "#34:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:374",
      "@version": 1,
      "@class": "contain",
      "in": "#13:65",
      "out": "#13:115",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:375",
      "@version": 1,
      "@class": "contain",
      "in": "#13:112",
      "out": "#13:115",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:381",
      "@version": 1,
      "@class": "contain",
      "in": "#14:70",
      "out": "#13:116",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:385",
      "@version": 1,
      "@class": "contain",
      "in": "#34:22",
      "out": "#28:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:389",
      "@version": 1,
      "@class": "contain",
      "in": "#13:119",
      "out": "#34:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:390",
      "@version": 1,
      "@class": "contain",
      "in": "#13:120",
      "out": "#13:119",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:391",
      "@version": 1,
      "@class": "contain",
      "in": "#13:122",
      "out": "#13:120",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:392",
      "@version": 1,
      "@class": "contain",
      "in": "#13:123",
      "out": "#13:120",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:393",
      "@version": 1,
      "@class": "contain",
      "in": "#13:124",
      "out": "#13:123",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:394",
      "@version": 1,
      "@class": "contain",
      "in": "#13:125",
      "out": "#13:120",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:395",
      "@version": 1,
      "@class": "contain",
      "in": "#13:127",
      "out": "#13:125",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:396",
      "@version": 1,
      "@class": "contain",
      "in": "#13:126",
      "out": "#13:125",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:397",
      "@version": 1,
      "@class": "contain",
      "in": "#13:125",
      "out": "#13:120",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:398",
      "@version": 1,
      "@class": "contain",
      "in": "#13:122",
      "out": "#13:120",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:399",
      "@version": 1,
      "@class": "contain",
      "in": "#13:128",
      "out": "#13:120",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:400",
      "@version": 1,
      "@class": "contain",
      "in": "#13:129",
      "out": "#13:128",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:401",
      "@version": 1,
      "@class": "contain",
      "in": "#13:130",
      "out": "#13:128",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:402",
      "@version": 1,
      "@class": "contain",
      "in": "#13:131",
      "out": "#13:128",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:403",
      "@version": 1,
      "@class": "contain",
      "in": "#13:133",
      "out": "#13:119",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:404",
      "@version": 1,
      "@class": "contain",
      "in": "#13:134",
      "out": "#13:133",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:405",
      "@version": 1,
      "@class": "contain",
      "in": "#13:135",
      "out": "#13:133",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:406",
      "@version": 1,
      "@class": "contain",
      "in": "#13:136",
      "out": "#13:133",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:407",
      "@version": 1,
      "@class": "contain",
      "in": "#13:137",
      "out": "#13:119",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:408",
      "@version": 1,
      "@class": "contain",
      "in": "#13:139",
      "out": "#13:137",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:409",
      "@version": 1,
      "@class": "contain",
      "in": "#13:140",
      "out": "#13:137",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:410",
      "@version": 1,
      "@class": "contain",
      "in": "#13:138",
      "out": "#13:137",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:411",
      "@version": 1,
      "@class": "contain",
      "in": "#13:141",
      "out": "#34:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:412",
      "@version": 1,
      "@class": "contain",
      "in": "#13:142",
      "out": "#13:141",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:413",
      "@version": 1,
      "@class": "contain",
      "in": "#13:143",
      "out": "#13:142",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:414",
      "@version": 1,
      "@class": "contain",
      "in": "#13:144",
      "out": "#13:142",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:415",
      "@version": 1,
      "@class": "contain",
      "in": "#13:145",
      "out": "#13:144",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:417",
      "@version": 1,
      "@class": "contain",
      "in": "#13:146",
      "out": "#13:142",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:418",
      "@version": 1,
      "@class": "contain",
      "in": "#13:147",
      "out": "#13:142",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:419",
      "@version": 1,
      "@class": "contain",
      "in": "#13:148",
      "out": "#13:141",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:420",
      "@version": 1,
      "@class": "contain",
      "in": "#13:149",
      "out": "#13:141",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:421",
      "@version": 1,
      "@class": "contain",
      "in": "#13:150",
      "out": "#13:141",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:422",
      "@version": 1,
      "@class": "contain",
      "in": "#13:151",
      "out": "#13:141",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:423",
      "@version": 1,
      "@class": "contain",
      "in": "#13:152",
      "out": "#13:147",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:424",
      "@version": 1,
      "@class": "contain",
      "in": "#13:153",
      "out": "#13:152",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:425",
      "@version": 1,
      "@class": "contain",
      "in": "#13:154",
      "out": "#13:152",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:426",
      "@version": 1,
      "@class": "contain",
      "in": "#13:155",
      "out": "#13:152",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:427",
      "@version": 1,
      "@class": "contain",
      "in": "#13:156",
      "out": "#13:152",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:428",
      "@version": 1,
      "@class": "contain",
      "in": "#13:157",
      "out": "#13:152",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:429",
      "@version": 1,
      "@class": "contain",
      "in": "#13:158",
      "out": "#13:147",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:430",
      "@version": 1,
      "@class": "contain",
      "in": "#13:116",
      "out": "#34:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:431",
      "@version": 1,
      "@class": "contain",
      "in": "#13:159",
      "out": "#34:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:432",
      "@version": 1,
      "@class": "contain",
      "in": "#13:160",
      "out": "#13:159",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:437",
      "@version": 1,
      "@class": "contain",
      "in": "#13:164",
      "out": "#34:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:438",
      "@version": 1,
      "@class": "contain",
      "in": "#13:165",
      "out": "#13:164",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:439",
      "@version": 1,
      "@class": "contain",
      "in": "#25:224",
      "out": "#13:166",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:440",
      "@version": 1,
      "@class": "contain",
      "in": "#13:166",
      "out": "#13:164",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:441",
      "@version": 1,
      "@class": "contain",
      "in": "#13:165",
      "out": "#13:164",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:442",
      "@version": 1,
      "@class": "contain",
      "in": "#13:167",
      "out": "#34:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:443",
      "@version": 1,
      "@class": "contain",
      "in": "#13:168",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:444",
      "@version": 1,
      "@class": "contain",
      "in": "#13:169",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:445",
      "@version": 1,
      "@class": "contain",
      "in": "#13:170",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:446",
      "@version": 1,
      "@class": "contain",
      "in": "#13:171",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:447",
      "@version": 1,
      "@class": "contain",
      "in": "#13:172",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:448",
      "@version": 1,
      "@class": "contain",
      "in": "#13:173",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:449",
      "@version": 1,
      "@class": "contain",
      "in": "#13:174",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:450",
      "@version": 1,
      "@class": "contain",
      "in": "#13:175",
      "out": "#13:174",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:451",
      "@version": 1,
      "@class": "contain",
      "in": "#13:176",
      "out": "#13:175",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:452",
      "@version": 1,
      "@class": "contain",
      "in": "#13:177",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:453",
      "@version": 1,
      "@class": "contain",
      "in": "#13:178",
      "out": "#13:177",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:454",
      "@version": 1,
      "@class": "contain",
      "in": "#13:165",
      "out": "#13:164",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:455",
      "@version": 1,
      "@class": "contain",
      "in": "#34:24",
      "out": "#28:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:456",
      "@version": 1,
      "@class": "contain",
      "in": "#13:179",
      "out": "#34:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:458",
      "@version": 1,
      "@class": "contain",
      "in": "#13:180",
      "out": "#13:179",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:459",
      "@version": 1,
      "@class": "contain",
      "in": "#13:181",
      "out": "#13:180",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:460",
      "@version": 1,
      "@class": "contain",
      "in": "#13:182",
      "out": "#13:179",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:461",
      "@version": 1,
      "@class": "contain",
      "in": "#13:183",
      "out": "#13:182",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:462",
      "@version": 1,
      "@class": "contain",
      "in": "#34:25",
      "out": "#28:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:463",
      "@version": 1,
      "@class": "contain",
      "in": "#13:184",
      "out": "#34:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:464",
      "@version": 1,
      "@class": "contain",
      "in": "#13:185",
      "out": "#13:184",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:465",
      "@version": 1,
      "@class": "contain",
      "in": "#13:186",
      "out": "#13:185",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:466",
      "@version": 1,
      "@class": "contain",
      "in": "#13:187",
      "out": "#13:185",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:467",
      "@version": 1,
      "@class": "contain",
      "in": "#13:188",
      "out": "#13:185",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:468",
      "@version": 1,
      "@class": "contain",
      "in": "#13:189",
      "out": "#13:184",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:469",
      "@version": 1,
      "@class": "contain",
      "in": "#13:190",
      "out": "#13:185",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:470",
      "@version": 1,
      "@class": "contain",
      "in": "#13:191",
      "out": "#13:189",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:471",
      "@version": 1,
      "@class": "contain",
      "in": "#13:192",
      "out": "#13:191",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:472",
      "@version": 1,
      "@class": "contain",
      "in": "#13:193",
      "out": "#13:191",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:473",
      "@version": 1,
      "@class": "contain",
      "in": "#13:194",
      "out": "#13:191",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:474",
      "@version": 1,
      "@class": "contain",
      "in": "#13:195",
      "out": "#13:189",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:475",
      "@version": 1,
      "@class": "contain",
      "in": "#13:196",
      "out": "#13:189",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:476",
      "@version": 1,
      "@class": "contain",
      "in": "#13:197",
      "out": "#13:189",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:477",
      "@version": 1,
      "@class": "contain",
      "in": "#13:198",
      "out": "#13:189",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:478",
      "@version": 1,
      "@class": "contain",
      "in": "#13:199",
      "out": "#34:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:479",
      "@version": 1,
      "@class": "contain",
      "in": "#13:200",
      "out": "#34:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:480",
      "@version": 1,
      "@class": "contain",
      "in": "#13:201",
      "out": "#34:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:481",
      "@version": 1,
      "@class": "contain",
      "in": "#13:202",
      "out": "#34:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:482",
      "@version": 1,
      "@class": "contain",
      "in": "#13:203",
      "out": "#34:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:483",
      "@version": 1,
      "@class": "contain",
      "in": "#13:204",
      "out": "#13:203",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:487",
      "@version": 1,
      "@class": "contain",
      "in": "#13:207",
      "out": "#13:206",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:488",
      "@version": 1,
      "@class": "contain",
      "in": "#13:208",
      "out": "#13:203",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:489",
      "@version": 1,
      "@class": "contain",
      "in": "#13:209",
      "out": "#13:203",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:490",
      "@version": 1,
      "@class": "contain",
      "in": "#13:210",
      "out": "#13:203",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:491",
      "@version": 1,
      "@class": "contain",
      "in": "#13:211",
      "out": "#13:203",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:492",
      "@version": 1,
      "@class": "contain",
      "in": "#13:206",
      "out": "#13:204",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:493",
      "@version": 1,
      "@class": "contain",
      "in": "#13:205",
      "out": "#13:204",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:494",
      "@version": 1,
      "@class": "contain",
      "in": "#13:205",
      "out": "#13:204",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:495",
      "@version": 1,
      "@class": "contain",
      "in": "#13:212",
      "out": "#13:203",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:496",
      "@version": 1,
      "@class": "contain",
      "in": "#13:213",
      "out": "#13:203",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:497",
      "@version": 1,
      "@class": "contain",
      "in": "#34:26",
      "out": "#28:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:498",
      "@version": 1,
      "@class": "contain",
      "in": "#13:214",
      "out": "#34:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:500",
      "@version": 1,
      "@class": "contain",
      "in": "#13:216",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:501",
      "@version": 1,
      "@class": "contain",
      "in": "#13:217",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:502",
      "@version": 1,
      "@class": "contain",
      "in": "#13:218",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:503",
      "@version": 1,
      "@class": "contain",
      "in": "#13:219",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:504",
      "@version": 1,
      "@class": "contain",
      "in": "#13:220",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:505",
      "@version": 1,
      "@class": "contain",
      "in": "#13:221",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:506",
      "@version": 1,
      "@class": "contain",
      "in": "#13:222",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:507",
      "@version": 1,
      "@class": "contain",
      "in": "#13:223",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:508",
      "@version": 1,
      "@class": "contain",
      "in": "#13:224",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:509",
      "@version": 1,
      "@class": "contain",
      "in": "#13:225",
      "out": "#13:224",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:510",
      "@version": 1,
      "@class": "contain",
      "in": "#13:226",
      "out": "#13:224",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:511",
      "@version": 1,
      "@class": "contain",
      "in": "#13:227",
      "out": "#13:224",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:512",
      "@version": 1,
      "@class": "contain",
      "in": "#13:228",
      "out": "#34:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:514",
      "@version": 1,
      "@class": "contain",
      "in": "#13:230",
      "out": "#13:229",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:515",
      "@version": 1,
      "@class": "contain",
      "in": "#13:231",
      "out": "#13:229",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:516",
      "@version": 1,
      "@class": "contain",
      "in": "#13:232",
      "out": "#13:229",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:517",
      "@version": 1,
      "@class": "contain",
      "in": "#13:233",
      "out": "#13:229",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:518",
      "@version": 1,
      "@class": "contain",
      "in": "#13:234",
      "out": "#13:229",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:519",
      "@version": 1,
      "@class": "contain",
      "in": "#13:229",
      "out": "#13:228",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:520",
      "@version": 1,
      "@class": "contain",
      "in": "#13:235",
      "out": "#13:228",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:522",
      "@version": 1,
      "@class": "contain",
      "in": "#13:236",
      "out": "#13:228",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:523",
      "@version": 1,
      "@class": "contain",
      "in": "#13:237",
      "out": "#13:228",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:524",
      "@version": 1,
      "@class": "contain",
      "in": "#13:238",
      "out": "#13:237",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:525",
      "@version": 1,
      "@class": "contain",
      "in": "#13:239",
      "out": "#13:237",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:526",
      "@version": 1,
      "@class": "contain",
      "in": "#13:240",
      "out": "#34:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:527",
      "@version": 1,
      "@class": "contain",
      "in": "#13:242",
      "out": "#34:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:528",
      "@version": 1,
      "@class": "contain",
      "in": "#13:241",
      "out": "#13:242",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:529",
      "@version": 1,
      "@class": "contain",
      "in": "#13:243",
      "out": "#13:241",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:530",
      "@version": 1,
      "@class": "contain",
      "in": "#13:244",
      "out": "#13:241",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:531",
      "@version": 1,
      "@class": "contain",
      "in": "#13:245",
      "out": "#13:241",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:532",
      "@version": 1,
      "@class": "contain",
      "in": "#13:246",
      "out": "#13:245",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:533",
      "@version": 1,
      "@class": "contain",
      "in": "#13:247",
      "out": "#13:245",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:534",
      "@version": 1,
      "@class": "contain",
      "in": "#13:248",
      "out": "#13:242",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:535",
      "@version": 1,
      "@class": "contain",
      "in": "#13:249",
      "out": "#34:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:536",
      "@version": 1,
      "@class": "contain",
      "in": "#13:250",
      "out": "#13:249",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:537",
      "@version": 1,
      "@class": "contain",
      "in": "#13:251",
      "out": "#13:250",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:538",
      "@version": 1,
      "@class": "contain",
      "in": "#13:252",
      "out": "#13:250",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:539",
      "@version": 1,
      "@class": "contain",
      "in": "#13:253",
      "out": "#13:250",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:540",
      "@version": 1,
      "@class": "contain",
      "in": "#13:254",
      "out": "#13:249",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:541",
      "@version": 1,
      "@class": "contain",
      "in": "#34:27",
      "out": "#28:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:542",
      "@version": 1,
      "@class": "contain",
      "in": "#13:255",
      "out": "#34:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:543",
      "@version": 1,
      "@class": "contain",
      "in": "#13:256",
      "out": "#34:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:544",
      "@version": 1,
      "@class": "contain",
      "in": "#13:257",
      "out": "#34:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:545",
      "@version": 1,
      "@class": "contain",
      "in": "#13:258",
      "out": "#34:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:546",
      "@version": 1,
      "@class": "contain",
      "in": "#13:259",
      "out": "#34:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:547",
      "@version": 1,
      "@class": "contain",
      "in": "#13:260",
      "out": "#34:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:548",
      "@version": 1,
      "@class": "contain",
      "in": "#13:261",
      "out": "#34:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:549",
      "@version": 1,
      "@class": "contain",
      "in": "#13:262",
      "out": "#13:261",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:550",
      "@version": 1,
      "@class": "contain",
      "in": "#13:263",
      "out": "#13:261",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:551",
      "@version": 1,
      "@class": "contain",
      "in": "#13:264",
      "out": "#13:261",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:552",
      "@version": 1,
      "@class": "contain",
      "in": "#25:324",
      "out": "#13:264",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#19:553",
      "@version": 1,
      "@class": "contain",
      "in": "#13:265",
      "out": "#13:261",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#21:8",
      "@version": 1,
      "@class": "produce",
      "in": "#16:57",
      "out": "#14:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#22:2",
      "@version": 1,
      "@class": "require",
      "in": "#16:19",
      "out": "#13:21",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:0",
      "@version": 1,
      "@class": "explain",
      "in": "#25:0",
      "out": "#13:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:2",
      "@version": 1,
      "@class": "explain",
      "in": "#25:1",
      "out": "#13:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:3",
      "@version": 1,
      "@class": "explain",
      "in": "#17:1",
      "out": "#16:1",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:6",
      "@version": 1,
      "@class": "explain",
      "in": "#25:2",
      "out": "#14:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:8",
      "@version": 1,
      "@class": "explain",
      "in": "#25:3",
      "out": "#14:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:12",
      "@version": 1,
      "@class": "explain",
      "in": "#25:4",
      "out": "#13:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:23",
      "@version": 1,
      "@class": "explain",
      "in": "#17:8",
      "out": "#25:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:24",
      "@version": 1,
      "@class": "explain",
      "in": "#17:9",
      "out": "#25:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:25",
      "@version": 1,
      "@class": "explain",
      "in": "#25:7",
      "out": "#13:14",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:31",
      "@version": 1,
      "@class": "explain",
      "in": "#25:9",
      "out": "#14:7",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:32",
      "@version": 1,
      "@class": "explain",
      "in": "#25:10",
      "out": "#14:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:33",
      "@version": 1,
      "@class": "explain",
      "in": "#25:11",
      "out": "#13:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:39",
      "@version": 1,
      "@class": "explain",
      "in": "#25:14",
      "out": "#14:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:41",
      "@version": 1,
      "@class": "explain",
      "in": "#25:15",
      "out": "#14:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:50",
      "@version": 1,
      "@class": "explain",
      "in": "#25:17",
      "out": "#13:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:54",
      "@version": 1,
      "@class": "explain",
      "in": "#25:19",
      "out": "#13:21",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:55",
      "@version": 1,
      "@class": "explain",
      "in": "#25:20",
      "out": "#13:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:56",
      "@version": 1,
      "@class": "explain",
      "in": "#25:21",
      "out": "#14:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:57",
      "@version": 1,
      "@class": "explain",
      "in": "#25:22",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:59",
      "@version": 1,
      "@class": "explain",
      "in": "#25:23",
      "out": "#14:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:62",
      "@version": 1,
      "@class": "explain",
      "in": "#25:24",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:67",
      "@version": 1,
      "@class": "explain",
      "in": "#25:26",
      "out": "#14:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:69",
      "@version": 1,
      "@class": "explain",
      "in": "#25:25",
      "out": "#14:18",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:70",
      "@version": 1,
      "@class": "explain",
      "in": "#25:27",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:74",
      "@version": 1,
      "@class": "explain",
      "in": "#25:29",
      "out": "#14:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:75",
      "@version": 1,
      "@class": "explain",
      "in": "#25:30",
      "out": "#13:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:77",
      "@version": 1,
      "@class": "explain",
      "in": "#25:31",
      "out": "#14:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:78",
      "@version": 1,
      "@class": "explain",
      "in": "#25:32",
      "out": "#14:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:79",
      "@version": 1,
      "@class": "explain",
      "in": "#25:33",
      "out": "#13:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:80",
      "@version": 1,
      "@class": "explain",
      "in": "#25:34",
      "out": "#13:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:81",
      "@version": 1,
      "@class": "explain",
      "in": "#25:35",
      "out": "#13:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:85",
      "@version": 1,
      "@class": "explain",
      "in": "#25:36",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:89",
      "@version": 1,
      "@class": "explain",
      "in": "#25:37",
      "out": "#13:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:92",
      "@version": 1,
      "@class": "explain",
      "in": "#25:38",
      "out": "#13:35",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:93",
      "@version": 1,
      "@class": "explain",
      "in": "#25:39",
      "out": "#13:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:97",
      "@version": 1,
      "@class": "explain",
      "in": "#25:40",
      "out": "#14:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:98",
      "@version": 1,
      "@class": "explain",
      "in": "#25:41",
      "out": "#14:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:99",
      "@version": 1,
      "@class": "explain",
      "in": "#25:42",
      "out": "#13:37",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:101",
      "@version": 1,
      "@class": "explain",
      "in": "#25:43",
      "out": "#13:38",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:103",
      "@version": 1,
      "@class": "explain",
      "in": "#25:44",
      "out": "#13:39",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:104",
      "@version": 1,
      "@class": "explain",
      "in": "#25:45",
      "out": "#14:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:107",
      "@version": 1,
      "@class": "explain",
      "in": "#25:46",
      "out": "#14:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:108",
      "@version": 1,
      "@class": "explain",
      "in": "#25:47",
      "out": "#13:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:110",
      "@version": 1,
      "@class": "explain",
      "in": "#25:48",
      "out": "#14:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:114",
      "@version": 1,
      "@class": "explain",
      "in": "#25:49",
      "out": "#14:30",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:117",
      "@version": 1,
      "@class": "explain",
      "in": "#25:50",
      "out": "#14:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:120",
      "@version": 1,
      "@class": "explain",
      "in": "#25:51",
      "out": "#14:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:123",
      "@version": 1,
      "@class": "explain",
      "in": "#25:52",
      "out": "#14:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:125",
      "@version": 1,
      "@class": "explain",
      "in": "#25:53",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:126",
      "@version": 1,
      "@class": "explain",
      "in": "#25:54",
      "out": "#13:44",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:130",
      "@version": 1,
      "@class": "explain",
      "in": "#25:55",
      "out": "#14:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:131",
      "@version": 1,
      "@class": "explain",
      "in": "#25:56",
      "out": "#14:35",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:132",
      "@version": 1,
      "@class": "explain",
      "in": "#25:57",
      "out": "#14:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:134",
      "@version": 1,
      "@class": "explain",
      "in": "#25:58",
      "out": "#13:45",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:135",
      "@version": 1,
      "@class": "explain",
      "in": "#25:59",
      "out": "#14:38",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:136",
      "@version": 1,
      "@class": "explain",
      "in": "#25:60",
      "out": "#13:46",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:137",
      "@version": 1,
      "@class": "explain",
      "in": "#25:61",
      "out": "#13:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:140",
      "@version": 1,
      "@class": "explain",
      "in": "#25:62",
      "out": "#14:39",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:144",
      "@version": 1,
      "@class": "explain",
      "in": "#25:63",
      "out": "#13:48",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:145",
      "@version": 1,
      "@class": "explain",
      "in": "#25:64",
      "out": "#14:40",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:148",
      "@version": 1,
      "@class": "explain",
      "in": "#25:66",
      "out": "#14:41",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:149",
      "@version": 1,
      "@class": "explain",
      "in": "#25:67",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:152",
      "@version": 1,
      "@class": "explain",
      "in": "#25:68",
      "out": "#13:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:155",
      "@version": 1,
      "@class": "explain",
      "in": "#25:69",
      "out": "#14:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:158",
      "@version": 1,
      "@class": "explain",
      "in": "#25:12",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:159",
      "@version": 1,
      "@class": "explain",
      "in": "#25:13",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:160",
      "@version": 1,
      "@class": "explain",
      "in": "#25:70",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:161",
      "@version": 1,
      "@class": "explain",
      "in": "#25:71",
      "out": "#14:44",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:163",
      "@version": 1,
      "@class": "explain",
      "in": "#25:72",
      "out": "#14:45",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:164",
      "@version": 1,
      "@class": "explain",
      "in": "#25:73",
      "out": "#14:46",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:165",
      "@version": 1,
      "@class": "explain",
      "in": "#25:74",
      "out": "#14:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:166",
      "@version": 1,
      "@class": "explain",
      "in": "#25:75",
      "out": "#14:48",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:168",
      "@version": 1,
      "@class": "explain",
      "in": "#25:76",
      "out": "#13:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:170",
      "@version": 1,
      "@class": "explain",
      "in": "#25:79",
      "out": "#13:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:173",
      "@version": 1,
      "@class": "explain",
      "in": "#25:82",
      "out": "#13:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:174",
      "@version": 1,
      "@class": "explain",
      "in": "#25:5",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:175",
      "@version": 1,
      "@class": "explain",
      "in": "#25:6",
      "out": "#13:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:176",
      "@version": 1,
      "@class": "explain",
      "in": "#25:18",
      "out": "#13:60",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:177",
      "@version": 1,
      "@class": "explain",
      "in": "#25:83",
      "out": "#13:61",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:178",
      "@version": 1,
      "@class": "explain",
      "in": "#25:84",
      "out": "#13:62",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:179",
      "@version": 1,
      "@class": "explain",
      "in": "#25:85",
      "out": "#13:63",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:180",
      "@version": 1,
      "@class": "explain",
      "in": "#25:86",
      "out": "#13:64",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:181",
      "@version": 1,
      "@class": "explain",
      "in": "#25:87",
      "out": "#14:49",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:182",
      "@version": 1,
      "@class": "explain",
      "in": "#25:88",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:183",
      "@version": 1,
      "@class": "explain",
      "in": "#25:89",
      "out": "#13:66",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:184",
      "@version": 1,
      "@class": "explain",
      "in": "#25:90",
      "out": "#14:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:185",
      "@version": 1,
      "@class": "explain",
      "in": "#25:91",
      "out": "#13:68",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:186",
      "@version": 1,
      "@class": "explain",
      "in": "#25:92",
      "out": "#13:69",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:188",
      "@version": 1,
      "@class": "explain",
      "in": "#25:94",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:189",
      "@version": 1,
      "@class": "explain",
      "in": "#25:95",
      "out": "#14:52",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:190",
      "@version": 1,
      "@class": "explain",
      "in": "#25:96",
      "out": "#14:53",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:191",
      "@version": 1,
      "@class": "explain",
      "in": "#25:97",
      "out": "#14:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:192",
      "@version": 1,
      "@class": "explain",
      "in": "#25:98",
      "out": "#14:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:193",
      "@version": 1,
      "@class": "explain",
      "in": "#25:99",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:194",
      "@version": 1,
      "@class": "explain",
      "in": "#25:100",
      "out": "#14:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:195",
      "@version": 1,
      "@class": "explain",
      "in": "#25:101",
      "out": "#13:72",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:196",
      "@version": 1,
      "@class": "explain",
      "in": "#25:102",
      "out": "#13:73",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:197",
      "@version": 1,
      "@class": "explain",
      "in": "#25:103",
      "out": "#13:74",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:198",
      "@version": 1,
      "@class": "explain",
      "in": "#25:104",
      "out": "#14:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:199",
      "@version": 1,
      "@class": "explain",
      "in": "#25:105",
      "out": "#14:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:200",
      "@version": 1,
      "@class": "explain",
      "in": "#25:106",
      "out": "#14:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:203",
      "@version": 1,
      "@class": "explain",
      "in": "#25:107",
      "out": "#14:61",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:204",
      "@version": 1,
      "@class": "explain",
      "in": "#25:108",
      "out": "#14:62",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:205",
      "@version": 1,
      "@class": "explain",
      "in": "#25:109",
      "out": "#14:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:206",
      "@version": 1,
      "@class": "explain",
      "in": "#25:110",
      "out": "#14:64",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:207",
      "@version": 1,
      "@class": "explain",
      "in": "#25:111",
      "out": "#13:75",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:208",
      "@version": 1,
      "@class": "explain",
      "in": "#25:112",
      "out": "#13:76",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:209",
      "@version": 1,
      "@class": "explain",
      "in": "#25:113",
      "out": "#13:77",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:210",
      "@version": 1,
      "@class": "explain",
      "in": "#25:114",
      "out": "#13:78",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:211",
      "@version": 1,
      "@class": "explain",
      "in": "#25:115",
      "out": "#13:80",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:212",
      "@version": 1,
      "@class": "explain",
      "in": "#25:116",
      "out": "#13:81",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:213",
      "@version": 1,
      "@class": "explain",
      "in": "#25:117",
      "out": "#13:82",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:214",
      "@version": 1,
      "@class": "explain",
      "in": "#25:118",
      "out": "#13:83",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:215",
      "@version": 1,
      "@class": "explain",
      "in": "#25:119",
      "out": "#13:84",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:216",
      "@version": 1,
      "@class": "explain",
      "in": "#25:120",
      "out": "#13:85",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:217",
      "@version": 1,
      "@class": "explain",
      "in": "#25:121",
      "out": "#13:86",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:218",
      "@version": 1,
      "@class": "explain",
      "in": "#25:122",
      "out": "#13:87",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:219",
      "@version": 1,
      "@class": "explain",
      "in": "#25:123",
      "out": "#13:88",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:220",
      "@version": 1,
      "@class": "explain",
      "in": "#25:124",
      "out": "#13:89",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:221",
      "@version": 1,
      "@class": "explain",
      "in": "#25:125",
      "out": "#13:90",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:222",
      "@version": 1,
      "@class": "explain",
      "in": "#25:126",
      "out": "#13:91",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:223",
      "@version": 1,
      "@class": "explain",
      "in": "#25:127",
      "out": "#13:92",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:224",
      "@version": 1,
      "@class": "explain",
      "in": "#25:128",
      "out": "#13:93",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:225",
      "@version": 1,
      "@class": "explain",
      "in": "#25:129",
      "out": "#13:94",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:226",
      "@version": 1,
      "@class": "explain",
      "in": "#25:130",
      "out": "#13:95",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:227",
      "@version": 1,
      "@class": "explain",
      "in": "#25:131",
      "out": "#13:96",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:228",
      "@version": 1,
      "@class": "explain",
      "in": "#25:132",
      "out": "#13:97",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:229",
      "@version": 1,
      "@class": "explain",
      "in": "#25:133",
      "out": "#13:98",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:230",
      "@version": 1,
      "@class": "explain",
      "in": "#25:134",
      "out": "#13:99",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:235",
      "@version": 1,
      "@class": "explain",
      "in": "#25:136",
      "out": "#13:100",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:236",
      "@version": 1,
      "@class": "explain",
      "in": "#25:137",
      "out": "#13:101",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:237",
      "@version": 1,
      "@class": "explain",
      "in": "#25:138",
      "out": "#13:102",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:238",
      "@version": 1,
      "@class": "explain",
      "in": "#25:139",
      "out": "#13:103",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:239",
      "@version": 1,
      "@class": "explain",
      "in": "#25:140",
      "out": "#13:104",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:240",
      "@version": 1,
      "@class": "explain",
      "in": "#25:141",
      "out": "#13:105",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:241",
      "@version": 1,
      "@class": "explain",
      "in": "#25:142",
      "out": "#13:106",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:242",
      "@version": 1,
      "@class": "explain",
      "in": "#25:143",
      "out": "#13:107",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:243",
      "@version": 1,
      "@class": "explain",
      "in": "#25:144",
      "out": "#13:108",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:244",
      "@version": 1,
      "@class": "explain",
      "in": "#25:145",
      "out": "#13:111",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:245",
      "@version": 1,
      "@class": "explain",
      "in": "#25:146",
      "out": "#14:60",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:246",
      "@version": 1,
      "@class": "explain",
      "in": "#25:147",
      "out": "#13:112",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:247",
      "@version": 1,
      "@class": "explain",
      "in": "#25:148",
      "out": "#13:41",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:248",
      "@version": 1,
      "@class": "explain",
      "in": "#25:149",
      "out": "#13:110",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:249",
      "@version": 1,
      "@class": "explain",
      "in": "#25:150",
      "out": "#13:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:250",
      "@version": 1,
      "@class": "explain",
      "in": "#25:151",
      "out": "#13:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:251",
      "@version": 1,
      "@class": "explain",
      "in": "#25:152",
      "out": "#13:113",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:252",
      "@version": 1,
      "@class": "explain",
      "in": "#25:16",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:253",
      "@version": 1,
      "@class": "explain",
      "in": "#25:153",
      "out": "#14:66",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:254",
      "@version": 1,
      "@class": "explain",
      "in": "#25:154",
      "out": "#14:67",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:255",
      "@version": 1,
      "@class": "explain",
      "in": "#25:155",
      "out": "#14:68",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:256",
      "@version": 1,
      "@class": "explain",
      "in": "#25:156",
      "out": "#14:69",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:257",
      "@version": 1,
      "@class": "explain",
      "in": "#25:157",
      "out": "#13:115",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:259",
      "@version": 1,
      "@class": "explain",
      "in": "#25:159",
      "out": "#34:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:260",
      "@version": 1,
      "@class": "explain",
      "in": "#25:160",
      "out": "#34:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:261",
      "@version": 1,
      "@class": "explain",
      "in": "#25:161",
      "out": "#34:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:262",
      "@version": 1,
      "@class": "explain",
      "in": "#25:162",
      "out": "#34:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:263",
      "@version": 1,
      "@class": "explain",
      "in": "#25:163",
      "out": "#34:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:264",
      "@version": 1,
      "@class": "explain",
      "in": "#25:164",
      "out": "#34:9",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:265",
      "@version": 1,
      "@class": "explain",
      "in": "#25:165",
      "out": "#14:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:266",
      "@version": 1,
      "@class": "explain",
      "in": "#25:166",
      "out": "#13:116",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:268",
      "@version": 1,
      "@class": "explain",
      "in": "#25:168",
      "out": "#34:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:269",
      "@version": 1,
      "@class": "explain",
      "in": "#25:167",
      "out": "#34:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:270",
      "@version": 1,
      "@class": "explain",
      "in": "#25:169",
      "out": "#34:5",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:271",
      "@version": 1,
      "@class": "explain",
      "in": "#25:170",
      "out": "#34:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:277",
      "@version": 1,
      "@class": "explain",
      "in": "#25:173",
      "out": "#13:119",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:278",
      "@version": 1,
      "@class": "explain",
      "in": "#25:174",
      "out": "#13:120",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:280",
      "@version": 1,
      "@class": "explain",
      "in": "#25:176",
      "out": "#13:122",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:281",
      "@version": 1,
      "@class": "explain",
      "in": "#25:177",
      "out": "#13:123",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:283",
      "@version": 1,
      "@class": "explain",
      "in": "#25:180",
      "out": "#13:125",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:284",
      "@version": 1,
      "@class": "explain",
      "in": "#25:181",
      "out": "#13:126",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:285",
      "@version": 1,
      "@class": "explain",
      "in": "#25:182",
      "out": "#13:127",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:288",
      "@version": 1,
      "@class": "explain",
      "in": "#25:184",
      "out": "#13:124",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:289",
      "@version": 1,
      "@class": "explain",
      "in": "#25:185",
      "out": "#13:128",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:290",
      "@version": 1,
      "@class": "explain",
      "in": "#25:186",
      "out": "#13:129",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:291",
      "@version": 1,
      "@class": "explain",
      "in": "#25:187",
      "out": "#13:130",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:292",
      "@version": 1,
      "@class": "explain",
      "in": "#25:188",
      "out": "#13:131",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:293",
      "@version": 1,
      "@class": "explain",
      "in": "#25:189",
      "out": "#13:133",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:294",
      "@version": 1,
      "@class": "explain",
      "in": "#25:190",
      "out": "#13:134",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:295",
      "@version": 1,
      "@class": "explain",
      "in": "#25:191",
      "out": "#13:135",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:296",
      "@version": 1,
      "@class": "explain",
      "in": "#25:192",
      "out": "#13:136",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:297",
      "@version": 1,
      "@class": "explain",
      "in": "#25:194",
      "out": "#13:137",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:298",
      "@version": 1,
      "@class": "explain",
      "in": "#25:196",
      "out": "#13:139",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:299",
      "@version": 1,
      "@class": "explain",
      "in": "#25:195",
      "out": "#13:138",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:300",
      "@version": 1,
      "@class": "explain",
      "in": "#25:197",
      "out": "#13:140",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:301",
      "@version": 1,
      "@class": "explain",
      "in": "#25:198",
      "out": "#13:141",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:302",
      "@version": 1,
      "@class": "explain",
      "in": "#25:199",
      "out": "#13:142",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:303",
      "@version": 1,
      "@class": "explain",
      "in": "#25:200",
      "out": "#13:143",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:304",
      "@version": 1,
      "@class": "explain",
      "in": "#25:201",
      "out": "#13:144",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:305",
      "@version": 1,
      "@class": "explain",
      "in": "#25:202",
      "out": "#13:145",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:306",
      "@version": 1,
      "@class": "explain",
      "in": "#25:203",
      "out": "#13:146",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:307",
      "@version": 1,
      "@class": "explain",
      "in": "#25:204",
      "out": "#13:147",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:308",
      "@version": 1,
      "@class": "explain",
      "in": "#25:205",
      "out": "#13:148",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:309",
      "@version": 1,
      "@class": "explain",
      "in": "#25:206",
      "out": "#13:149",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:310",
      "@version": 1,
      "@class": "explain",
      "in": "#25:207",
      "out": "#13:150",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:311",
      "@version": 1,
      "@class": "explain",
      "in": "#25:208",
      "out": "#13:151",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:312",
      "@version": 1,
      "@class": "explain",
      "in": "#25:209",
      "out": "#34:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:313",
      "@version": 1,
      "@class": "explain",
      "in": "#25:210",
      "out": "#13:153",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:314",
      "@version": 1,
      "@class": "explain",
      "in": "#25:211",
      "out": "#13:154",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:315",
      "@version": 1,
      "@class": "explain",
      "in": "#25:212",
      "out": "#13:155",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:316",
      "@version": 1,
      "@class": "explain",
      "in": "#25:213",
      "out": "#13:156",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:317",
      "@version": 1,
      "@class": "explain",
      "in": "#25:214",
      "out": "#13:157",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:318",
      "@version": 1,
      "@class": "explain",
      "in": "#25:215",
      "out": "#13:158",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:319",
      "@version": 1,
      "@class": "explain",
      "in": "#25:216",
      "out": "#13:152",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:320",
      "@version": 1,
      "@class": "explain",
      "in": "#25:217",
      "out": "#13:160",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:321",
      "@version": 1,
      "@class": "explain",
      "in": "#25:218",
      "out": "#13:159",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:322",
      "@version": 1,
      "@class": "explain",
      "in": "#25:220",
      "out": "#13:162",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:323",
      "@version": 1,
      "@class": "explain",
      "in": "#25:221",
      "out": "#13:163",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:325",
      "@version": 1,
      "@class": "explain",
      "in": "#25:223",
      "out": "#13:165",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:327",
      "@version": 1,
      "@class": "explain",
      "in": "#25:224",
      "out": "#13:166",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:329",
      "@version": 1,
      "@class": "explain",
      "in": "#25:225",
      "out": "#13:167",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:330",
      "@version": 1,
      "@class": "explain",
      "in": "#25:226",
      "out": "#13:168",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:331",
      "@version": 1,
      "@class": "explain",
      "in": "#25:227",
      "out": "#13:169",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:332",
      "@version": 1,
      "@class": "explain",
      "in": "#25:228",
      "out": "#13:170",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:333",
      "@version": 1,
      "@class": "explain",
      "in": "#25:229",
      "out": "#13:171",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:334",
      "@version": 1,
      "@class": "explain",
      "in": "#25:230",
      "out": "#13:172",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:335",
      "@version": 1,
      "@class": "explain",
      "in": "#25:231",
      "out": "#13:173",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:336",
      "@version": 1,
      "@class": "explain",
      "in": "#25:232",
      "out": "#13:174",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:337",
      "@version": 1,
      "@class": "explain",
      "in": "#25:233",
      "out": "#13:175",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:338",
      "@version": 1,
      "@class": "explain",
      "in": "#25:234",
      "out": "#13:176",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:339",
      "@version": 1,
      "@class": "explain",
      "in": "#25:235",
      "out": "#13:177",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:340",
      "@version": 1,
      "@class": "explain",
      "in": "#25:236",
      "out": "#13:178",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:341",
      "@version": 1,
      "@class": "explain",
      "in": "#25:237",
      "out": "#13:164",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:342",
      "@version": 1,
      "@class": "explain",
      "in": "#25:238",
      "out": "#13:179",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:343",
      "@version": 1,
      "@class": "explain",
      "in": "#25:239",
      "out": "#13:180",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:344",
      "@version": 1,
      "@class": "explain",
      "in": "#25:240",
      "out": "#13:181",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:345",
      "@version": 1,
      "@class": "explain",
      "in": "#25:241",
      "out": "#13:182",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:346",
      "@version": 1,
      "@class": "explain",
      "in": "#25:242",
      "out": "#13:183",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:347",
      "@version": 1,
      "@class": "explain",
      "in": "#25:243",
      "out": "#34:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:348",
      "@version": 1,
      "@class": "explain",
      "in": "#25:244",
      "out": "#13:184",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:349",
      "@version": 1,
      "@class": "explain",
      "in": "#25:245",
      "out": "#13:185",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:350",
      "@version": 1,
      "@class": "explain",
      "in": "#25:246",
      "out": "#13:186",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:351",
      "@version": 1,
      "@class": "explain",
      "in": "#25:247",
      "out": "#13:187",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:352",
      "@version": 1,
      "@class": "explain",
      "in": "#25:248",
      "out": "#13:188",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:353",
      "@version": 1,
      "@class": "explain",
      "in": "#25:249",
      "out": "#13:189",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:354",
      "@version": 1,
      "@class": "explain",
      "in": "#25:250",
      "out": "#13:190",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:355",
      "@version": 1,
      "@class": "explain",
      "in": "#25:251",
      "out": "#13:191",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:356",
      "@version": 1,
      "@class": "explain",
      "in": "#25:252",
      "out": "#13:192",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:357",
      "@version": 1,
      "@class": "explain",
      "in": "#25:253",
      "out": "#13:193",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:358",
      "@version": 1,
      "@class": "explain",
      "in": "#25:254",
      "out": "#13:194",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:359",
      "@version": 1,
      "@class": "explain",
      "in": "#25:255",
      "out": "#13:195",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:360",
      "@version": 1,
      "@class": "explain",
      "in": "#25:256",
      "out": "#13:196",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:361",
      "@version": 1,
      "@class": "explain",
      "in": "#25:257",
      "out": "#13:197",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:362",
      "@version": 1,
      "@class": "explain",
      "in": "#25:258",
      "out": "#13:198",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:363",
      "@version": 1,
      "@class": "explain",
      "in": "#25:259",
      "out": "#13:199",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:364",
      "@version": 1,
      "@class": "explain",
      "in": "#25:260",
      "out": "#13:200",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:365",
      "@version": 1,
      "@class": "explain",
      "in": "#25:261",
      "out": "#13:201",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:366",
      "@version": 1,
      "@class": "explain",
      "in": "#25:262",
      "out": "#13:202",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:367",
      "@version": 1,
      "@class": "explain",
      "in": "#25:263",
      "out": "#13:203",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:368",
      "@version": 1,
      "@class": "explain",
      "in": "#25:264",
      "out": "#13:204",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:369",
      "@version": 1,
      "@class": "explain",
      "in": "#25:265",
      "out": "#13:205",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:370",
      "@version": 1,
      "@class": "explain",
      "in": "#25:266",
      "out": "#13:206",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:371",
      "@version": 1,
      "@class": "explain",
      "in": "#25:267",
      "out": "#13:207",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:372",
      "@version": 1,
      "@class": "explain",
      "in": "#25:268",
      "out": "#13:208",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:373",
      "@version": 1,
      "@class": "explain",
      "in": "#25:269",
      "out": "#13:209",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:374",
      "@version": 1,
      "@class": "explain",
      "in": "#25:270",
      "out": "#13:210",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:375",
      "@version": 1,
      "@class": "explain",
      "in": "#25:271",
      "out": "#13:211",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:376",
      "@version": 1,
      "@class": "explain",
      "in": "#25:272",
      "out": "#13:212",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:377",
      "@version": 1,
      "@class": "explain",
      "in": "#25:273",
      "out": "#13:213",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:378",
      "@version": 1,
      "@class": "explain",
      "in": "#25:274",
      "out": "#34:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:379",
      "@version": 1,
      "@class": "explain",
      "in": "#25:275",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:381",
      "@version": 1,
      "@class": "explain",
      "in": "#25:276",
      "out": "#13:217",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:382",
      "@version": 1,
      "@class": "explain",
      "in": "#25:277",
      "out": "#13:216",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:383",
      "@version": 1,
      "@class": "explain",
      "in": "#25:278",
      "out": "#13:218",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:384",
      "@version": 1,
      "@class": "explain",
      "in": "#25:279",
      "out": "#13:217",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:385",
      "@version": 1,
      "@class": "explain",
      "in": "#25:280",
      "out": "#13:220",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:386",
      "@version": 1,
      "@class": "explain",
      "in": "#25:281",
      "out": "#13:221",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:387",
      "@version": 1,
      "@class": "explain",
      "in": "#25:282",
      "out": "#13:222",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:388",
      "@version": 1,
      "@class": "explain",
      "in": "#25:283",
      "out": "#13:223",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:389",
      "@version": 1,
      "@class": "explain",
      "in": "#25:284",
      "out": "#13:224",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:390",
      "@version": 1,
      "@class": "explain",
      "in": "#25:285",
      "out": "#13:225",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:391",
      "@version": 1,
      "@class": "explain",
      "in": "#25:286",
      "out": "#13:226",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:392",
      "@version": 1,
      "@class": "explain",
      "in": "#25:287",
      "out": "#13:227",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:393",
      "@version": 1,
      "@class": "explain",
      "in": "#25:288",
      "out": "#13:214",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:394",
      "@version": 1,
      "@class": "explain",
      "in": "#25:289",
      "out": "#13:229",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:395",
      "@version": 1,
      "@class": "explain",
      "in": "#25:290",
      "out": "#13:230",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:396",
      "@version": 1,
      "@class": "explain",
      "in": "#25:291",
      "out": "#13:231",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:397",
      "@version": 1,
      "@class": "explain",
      "in": "#25:292",
      "out": "#13:232",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:398",
      "@version": 1,
      "@class": "explain",
      "in": "#25:293",
      "out": "#13:233",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:399",
      "@version": 1,
      "@class": "explain",
      "in": "#25:294",
      "out": "#13:234",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:400",
      "@version": 1,
      "@class": "explain",
      "in": "#25:295",
      "out": "#13:235",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:401",
      "@version": 1,
      "@class": "explain",
      "in": "#25:297",
      "out": "#13:236",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:402",
      "@version": 1,
      "@class": "explain",
      "in": "#25:298",
      "out": "#13:237",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:403",
      "@version": 1,
      "@class": "explain",
      "in": "#25:299",
      "out": "#13:238",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:404",
      "@version": 1,
      "@class": "explain",
      "in": "#25:300",
      "out": "#13:239",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:405",
      "@version": 1,
      "@class": "explain",
      "in": "#25:301",
      "out": "#13:240",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:406",
      "@version": 1,
      "@class": "explain",
      "in": "#25:301",
      "out": "#13:242",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:407",
      "@version": 1,
      "@class": "explain",
      "in": "#25:302",
      "out": "#13:241",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:408",
      "@version": 1,
      "@class": "explain",
      "in": "#25:303",
      "out": "#13:243",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:409",
      "@version": 1,
      "@class": "explain",
      "in": "#25:304",
      "out": "#13:244",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:410",
      "@version": 1,
      "@class": "explain",
      "in": "#25:305",
      "out": "#13:246",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:411",
      "@version": 1,
      "@class": "explain",
      "in": "#25:306",
      "out": "#13:247",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:412",
      "@version": 1,
      "@class": "explain",
      "in": "#25:307",
      "out": "#13:248",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:413",
      "@version": 1,
      "@class": "explain",
      "in": "#25:308",
      "out": "#13:249",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:414",
      "@version": 1,
      "@class": "explain",
      "in": "#25:309",
      "out": "#13:250",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:415",
      "@version": 1,
      "@class": "explain",
      "in": "#25:310",
      "out": "#13:251",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:416",
      "@version": 1,
      "@class": "explain",
      "in": "#25:311",
      "out": "#13:252",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:417",
      "@version": 1,
      "@class": "explain",
      "in": "#25:312",
      "out": "#13:253",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:418",
      "@version": 1,
      "@class": "explain",
      "in": "#25:313",
      "out": "#13:254",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:419",
      "@version": 1,
      "@class": "explain",
      "in": "#25:314",
      "out": "#34:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:420",
      "@version": 1,
      "@class": "explain",
      "in": "#25:315",
      "out": "#13:255",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:421",
      "@version": 1,
      "@class": "explain",
      "in": "#25:316",
      "out": "#13:256",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:422",
      "@version": 1,
      "@class": "explain",
      "in": "#25:317",
      "out": "#13:257",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:423",
      "@version": 1,
      "@class": "explain",
      "in": "#25:318",
      "out": "#13:258",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:424",
      "@version": 1,
      "@class": "explain",
      "in": "#25:319",
      "out": "#13:259",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:425",
      "@version": 1,
      "@class": "explain",
      "in": "#25:320",
      "out": "#13:260",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:426",
      "@version": 1,
      "@class": "explain",
      "in": "#25:321",
      "out": "#13:261",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:427",
      "@version": 1,
      "@class": "explain",
      "in": "#25:322",
      "out": "#13:262",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:428",
      "@version": 1,
      "@class": "explain",
      "in": "#25:323",
      "out": "#13:263",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#24:429",
      "@version": 1,
      "@class": "explain",
      "in": "#25:325",
      "out": "#13:265",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#25:0",
      "@version": 8,
      "@class": "Discussion",
      "in_explain": ["#24:0"],
      "Label": "OOP",
      "Body": "Objects and OOP is a core part of the Java programming language. \u000a<br>\u000aThe basis of this is that everything (except primitive types) in Java are objects which are the concrete implementation of classes.\u000aFor example Person might be a class, but if we have <code>Person p = new Person(\"Rick\");</code> then p is an implementation of a class and is thus an object of type Person. \u000a<br>\u000aThis means that each class should only correspond to one thing and contain all the data and methods required for it to operate. For example a program implementing accounting for a zoo may require an object to store the data and another to reload it from backing storage, an object for the data to be held in, an object for new data to be added, an object to display the currently requested data, an object for the UI etc... (these of course will vary depending on your implementation - this is an example, not a guide).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:1",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:2"],
      "Label": null,
      "Body": "Encapsulation is a way of ensuring the fields and methods related to certain object are held together in the one place. \u000aThis is closely related to the other principles of OOP and to Java's access control modifiers. \u000a<br>\u000aFurther note that in Java, unlike many other programming languages, all variables and fields must be within a class or within a method in a class.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:2",
      "@version": 7,
      "@class": "Discussion",
      "in_explain": ["#24:6"],
      "Label": null,
      "Body": "This is the act of controlling from where certain data can be accessed. This allows you to have data that can only be accessed from within an object or by anyone and control what properties are inherited. \u000a<br> \u000aIn Java this is done by 3 keywords:\u000a<ol>\u000a<li>public</li>\u000a<li>private</li>\u000a<li>protected</li>\u000a<li>package-private</li>\u000a</ol>\u000aThese keywords only apply to globally-scoped variables, and not to local variables since they cease to exist at the end of the method they are declared in.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:3",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:8"],
      "Label": null,
      "Body": "In programming it is good practice to limit the direct access to variables. This prevents them being accidentally (and silently) modified in the middle of a\u000aprogram. The convention in Java is to use Getters and Setters to allow the outside world access to it (if you want this ability, sometimes denying access it smarter). These also allow you to update multiple things at once, for example if you wanted to update a number and count the amount of times it has been updated. \u000a<br>\u000aThese are usually\u000aproduced by your IDE so you don\u2019t have to do it manually.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:4",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:12"],
      "Label": null,
      "Body": "The scope of a variable is the brackets in which it is declared and any brackets nested within (this excludes method calls). This means that for loops, if statements and similar all create a new scope.\u000aEach level of scope can repeat all the names of variables once more, to tell them apart the higher scoped variable can be referred to with 'this.varName'.\u000a\u000aTechnically a new inner level of scope can be put arbitrarily within methods but this is inadvisable.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:5",
      "@version": 10,
      "@class": "Discussion",
      "in_explain": ["#24:174"],
      "Label": null,
      "Body": "Classes are like recipes -- they tell you what the end result (an Object) consists of. \u000a<br>\u000aMore formally a class is a collection of related data and methods that can be performed on that data. Simplified a class is a collection of variables and instructions. \u000a<br>\u000aWhen we create a concrete implementation of this class we are creating an Object. \u000a<p>\u000aAn <b>abstract</b> class is a class that cannot be instantiated (ie objects cannot be of this type). These can contain everything a regular class can but also can include abstract methods (methods with no body - and a semicolon in place of the brackets) which will have to be implemented by any child class.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:6",
      "@version": 16,
      "@class": "Discussion",
      "in_explain": ["#24:175"],
      "out_explain": ["#24:23", "#24:24"],
      "Label": null,
      "out_appear": ["#27:6", "#27:7"],
      "Body": "This structure can be thought of as an agreement; when a class implements an interface that class is agreeing to implement the methods defined in the interface, but makes no guarantees as to how or whether it will implement additional methods.<br>\u000aA class that implements an interface must implement all methods declared in that interface, or if a class implements multiple interfaces then it must implement all methods declared in all of those interfaces. An interface may contain:<br>\u000a<ul>\u000a  <li>Methods (implicitly public but may also be abstract, static or default)</li>\u000a  <li> Constant attributes (implicitly public static final)</li>\u000a</ul>\u000aThese are a very useful form of abstraction in Java. They are used to guarantee methods are available in multiple classes, and are commonly used in APIs. To declare an interface in Java you use the interface keyword in place of where a class would be in a class declaration. By convention these are named with the following rules:<br>\u000a<ul>\u000a  <li>Begin with a capital letter</li>\u000a  <li>End with the word 'Interface'</li>\u000a</ul>\u000a\u000aThere are two small things omitted from above because of their rarity of use, but in Java Interfaces may contain method bodies if the method is static or contains the 'Default' keyword in its signature.\u000a<br>\u000aFurther Interfaces can be the type of a variable but they cannot be the implementation of a variable. For example <code>List&lt;T&gt;</code> is an interface and we are allowed to have <code>List&lt;String&gt; strings;</code> but we cannot instantiate this list to type <code>List&lt;String&gt;</code>.",
      "@fieldTypes": "in_explain=g,out_explain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#25:7",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:25"],
      "Label": null,
      "Body": "A package is a folder of Java classes, interface (and other legal high-level types) that are related to one-another.\u000a<br>\u000aThe <b>first</b> line of any class, interface (or legal type) within a package must be: <code>package nameOfPackage;</code>.\u000a<br>\u000aPackages may contain other packages (and periods are used in place of slashes, so package1.package2 and not package1/package2).\u000a<br>\u000aTo use a class, method, interface (or other) in another package it must be imported using <code>import nameOfPackage; </code> outside of the class declaration.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:9",
      "@version": 13,
      "@class": "Discussion",
      "in_explain": ["#24:31"],
      "Label": null,
      "Body": "Methods are a sets of instructions that can be carried out upon an object (unless they are static methods which serve a different purpose).\u000a<br>\u000aWhen we have an Object we use the dot notation to invoke methods upon it: <code>obj.doStuff();</code>\u000a<br>\u000aWe are allowed to invoke methods upon the class itself, but those are covered in our discussion of the 'static' keyword.\u000a<br>\u000aMethods themselves may contain other methods or their own variables (these only exist within this method).\u000a<br>\u000a<pre>\u000apublic void method(){\u000a\u0009int myInt = 3;\u000a\u0009myOtherMethod(myInt); //This method must exist in the same class\u000a}\u000aIf a method exists within the same class we can invoke it without using the dot operator. \u000a</pre>\u000a<br>\u000aMethods are also allowed to return values at the end of their execution.\u000a<br>\u000a<pre>\u000apublic int double(int a){\u000a\u0009return 2*a;\u000a}\u000a</pre>\u000a<br>\u000aWe are allowed to do this such as:\u000a<br>\u000a<pre>\u000apublic void method(){\u000a\u0009int myInt = 72;\u000a\u0009int doubleMyInt = double(myInt); //Will have the value 144\u000a}\u000a</pre>\u000a<br>\u000aIn these examples we have passed values into the methods. A discussion of how they are passed is discussed in Object and Primitive types.\u000a<br>\u000aBy passing a parameter we make that parameter within \"scope\" (ie usable within the method) of the method. In the above examples we passed in an integer, which was then doubled for us. This allows us to use the same method for multiple different values. This means the following is legal (and suggested):\u000a<pre>\u000apublic void method(int myFirstInt){\u000a\u0009int mySecondInt = 102;\u000a\u0009int doubleMyFirstInt = double(myFirstInt); //Has value 10\u000a\u0009int doubleMySecondInt = double(mySecondInt) //has value 204\u000a}\u000a</pre>\u000aIf we have an Object which can invoke method we would do it in the following way: <code>obj.method(5);</code> which would give the value 5 into the method. \u000a<br>\u000aThis dramatically reduces duplicated code, and improves readability.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:10",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:32"],
      "Label": null,
      "Body": "The main method is a special method that is ALWAYS executed first. <br>\u000a  <pre>\u000apublic static void main(String[] args){\u000a\u0009//Do stuff\u000a}\u000a</pre>\u000a<br>\u000aThis has a parameter which is the array of strings passed into it when it is executed (if executed from command line).\u000a<br>\u000aThe maximum of these allowed is 1. \u000a<br>\u000aNote: In post-Java 8 code you may see String.. args in place of String[] args. This is using variable argument amounts (varargs) and is less specific than String[].",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:11",
      "@version": 7,
      "@class": "Discussion",
      "in_explain": ["#24:33"],
      "Label": null,
      "Body": "Variables are able to be thought of as as a box. We are allowed to put things inside the box and we are able to manipulate anything inside the box. \u000a<p>\u000aJava puts some requirements on the box, firstly we must tell it what it is we want to put in the box (this is the <b>type</b> of the variable) and secondly we need to tell it what the box will be called (the <b>variable name</b>). Java allows us in some cases to tell it who we will allow to access the box (the <b>access control modifier</b>) but this is discussed elsewhere. \u000a<p>\u000aIn more advanced terms: Java is a <i>statically typed language</i> that means Java must know the type of all variables at compile time. Other programming languages, such as Python, are <i>dynamically typed languages</i> which means that variables can change their type at runtime. \u000a<p>\u000aIn Java it is good practice to name your variables with <code>camelCase</code> unless it is a constant when it should be named in <code>ALL_CAPS_WITH_UNDERSCORES</code>.\u000a<p>\u000aThis section will discuss how to create variables, their types and what we can do with them.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:12",
      "@version": 12,
      "@class": "Discussion",
      "in_explain": ["#24:158"],
      "Label": null,
      "Body": "These are variables of types defined by Java itself (excluding collections and arrays which are reference types), these are the most basic data structures available and we can use them to store basic amounts of data or to construct more complex data structures. \u000a<br>\u000aThese contain data and <b>cannot</b> have methods invoked upon them using the dot operator. \u000a<br>\u000aPrimitive Types are as follows:\u000a<ul>\u000a<li>byte: 8-bit signed number</li>\u000a<li>short: 16-bit signed number</li>\u000a<li>int: 32-bit signed number</li>\u000a<li>long: 64-bit signed number</li>\u000a<li>float: 32-bit floating-point number</li>\u000a<li>double: 64-bit floating-point number</li>\u000a<li>boolean: 2 states: true or false</li>\u000a<li>char: 16-bit unsigned number corresponding to a UTF-16 character</li>\u000a</ul>\u000aThere are no other primitive types.\u000a<br>\u000aJava does not allow for numerical values to be unsigned.\u000a<p>\u000aWhen a primitive type is passed into a method a new copy is created for use within that method, the original will not be adapted in any way. Which is the opposite to how it is for reference types. Primitive types are passed by value.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:13",
      "@version": 11,
      "@class": "Discussion",
      "in_explain": ["#24:159"],
      "Label": null,
      "Body": "If a variable is not a primitive type then it is a reference type. These are called reference types because the variable itself holds a reference to an Object stored in memory. That is a very important distinction, a reference type variable <b>does NOT</b> hold an Object itself but a reference to an Object (each Object can have more than 1 pointer to it). What this means is that when we pass an Object into a method we are actually passing the reference so if we update the Object within a method we update the value which ALL  of the references get access to, <b>BUT</b>  we can update the reference to hold a reference to a new Object without (necessarily) affecting the Object itself. To demonstrate this:\u000a<code>\u000aFish newlyCaught = new Salmon(30.1);\u000aFish backUpVariable = newlyCaught;\u000a\u000apublic static void discardInEdibleParts(Salmon s){\u000a    s.weight -= 1.3;\u000a}\u000a</code>\u000aGiven this set up when we do:\u000a<code>\u000aSalmon.discardInEdibleParts(newlyCaught);\u000a</code>\u000aThis updates the Object that newlyCaught and backUpVariable are pointing to. This means that if we were to access their weight:\u000a<code>\u000aSystem.out.println(\"Var 1: \" + newlyCaught.weight + \" Var 2: \" + backUpVariable.weight);\u000a</code>\u000aWe would get the set answer of <b>28.8</b> because the Object itself was updated within the method. \u000aWhat is happening here is that in Java Objects are passed by reference into methods and not by value (which would create a duplicate Object).\u000a<p>\u000aThis has a few side effects, firstly <b>ALL</b> reference type variables may have the value <b>null</b> which we may need to check for. Secondly that we cannot use the assignment operator to compare the value of reference types as we could with primitive types since this would check that they are pointing to the same Object and not that the two Objects are equivalent (generally we override isEqual/compareTo for this).\u000a<p>\u000aAll user created classes will be stored in Reference types as well as Strings and Arrays.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:14",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:39"],
      "Label": null,
      "Body": "Arrays are a reference type data structure built into the language itself. These are similar to a \"list\" of data of the same type, but the size of this \"list\" cannot change after it has been declared.\u000a<br>\u000aIn Java, like most programming languages, arrays are indexed from 0 and not from 1.\u000a<br>\u000aArrays can be thought of as pointing to the first item of the array since data will be stored sequentially. This means that arrays can hold pointers to other arrays giving us 2 (or more) dimensional arrays, similar to an array of arrays (but with convenient properties).\u000a<br>\u000aNote that like all reference types using the assignment operator to assign some array equal to another will just copy the pointer to the array and not the array itself. Java has built in <code>deepCopy()</code> method for making one array be an exact copy of another.\u000a<p>\u000aThere is 1 thing that is not immediately obvious. An Array of Objects holds a list of references to Objects and not the Objects themselves! Care should be taken when using mutable types in Arrays.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:15",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:41"],
      "Label": null,
      "Body": "Strings are a special case of reference type. They are built into the language itself and get special properties because of that, but otherwise they are the same as all other reference types (can have null value, can invoke methods etc.).\u000a<br>\u000aStrings are similar to an array of characters. The only small difference is that Strings are immutable which means they cannot be updated after they have been initialised. Fortunately the compiler will handle String concatenation and updating in a special manner for you, but often it might be worth using a StringBuilder instead of many concatenations.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:16",
      "@version": 13,
      "@class": "Discussion",
      "in_explain": ["#24:252"],
      "Label": null,
      "Body": "Other than the access control modifiers Java has a few other variable modifying keywords. The most common are:\u000a<ul>\u000a<li>final</li>\u000a<li>abstract</li>\u000a<li>static</li>\u000a</ul>\u000a<p>\u000a\u000aThese go before the type.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:17",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:50"],
      "Label": null,
      "Body": "JavaDoc is a built-in form of documentation for the Java programming language. This is partially responsible for Java's popularity since its inception, unlike most other programming languages Java does not separate commenting from its code.\u000a<br>\u000aThe common and most used of its keywords are:\u000a<ul>\u000a  <li>@author - tells you who wrote it</li>\u000a  <li>@date - when it was written</li>\u000a  <li>@param - what and why a parameter is required</li>\u000a  <li>@return - what is returned from the method</li>\u000a</ul>\u000aThere are many others.\u000a<br>\u000aJavaDoc can be applied to anything in Java including classes, interfaces, methods and fields. All JavaDoc comments begin with /** and end with */.\u000a<br>\u000aNote: This is different from a multi-line comment which is /* */.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:18",
      "@version": 8,
      "@class": "Discussion",
      "in_explain": ["#24:176"],
      "Label": null,
      "Body": "Comments that are not public facing (non-JavaDoc) should only explain complicated and non-obvious parts of your code. They should be used to understand how and why something is done in the manner that it is done in. \u000aThese are done to make it easier to understand what is happening in the program, and to help maintain your code if you were working as part of a team.\u000a<br>\u000aSinge line comments:<code> //Comment here</code><br>\u000aMultiple line comments: <code>/* Comment here */</code><br>\u000aJavaDoc: <code>/** JavaDoc here */</code>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:19",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:54"],
      "Label": null,
      "Body": "The ultimate aim of programming is to create a high-quality and easily maintainable product that works. This means that your code must be easy to understand.\u000a<br>\u000aA few general rules are:\u000a<ol>\u000a <li> Avoid single-letter variables unless for loops</li>\u000a  <li>Maintain a consist naming convention</li>\u000a  <li>Make methods' names specific and make methods do only one thing</li>\u000a <li>Do Not Repeat Yourself (DRY) -- abstract out detail!</li>\u000a <li> Have appropriate commenting and use JavaDocs!</li>\u000a</ol>\u000a<p>\u000aThe best code is often the most understandable code. Yet sadly there is no list of things to do and things to avoid, but your could should be as understandable as possible.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:20",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:55"],
      "Label": null,
      "Body": "Java is compiled down to Java Byte Code which will be interprted by the JVM (Java Virtual Machine) which will then be executed on your computer. This forms\u000athe basis for Java's \"Write once, run everywhere\" paradigm.\u000a<br>\u000aJava is not the only programming language that compiles to Java Byte Code, other examples include Groovy and Kotlin.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:21",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:56"],
      "Label": null,
      "Body": "The constructor is a special kind of method invoked when an object is instantiated (created). This is used to reserve enough memory for the entire object and to optionally assign default values to its members.\u000aConstructors must have the same name as class itself. \u000a<br>\u000aClasses generally have an implicit no args constructor (this excludes subclasses).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:22",
      "@version": 7,
      "@class": "Discussion",
      "in_explain": ["#24:57"],
      "Label": null,
      "Body": "Inheritance is a fundamental concept in OOP. It allows you to minimise duplicated code by allow classes that are similar to share code and data structures from one to another. \u000a<p>\u000aJava does this using the <code>extends</code> keyword. That is to say a subclass extends a superclass. The subclass inherits methods and data structures from the superclass - the subclass is an extension of the superclass.\u000a<p>\u000aIn Java all classes implicitly extend the <code>Object</code> class, and we are limited to extending at most 1 superclass per class (excluding Object).\u000a<br>\u000aWe are allowed to chain inheritance. If we have the following classes: Animal, Person, Student then Person can inherit from Animal, and Student can inherit from Person. This means that any methods in Animal are also in Person.\u000a<p>\u000aIn the subclass we have all non-private methods and fields (excluding constructors) from the superclass which can be treated as if they were in the subclass too.\u000a<p>\u000aFinally a class that is declared <b>final</b> cannot have any subclasses - it is the final class in its hierarchy.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:23",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:59"],
      "out_explain": [],
      "Label": null,
      "Body": "When we have a method in a superclass we may wish for it to operate slightly different in our subclass, a common example of this is <code>toString()</code> from java.lang.Object. This is called Overriding. \u000a<br>\u000aWe create a more precise version of the method in the subclass and this will be the method invoked by that name.\u000a<br>\u000aSome rules do apply: we are not allowed to override the same method twice in one class (as normal we cannot have duplicate method signatures) and we cannot change its return type or parameters (if we do this creates a new method and may cause errors if done incorrectly).\u000a<br>\u000aN.B: Often we denoted methods we override with the annotation <code>@Override</code>, you do not need to do this, but many people do.",
      "@fieldTypes": "in_explain=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:24",
      "@version": 11,
      "@class": "Discussion",
      "in_explain": ["#24:62"],
      "Label": null,
      "Body": "The for loop is used to repeat a section of code a fixed number of times. This can also be used to iterate over a data structure in the Collections framework or an array as an enhanced for loop. The for statement consists of three parts in parenthesise separated by semi-colons:\u000a<ol>\u000a<li>variable to iterate over</li>\u000a<li>the termination condition</li>\u000a<li>the action to be performed on that variable at the end of each time around the loop</li>\u000a</ol>\u000a<br>\u000aFollowed by the section of code to be performed at each new value surrounded by normal code block parenthesis.\u000aBy convention the variable is usually a single letter i but any otherwise legal name will compile.\u000a<br>\u000aThese are incredibly useful for iterating over a collection (in a for each loop) or when you need to iterate for a known number of times (such as 10, 15, 2*n etc.).\u000a<br>\u000a<br>\u000a<b> For Each Loop </b>\u000a<br>\u000aThe 'For Each' loop in Java is an extension of the 'For' loop. \u000aIt is used when we wish to iterate through each element of a data structure and do not care for its position in the data structure.\u000a<br>\u000aThis will only work for data structures that implement the Iterable interface (which is all Java Collections and Arrays), plus you can design it to work for any custom data structures.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:25",
      "@version": 7,
      "@class": "Discussion",
      "in_explain": ["#24:69"],
      "Label": null,
      "Body": "A while loop is used to repeat a section of code 0 or more times until a certain condition is met. A while loop consists of the while keyword followed by a parenthesis containing the condition to be checked and the code in normal code brackets afterwards. This condition is checked <b>before</b> each execution of the while loop.\u000a<br>\u000aThese are useful when you need to loop until a certain condition is met which could occur arbitrarily.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:26",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:67"],
      "Label": null,
      "Body": "A while loop is used to repeat a section of code 1 or more times until a certain condition is met. In contrast to both a for loop and a do while loop.\u000aA do while loop consists of the do keyword followed the code to be executed in normal code brackets immediately followed by a parenthesis containing the condition to be checked ending with a semi-colon. This condition will be checked at the <b>end</b> of each execution of the code.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:27",
      "@version": 7,
      "@class": "Discussion",
      "in_explain": ["#24:70"],
      "Label": null,
      "Body": "The If-statement is used to execute a certain section of code <b>if</b> a specific logical expression resolves to true.\u000aThese consist of the <pre>if</pre> keyword followed by parenthesis containing the <b>logic</b> to be evaluated and then the code to execute if it all resolves to true.\u000a<br>\u000aFor this it is important to not confused 'resolves to true' from true. If x = 3, then \"x not equal 5\" would resolve to true despite x = 5 being false because it is <b>true</b> to say that 3 does not equal 5. \u000a<br>\u000aThe 'else' statement after the closing parenthesis is used to execute an alternate section of code if the conditional is resolved to false. These typically go directly after the closing parenthesis to avoid errors but technically do not have to.\u000a<br>\u000aAnything can go after an else statement, but if it is not a code block then it is usually another 'if statement' which forms an <pre>else if</pre> statement.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:28",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": [],
      "Label": null,
      "Body": "Anything can go after an else statement, but if it is not a code block then it is usually another 'if statement'.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:29",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:74"],
      "Label": null,
      "Body": "Switch and case are used to avoid having incredibly larger and complex if and else if statements.\u000aTheir strength is when you have a variable that can be a larger amount of exact values.\u000a<br>\u000aFurther its syntax is very simple; <code>switch(var){ case val: //do stuff} </code>with only a few additional things to be noted.\u000a<br>\u000aFirstly that 'default' is a reserved label which is to be executed if no other label is correct.\u000a<br>\u000aSecondly that the value must resolve to an exact value and not a range (there are ways to circumvent this but they are not very maintainable and readable).\u000a<br>\u000aThirdly that each label must end with a <code>break;</code> to prevent a follow through (unless you want this behaviour).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:30",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:75"],
      "Label": null,
      "Body": "Java programs are not always executed linearly because of logic structures and method invoking. This can make programs execute differently from expected.\u000a<br>\u000aThere are also two special keywords that can be integrated into loops if they are useful:\u000a<br>\u000a<code>break</code> This will break you out of the loop you are in, but only the loop you are in (ie will not break out of nested loops, only the loop it is stated in).\u000a<br>\u000a<code>continue</code> This will finish this iteration immediately and move onto the next iteration without doing any code after it. These are implicit at the last line of a for loop but can be added elsewhere.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:31",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:77"],
      "Label": null,
      "Body": "JUnit is an automated unt-testing framework for Java programs. This will allow you to design tests for your methods individually and the programs as a whole which will be executed by JUnit. This allows you to easily\u000arerun tests when a method is modified to ensure it still works.\u000a<br>\u000aIt is good practice to put all JUnit tests in their own class.\u000aJUnit tests should:\u000a<br>\u000a<ol>\u000a <li>Have @test before the method declaration</li>\u000a  <li>Test ONLY ONE THING</li>\u000a <li>Be independent of each other, and the environment</li>\u000a<li>Have no parameters</li>\u000a</ol>\u000aJUnit is incredibly useful and flexible, more so than is demonstrated here. It is an incredibly useful and powerful tool and it is advised to be used as it will dramatically simplify testing of your program.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:32",
      "@version": 7,
      "@class": "Discussion",
      "in_explain": ["#24:78"],
      "Label": null,
      "Body": "Null is a special value that all reference types can have. This includes Strings and entries to Arrays of Objects (and the Arrays themselves). It means that not value is affiliated with a variable, not that the result is none. \u000a<p>\u000aThink of it like this: Who is the President of Britain? This would yield a <b>null</b> result because it doesn't make sense to ask who is the President of Britain since it isn't a presidential system.\u000aBut it does make sense to ask who is the President of France since France is a semi-presidential republic.\u000a<p>\u000aNull values introduce a common source of errors in programs (NullPointerExceptions) since you cannot deference a null value (this means you cannot manipulate it in any way such as accessing a value or invoking a method).\u000a<p>\u000aNulls are not \"none\" but that \"asking for a value doesn't make any sense\" because no value exists in the location you are accessing.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:33",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:79"],
      "Label": null,
      "Body": "In Java the following are Logical Operators:\u000a<table>\u000a<tr>\u000a<th>Symbol</th>\u000a<th>Meaning</th>\u000a</tr>\u000a<tr><td>></td><td>Greater Than</td></tr>\u000a<tr><td><</td><td>Less Than</td></tr>\u000a<tr><td>=<</td><td>Equal to or less than</td></tr>\u000a<tr><td>>= </td><td>Greater than or equal to</td></tr>\u000a<tr><td>== </td><td>Equal to</td></tr>\u000a<tr><td>!= </td><td>Not Equal to</td></tr>\u000a<tr><td>&& </td><td>AND</td></tr>\u000a<tr><td>|| </td><td>OR</td></tr>\u000a</table>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:34",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:80"],
      "Label": null,
      "Body": "When we discussed reference types we discussed that these variables hold a reference to an Object. What this means is that we cannot use the comparison operator to compare that two objects are equal, all we can test using it is if two reference variables point to the exact same object.\u000a<p>\u000aIf we want to compare that two objects are semantically equal we need to implement our own <code>equals()</code> or <code>deepEquals()</code> method (or <code>compareTo()</code>). Built in Java objects have these already done for us.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:35",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:81"],
      "Label": null,
      "Body": "Type Coercion (or Type Casting) is when you coerce a variable into pretending it is of another type. This is like putting duck eggs in a box for eggs - it's not strictly wrong to consider duck eggs as eggs but it is probably not why we have a box of eggs. \u000a<p>\u000aThis is a complicated topic with a few edges cases but it breaks down to:\u000a<p> <b>1. We cannot gain information doing coercion</b> \u000a<p> <b>2. Objects can only be coerced to a super type</b>\u000a<p> <b>3. Primitives can only be coerced to a similar type</b> e.g: we can coerce a double to an int. \u000a<p><b>4. There are two major types of coercion: Implicit and Explicit</b>\u000a\u000aWe should consider these each individually.<p>\u000a<b>1</b>  We can round 5.1 to 5 but we cannot round 5 to 5.1 because we don't know if 5 is equivalent to 5.1, but we can unsafely round 5 to 5.0. For example:\u000a<code>\u000aint a = 5;\u000adouble b = 5.1;\u000aint c = (int)b;\u000a</code>\u000aAt the end of this the variable c will have the value 5 since 5.1 is truncated to 5. Generally speaking this type of coercion is frowned upon unless absolutely necessary. \u000a<p>\u000a<b>2</b>  Consider the following situation we have a class Animal which has a subclasses Person and Dolphin. We are allowed to consider all Persons as Animals and all Dolphins as Animals too, but we cannot think of Persons as Dolphins. \u000a<code>\u000aPerson p = new Person();\u000aDolphin d = new Dolphin();\u000aAnimal a = p;\u000aAnimal b = d;\u000a</code>\u000aThis means we can consider these as Animals.\u000a<b>Warning: This is closely related to Late Binding and the methods may not be as you expect them to be.</b>\u000a<p>\u000a<b>3</b> A String (even one that contains just a number) cannot be cast to an int, it doesn't make sense. What if it didn't just contain a number? We can cast an int to a string though.\u000a<code>\u000aint a = 5;\u000aSystem.out.println(\"The message: \"+ a);\u000a</code>\u000a<p>\u000a<b>4</b> Explicit coercion is when we state the new type we want it to be,  Implicit is when we let the compiler guess - most IDEs will complain about this. The example in 1 is explicit, and the example in 2 is implicit.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:36",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:85"],
      "Label": null,
      "Body": "Late Binding is very closely related to both Type Coercion and Polymorphism.\u000a<br>\u000aLate Binding is a mechanism whereby the methods executed are decided at runtime, which might seem confusing since object types are declared at compile time. The compiler needs to know that a method exists but does not need to know what it does, where-as at runtime what the method does is very important. \u000a<br>\u000aIn Java the compiler will always invoke the most precise method it can, ie it will also invoke the method that is 'closest' (in the inheritance hierarchy) to the type of object, regardless of what type it is declared as.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:37",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:89"],
      "out_explain": [],
      "Label": null,
      "Body": "The instantiation type of a reference type may be different from the type that the variable is declared as, the object may be of any type which is a subclass of the type it is declared as.\u000a<br>\u000aThis means a variable can actually be of one type but treated as if it was another type.",
      "@fieldTypes": "in_explain=g,out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:38",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:92"],
      "Label": null,
      "Body": "Libraries can be thought of as a guarantee between the library (the collection of methods accessible within your program when imported) creator and you. They agree that there are certain functions that will do certain things but will not tell you how they are done (generally how they are done is unimportant to you).\u000a<br>\u000aCommon libraries include: Numpy, Matplotlib, Pylab, but there are hundreds of others which do a wide range of things including BeautifulSoup4 and nose.\u000a<br>\u000aThese are often pre-installed for you if you are using Anaconda, but if you are not you may need to look into Python's <a href=\"https://virtualenv.pypa.io/en/stable/\">virtualenv</a>.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:39",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:93"],
      "Label": null,
      "Body": "A function's arguments are the parameters that must be \"passed in\" (stated in the parenthesis when invoked). This is incredibly useful as it is more secure and flexible to have parameters passed in rather than relying on global variables. \u000a<br>\u000aThe basics are that the function's arguments must be declared in the function declaration in the parenthesis after the function name separated by commas. These are the names that they will be referred to as within that function and should be obvious what they are and what they do (eg: do not use 'a' but instead 'names' or 'list_of_names'). When the function is invoked the arguments must be given in the parenthesis where it is invoked in order - note that at this point they may be called ANYTHING, but will be referred to as the names given in the function definition within the function itself.  \u000a<br>\u000aFor an even more advanced user, Python has two types of arguments: required and optional. Optional arguments have their default value given in the function declaration using the normal assignment operator. It is also worth noting that in many functions you will see '*args' or '**kwargs' these are another sort of optional arguments but are signifying that the function can have an arbitrary amount of arguments.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:40",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:97"],
      "Label": null,
      "Body": "Python implements all the expected forms of arithmetic:\u000a<table>\u000a<tr><td>+</td><td>Addition</td></tr>\u000a<tr><td>-</td><td>Subtraction</td></tr>\u000a<tr><td>*</td><td>Multiplication</td></tr>\u000a<tr><td>/</td><td>Division</td></tr>\u000a<tr><td>**</td><td>Exponentation (eg: 2**3 = 8)</td></tr>\u000a<tr><td>%</td><td>Modulo</td></tr>\u000a</table>\u000a<br>\u000aThere are many APIs such as Numpy that can do more complex mathematics.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:41",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:98"],
      "Label": null,
      "Body": "Booleans are special values: True or False. Observe that True and False are distinct from the Strings \"True\" and \"False\"; booleans are specially built into the language and are treated differently.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:42",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:99"],
      "Label": null,
      "Body": "Comments are code that are ignored when the program is running. Comments should be used to explain why something is done which should make it easier for you to edit at a later date, for anyone marking your work or if this was a team project for other people to change and maintain your code.\u000a<br>\u000aIn Python these are denoted by either: \"#\" for single line comments or \"'''\" (triple quotes) for multi-line comments. \u000a<br>\u000aIt is also good practice to explain what all of your methods do directly after the method declaration in a multiline comment, as well as giving any useful information for someone to maintain your program.\u000a<br>\u000aComments can be added anywhere in your program and will be ignored at runtime.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:43",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:101"],
      "Label": null,
      "Body": "Programming languages have conventions to make it easier for programmers to work together and for it to be easier for programs to be maintained.\u000aThese are effectively \"rules\" that all Python programmers agree to follow to make it easier for each other. You are not obligated to follow these rules but it is generally frowned upon to not follow these rules.\u000a<br>\u000aSome of the rules are as follows:\u000a<ul>\u000a <li>Give useful variable names, eg: max_cars as opposed to var1 (exception being in very small scope, see Iterable for more)</li>\u000a <li>Name variables consistently, generally camelCase or names_with_underscores (latter is preferred for Python generally)</li>\u000a<li> Name methods consistently, generally names_with_underscores is used</li>\u000a</ul>\u000a<br>\u000aThere are many others, but the main thing is to have one rule and apply it consistently.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:44",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:103"],
      "Label": null,
      "Body": "Don't Repeat Yourself (DRY). DRY is a programming design principle that cautions against re-typing code and to replace it by function definitions. The real strength of this approach is that it is significantly easier to maintain - if you need to adjust code you only need to adjust it once in the function and it will automatically update all instances of its usage, but it also makes your programs significantly easier to read: a function name, such as get_largest_value(list), is easier to understand what it does. \u000aIf you find yourself repeating code or, worse, copying and pasting code you have to ask yourself \"why?\" and \"can I make this its own method?\".",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:45",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:104"],
      "Label": null,
      "Body": "<code>elif </code>(Else-if) is a keyword that is attached (typically) after an if-statement. It is a contraction of the 'else if (...):' syntax.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:46",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:107"],
      "Label": null,
      "Body": "Exception are a way to handle when something goes wrong. If we accidentally divide a String by an integer then we might want it to tell us we made a mistake and not crash the program, this is where Exceptions are used. Whenever an error that would crash the program occurs Python will generate an exception (called 'throwing an exception') which we are allowed to monitor for and active specific code when it occurs. \u000a<br>\u000aWe surround any code that we thing might cause an error with a \"try:\" block, and indent any code we thing may have an error that will occur. \u000aWe then \"catch\" our error with an <code>except Exception as e:</code> which will be executed when an error occurs. Normal scoping rules apply. \u000aException will catch all exceptions so it is generally good practice to narrow it down a little more. <b>Generally avoid catching \"Exception\" but narrow it down, eg TypeError</code>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:47",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:108"],
      "Label": null,
      "Body": "Files are an incredibly useful tool for storing data across multiple executions. Python makes it incredibly easy to both read, and write to files using the same function 'open', and allows you to assign them as a normal(ish) variable.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:48",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:110"],
      "Label": null,
      "Body": "Loops in Python and incredibly powerful and useful, and I would strongly recommend reading in-depth on them. By using loops properly you can speed up your program significantly and  write cleaner and more beautiful code.  \u000a<p>\u000aAt the simplest level a for loop is a repeat of a 'block' of code a known amount of times. \u000a<p>\u000aFor example we could want to print an message several times or we could want to update many items in a list. \u000a<p> \u000aPython allows us surprisingly many ways to do this. A particularly useful variant is what would typically be called the 'for each' loop; this allows us to iterate over every value in a data structure. This can be interpreted as 'for each item in our data structure'.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:49",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:114"],
      "Label": null,
      "Body": "Functions are blocks of code that may be executed many times during the runtime of the program, potentially with different inputs. They can be thought of as being very similar to mathematical functions. \u000a<br>\u000aThey consist of the keyword 'def' followed by a name that the function is to be called, any required inputs in parenthesis separated by commas, and finally a colon to signify the block of code that the function should execute when invoked (used).\u000a<br>\u000aThis code inside the function must be indented one more time than the function definition. \u000aFunctions are easy to invoke, simply type the name of the function with any required inputs in parenthesis after it, at any point in the program after where the function is declared.  \u000aPython, like most programming languages, comes packed with hundreds of functions built into its Standard Library that you are advised to used whenever appropriate rather than re-inventing the wheel.  \u000a<br>\u000aOften the term \"method\" is used. The difference being that methods are functions that are built into a class and are invoked using Object-Orientated programming paradigms.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:50",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:117"],
      "Label": null,
      "Body": "The if keyword is used to execute a certain section of code if a logical expression resolves to true, and potentially other code if false. This is very subtle language, for example if we let our x = 5 and computed \"x is not 6\" this is true, since 5 is not equal to 6. The logical operators are very conveniently close to natural English. Further we are allowed to chain many conditions using other keywords which are \"and\", and \"or\". \u000a<br>\u000aThese can be read as normal English. <code>\"if [variable] is [condition]: [code to execute]\".</code>\u000a<br>\u000aAll the same logical operators hold in if statements as they do everywhere else in Python, but do recall that after each conjunctive (ie each part separated by an and, or, or not) you need to restate what variable you are referring to.\u000a<br>\u000aInside the code executed by the if we can put other if statements (although this might be best suited to a switch statement) or at a the same indent level we can put an else statement which is a block of code to be executed if the first block is not executed (ie if the expression resolves to false).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:51",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:120"],
      "Label": null,
      "Body": "In Python your methods can only access methods and variables stored in the same file as it is, but you are able to tell Python at runtime to go get methods (and variables) from another file (called a library typically) and pretend they are in your current file.\u000a<br>\u000aThis is using the 'import' keyword.\u000a<br>\u000aOften the keyword <code>as</code> is used. This is to make clear where the methods are coming from and improve readability.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:52",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:123"],
      "Label": null,
      "Body": "Lists are a very useful and common data structure in Python. They hold a list of many (0 or more) data structures (ie you can have an Integer and a String in the same list but this is often a bad idea) including other lists. These are declared the same was any other variable (recall that variables do not have types themselves, but the data they hold do): <code>list_name = [notice,the,brackets]</code>\u000a<br>\u000aLists are like regular lists, items get added to the end  by default. In other languages these are very similar to ArrayLists (such as in Java or C#). \u000a<p>\u000aThere are many operations they can be operated on lists (lists are objects), such as append or remove. \u000a<p>\u000aThey also have special syntax to allow easy manipulation of lists, there are also incredibly powerful and useful methods, syntax and occurrences with lists they are omitted here but may be worth reading about in the resources section.\u000a<p>\u000aList are incredibly powerful and flexible data structure that allows random (non-sequential) access, not to be confused with Linked Lists which do not allow non-sequential access (and are not discussed here).  \u000a<p>\u000a<b>Note: The first element of a list is element number 0, not number 1 as may be expected.</b>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:53",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:125"],
      "Label": null,
      "Body": "Python is very unique in that it allows for its code logic to follow very similar to English, but does allow more formal logic to be applied if preferred.\u000a<table>\u000a<tr><td>not\u0009</td><td>negate</td></tr>\u000a<tr><td>is</td><td>equal (identity, eg are these LITERALLY the same thing)</td></tr>\u000a<tr><td>and</td><td> both parts are true</td></tr>\u000a<tr><td>or</td><td>either part is true</td></tr>\u000a<tr><td>==</td><td>equal for non-objects such as numbers (equality, eg are these the same value)/td></tr>\u000a<tr><td>!= </td><td>not-equal for non-objects</td></tr>\u000a</table>\u000a<br>\u0009\u000aIn addition to this any non-zero number is considered to be \"True\" and zero is considered to be \"False\".",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:54",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:126"],
      "Label": null,
      "Body": "Magic Constants (or manifest variables) values that are repeated but not stored in a single location. More specifically these are values that are derived from the same starting location by the same steps.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:55",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:130"],
      "Label": null,
      "Body": "Matplotlib is one of the many graphing libraries for Python. It is especially popular because of its PyPlot module.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:56",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:131"],
      "Label": null,
      "Body": "None is a special data type built into Python itself. It means that there is no value currently being stored at this variable.\u000a<p>\u000aThink of it like this: Who is the President of Britain? This would yield a <b>None</b> result because it doesn't make sense to ask who is the President of Britain since it isn't a presidential system. But it does make sense to ask who is the President of France since France is a semi-presidential republic.\u000a<p>\u000aAny variable may be None, and we cannot invoke methods upon them without creating an exception.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:57",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:132"],
      "Label": null,
      "Body": "Numpy is a library that is part of the SciPY group of libraries. It offers a wide range of mathematical functions not offered by Python's standard library. \u000a<br>\u000aThis library makes extensive use of Numpy arrays (despite arrays not being supported in Python) which are created using numpy.array(...).\u000a<br>\u000aLike all libraries it must be imported into Python first using: import numpy (or equivalent).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:58",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:134"],
      "Label": null,
      "Body": "OO (or OOP) is Object-Oriented programming, a programming paradigm that Python allows you to incorporate.\u000a<br> \u000aThe concept is that all data and methods are stored in a single thing, called an Object, to which you can invoke the methods upon to change the data. Python generally does not make extensive use of this, but occasionally you will have to manipulate Objects.\u000a<br>\u000aA method is invoked using \"object_variable.method_name()\", and variables (attributes) can be accessed using \"object_variable.attribute_name\".",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:59",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:135"],
      "Label": null,
      "Body": "Python makes it very easy to output text to the standard output (the terminal where the program is running).\u000a<br>\u000aThe basis of it is: <code>print \"Text to print here\"</code>\u000a<br>\u000aYou can insert variables into the output:\u000a<pre>\u000ascore = 5\u000aprint \"Your score is:\", score #Outputs \"Your score is: 5\"\u000a</pre>\u000aFor more complex expressions it is better to use a more sophisticated syntax (called formatters in Python):\u000a<pre>\u000a  score = 5\u000a  lives = 0\u000a  bonus = 3\u000a  print \"Your score is: %d. You now have %d lives, but you get %d bonus points!\" %(score, lives, bonus) #Outputs \"Your score is: 5. You now have 0 lives, but you get 3 bonus points!\"\u000a</pre>\u000a<br>\u000aIn Python 3 and above you may see print(\"text here\") instead, but this will not work on Python 2.7.  Additionally if you are running Python 3.1 or above (which may not be released yet) the <code>%s</code> method of formatting will no longer work.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:60",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:136"],
      "Label": null,
      "Body": "Python at its core focuses on being simple, but having a good appreciation of this simplicity will help you become a better programmer.\u000a<br>\u000aPython has always been an interpreted program, in layperson's language this means that the program is converted to machine instructions as it is ran and not before it is ran like most programs you would be familiar with.\u000a<br>\u000aThis is done to give the programmer a great degree of flexibility and freedom, but does come at a cost of its performance (although this has typically not to be concerned about).\u000aHence why the decision was made to have Python be a dynamically typed programming language, this means that the \"type\" of things are discovered at runtime; this is covered further in variables.\u000aFurther it aims to incorporate many styles of programming, giving you the ability to solve problems in an Object-oreintated manner, a functional manner or a declarative manner.\u000a<br>\u000aUnlike in most languages, Python indentations are incredibly important, in fact having the wrong level of indentation in code may stop it from working correctly. After each ':' the indentation should move inwards until you wish to end that block, which is done by entering code on the subsequent lines with the indentation being moved outwards. This may be better explained with examples where it is used.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:61",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:137"],
      "Label": null,
      "Body": "A recursive function is a function that invokes itself. These are very common in sorting algorithms but can be used anywhere.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:62",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:140"],
      "Label": null,
      "Body": "Functions would be useless if all we could do is invoke them and print data to screen - what if we wanted to use a value calculated by it elsewhere? What if we want a function to terminate early when a certain value is reached? This is where the return value is incredibly useful; it is used to send a value back when the function terminates. It is important to note that whilst you can return  multiple values (in a tuple) you cannot return more than once as the function execution will terminate upon reaching a return (as opposed to at the end of its code as normal).\u000aNo other changes are needed to the function.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:63",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:144"],
      "Label": null,
      "Body": "It is very important to test both your program and the methods therein the ensure they are functioning as expected and without any flaws unbeknownst to you. \u000a<br>\u000aThis can range from testing with some data as you are developing your program, to unit testing using unittest or nose, or even to continuous integration testing.\u000a<br>\u000aThere is a section on testing in the <b>Program Concepts</b> section of this resource.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:64",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:145"],
      "Label": null,
      "Body": "Tuples are an incredibly common data structure in Python. Tuples at a very basic level are just immutable lists (ie they cannot be edited after their creation). Their strength comes from being able to group together common data and also in returning multiple values from a function.\u000a<br>\u000aTuples can be \"unpacked\" which means to assign to a variable each part of a tuple.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:66",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:148"],
      "Label": null,
      "Body": "We can gather input from the user at runtime using the raw_input function.\u000a<br>\u000aIt is generally good practice not  to blindly trust that the user will not enter wrong or malicious data.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:67",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:149"],
      "Label": null,
      "Body": "Variables in Python should be thought of as the computer guaranteeing you a box; you have full control over what goes in the box, but if you tell someone you have a box of chocolates and actually have a box of scorpions they might be very upset with you.\u000a<br>\u000aIn formal language it is because Python is a dynamically typed programming language, this means that the 'types' of  variables (what is in the box) is determined whilst the programming is being ran and not before it.\u000a<br>\u000aThese are declared very easily and just by giving them a name and a value, as illustrated below.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:68",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:152"],
      "Label": null,
      "Body": "The 'scope' of a variable refers to how long it is stored in memory for. Variables can be split into two types: Global and Local.\u000a<br>\u000a<em>Global variables</em> exist everywhere within the file they are declared in, this means they can be used in any method or in any part of this program.\u000a<br>\u000aWhere-as <em>local variables</em>, variables declared in an indented section only exist within that method and can only be accessed from within that method. These cease to exist at the end of that method's invocation.\u000aIndentation is also used to define the scope of variables... Each indentation level creates its own scope, so a variable created from within a method, for loop, while loop, if statement, etc., can only be accessed from within that construct and not elsewhere.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:69",
      "@version": 9,
      "@class": "Discussion",
      "in_explain": ["#24:155"],
      "Label": "",
      "Body": "While statements are used to repeat a block of code indefinitely until a specific condition is met. This is in contrast to for loops which iterate for a fixed number of times, hence why while loops are used predominately when you do not know how many times you are required to loop for.\u000a<br>\u000aThis means that while loops are better for looping an unknown amount of times, but for loops are better for iterating over data structures and when the number of iterations is fixed. \u000a<br>\u000a<br>\u000aWhile loops are of the format:\u000a<pre>\u000awhile condition:\u000a\u0009#code to repeat indented once\u000a#this code is outside of the while loop\u000a</pre>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:70",
      "@version": 8,
      "@class": "Discussion",
      "in_explain": ["#24:160"],
      "in_contain": [],
      "Label": null,
      "Body": "The Java Collections Framework (found in <code>java.util</code>) is a framework which describes almost all data structures that you may require, each with a myriad of different properties. These have been specifically designed by teams of experts so operate (for the most part) far more efficiently than a custom made one would. \u000a<br>\u000aThese guarantee that where applicable all the collections will contain specific methods, such as a binary search or conversion to another type. \u000a<br>\u000aThe strength of collections is that you have an interface of methods that all data structures will implement. This gives you a lot of flexibility in implementing your programs. \u000a<br>\u000aCare should be taken with mutable types in collections, because much like Arrays of Objects these hold the reference to the Object itself and not the actual Object.\u000a<p>\u000aFurther note that you can only have reference types in the Java Collections Framework.",
      "@fieldTypes": "in_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:71",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:161"],
      "Label": null,
      "Body": "An Array List is very similar to an array, it has all the same properties with one caveat: it is not fixed size.\u000a<br>\u000aJava's ArrayLists can be initialised to a specific size and then expand as necessary, but these never take up less space than their array equivalent. Once declared elements can be added and removed at will. \u000a<br>\u000aArrayLists are incredibly useful when you require random access to an expanding data set, otherwise Arrays are better if you have a fixed number of elements because of their additional safety.\u000a<p>\u000aArrayLists are amortised to O(1) by doubling their size each time you reach the limit.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:72",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:163"],
      "Label": null,
      "Body": "A 'LinkedList' is a list like data structure where you can only move in one direction through the list, ie you have sequential and not random access. The advantages of a LinkedList is that adding data to this structure is very quick and efficient, although this comes as the cost of slow traversal if you need 'random' access. It can be costly and slow to add to anywhere not the beginning or the end so ensuring a sorted LinkedList can be very inefficient. \u000a<p>\u000aThis is best for when lots of data needs to be continually added, with rare access to the data and preferably sequential access to the data needed. \u000a<p>\u000aVery similar to the LinkedList is the Doubly-LinkedList which allows to traverse both directions (forward and backwards) is otherwise the exact same as a LinkedList but takes up more memory.\u000a<p>\u000aConfusingly all LinkedLists in Java are Doubly-LinkedLists.\u000a<p>\u000aLinkedLists give O(1) addition and deletion if you already have where it should be added, but otherwise O(n). They give O(n) traversal, and take up O(n) space.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:73",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:164"],
      "Label": null,
      "Body": "Maps in Java allow to you locate a specific <b>value</b> from a given <b>key</b>. In many other languages this is called a dictionary.  Each key can only map to <b>1</b> value.\u000a<p>\u000aOnce again this is an interface and the most commonly used implementation is a Hashtable that allows very efficient looks ups (formally O(1) average with O(n) worst case when you have a lot of collisions). \u000a<p>\u000aFormally this forms a function mapping an input value to an output key.",
      "out_appear": ["#27:86"],
      "@fieldTypes": "in_explain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#25:74",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:165"],
      "Label": null,
      "Body": "Unsurprisingly Java Sets are equivalent to mathematical sets, this means we are not allowed to have any duplicate elements.\u000aAs expected these are good for representing mathematical sets.\u000a<p>\u000aWhen using mutable types (such as Objects) it is important to note that these Objects will have their <code>equals()</code> method invoked. This means you cannot have two Objects that are the same but have different references. \u000a<p>\u000aThis also means that there is some undefined behaviour when a mutable type gets updated to equal another element in the set. Generally if this may happen it is not a Set you are looking for. \u000aFurther, Sets cannot contains themselves, but can contain other Sets. \u000a<p>\u000aThe Java Collections Framework defines Sets as an <b>Interface</b> which means you cannot have it instantiated, but there are many different Sets implementing this Interface such as TreeSet (ordered set) and HashSet (unordered set). For most purposes one of these two will work.\u000a<p>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:75",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:166"],
      "Label": null,
      "Body": "Arrays are allowed to contain other arrays of arbitrary length.\u000aNote that when you use the assignment operator ('=') to copy an array you are not copying the array but copying the pointer to the array in memory. \u000a<br>\u000aYou would need to use (or design) an appropriate deep-copy method to copy the values of the array and not the array itself.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:76",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:168"],
      "Label": null,
      "Body": "Software that does not work as expected is rather useless, thus why testing your program is incredibly important. Testing is covered in detail in the 'Design' section.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:78",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": [],
      "Label": null,
      "Body": "Typing instructions into an IDE to get a \"program\" to work is the easier part, it is significantly harder to write a good piece of software.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:79",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:170"],
      "Label": null,
      "Body": "Conditionals allow us to vary how the program behaves based upon the state (values) of certain inputs.\u000a<p>\u000aThese are the programming equivalent of the English sentence 'if x then y'.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:80",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": [],
      "Label": null,
      "Body": "All programs in Java must have its code (methods and attributes) within a high level type such as an Interface or Class.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:81",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": [],
      "Label": null,
      "Body": "Large-scale software spends far more time being maintained that it takes for it to be written originally. There are many cases of 20+ year old software still running today, so ensuring that your program is maintainable is of utmost importance.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:82",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:173"],
      "Label": null,
      "Body": "To iterate is to repeat a code block 0 or more times. There are several ways which we may want to use to decide on how often we should repeat a specific code block which are explained and discussed within.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:83",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:177"],
      "Label": null,
      "Body": "Probably the most common method of data storage in programming is to store data in a database. Therefore there are many different ways to do so and many different types of databases to store this data in.\u000a<br>\u000aThis attempts to covert some of the more common ways and databases but obviously cannot cover them all. That is not to suggest that the methods included here are inherently better than the rest, only more common and as such your mileage may vary depending on the problem you are attempting to solve.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:84",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:178"],
      "Label": null,
      "Body": "Java Persistence API is an ORM (Object-Relational mapping) implementation for Java. It allows you to treat data from a database as Objects within your program. \u000a<br>\u000aJPA requires that the Objects to be stored on the database have their class annotated with '@Entity'. This allows the EntityManager to correctly add them to the database. There are many other tags, for example, @id for the primary key. \u000aEntities must obey certain rules:\u000a<ol>\u000a<li>Must have no args constructor</li>\u000a<li>All fields must have getters and setters</li>\u000a<li>Must have a primary key</li>\u000a</ol>\u000a<br>\u000aFor the connection to work you must have a Map containing all the necessary properties to create the EntityManager. The EntityManager uses the factory design pattern for its creation. Hence step 1 is to create an EntityManagerFactory to create our EntityManager. We then need to begin a transaction where we can operate on our Objects and then persist any Objects we wish to.\u000a<br>\u000aOverall JPA is used to reduce programming time, but is a little less flexible than JDBC and can be found in javax.persistence.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:85",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:179"],
      "Label": null,
      "Body": "Java Database Connectivity is an API designed by Oracle which allows a programmer to connect to a remote database server running many different database implementations and query that database from within a Java program. \u000a<br>\u000aJDBC requires a specifically formatted URL to connect to a database:<code>jdbc://[db type]://[url]:[port number]/[db name]</code>\u000a<br>\u000aIf applicable (and hopefully it is) you may require a username and password to access the database.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:86",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:180"],
      "Label": null,
      "Body": "Hibernate is a commonly used ORM for Java. It implements the JPA plus many other helpful methods in its own API.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:87",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:181"],
      "Label": null,
      "Body": "When querying a MySQL database based upon user input it is a <b><font color=\"red\">VERY awful</font> </b>idea to parse user input straight into the query. Whenever this is done a puppy dies. <b>Please do not do this ever</b>.\u000a<br>\u000aA malicious user could enter a specific query and gain access to your entire database (called SQL injection), but fortunately there are libraries designed to prevent malicious input. There are even some built into the language itself (PreparedStatements), so no excuse not to use them.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:88",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:182"],
      "Label": null,
      "Body": "File I/O is another way of saying \"Reading and/or writing data from backing storage\".\u000a<p>\u000aReading from files in Java can be done in several ways and is not immediately obvious how to be done. \u000aAn example method is:\u000a<br>\u000a<ol>\u000a<li>Open file into a FileReader - this reads in all the characters into this Object</li>\u000a<li>Wrap the FileReader in a BufferedReader - this allows you to get more than 1 character at a time back</li>\u000a<li>Manipulate the BufferedReader to get data from the file, such as by using readLine()</li>\u000a</ol>\u000aA FileReader is an object that allows you to read a single character from a specific file (which you told it when you initialised it). A BufferedReader is a special kind of Reader object which allows you to read multiple characters at a file \"at once\" (technically it is reading a single character multiple times before giving them to you). \u000a<br>\u000aTo write to a file an example method is:\u000a<ol>\u000a<li>Open a PrintWriter object</li>\u000a<li>Print output to file</li>\u000a</ol>\u000a<b>If you are reading in or writing out structured or semi-strucutred data then use an appropriate parser. </b>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:89",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:183"],
      "Label": null,
      "Body": "Java gives many built in operators:\u000a<table>\u000a<tr><td>+</td><td>Addition</td></tr>\u000a<tr><td>- </td><td>Subtraction</td></tr>\u000a<tr><td>/</td><td>Divide</td></tr>\u000a<tr><td>*</td><td>Multiply</td></tr>\u000a<tr><td>%</td><td>Modulo</td></tr>\u000a</table>\u000aIf you wish to do exponents you should use the <code>double exp(double a)</code> method.\u000a<p>\u000aNote: Java does not allow operator overloading, which means you are not allowed to redefine the addition operator (for example) to work with Objects. With the exception of Addition for Strings none of these work on Objects.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:90",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:184"],
      "Label": null,
      "Body": "Strings are immutable which means a new String is created each time it is updated or concatenated. This can be incredibly slow if we are updating a large string or forming a complex string from many inputs. \u000aTo solve this problem we have StringBuilder, it takes many inputs and forms the String only once upon request.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:91",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:185"],
      "Label": null,
      "Body": "Many employers, programming teams, and universities (including the School of Computer Science here at St Andrews) enforce their own coding style. \u000a<br>\u000aIt is very important to maintain a consistent style amongst teams as this allows many programmers to read, update and adapt code written by others which should reduce programming and maintaining time. \u000a<br>\u000aOurs can be found in the resource below. It is the definitive source for this information.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:92",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:186"],
      "Label": null,
      "Body": "Factory Design Pattern is a complicated way of saying that we delegate our object creation to another class which is designed to just return objects. This way if we have to change the type of our objects we can just change one line.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:93",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": [],
      "Label": null,
      "Body": "The 'For Each' loop in Java is an extension of the 'For' loop. \u000aIt is used when we wish to iterate through each element of a data structure and do not care for its position in the data structure.\u000a<br>\u000aThis will only work for data structures that implement the Iterable interface (which is all Java Collections and Arrays), plus you can design it to work for any custom data structures.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:94",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:188"],
      "Label": null,
      "Body": "If you get unexpected data, invalid data or wrong data it can be useful to attempt and recover from these faults rather than just crashing. \u000a<br>\u000aThis is where exceptions come in, when an exception is invoked control is immediately returned up the stack until the exception is handled or it reaches the top (where it will crash your program).\u000a<br>\u000a<b>Do not</b> use exception to jump out of nested loops, recursion and so forth. Exceptions should only be used when a problem occurs.\u000a<br>\u000aThere are two types of exceptions:\u000a<ol>\u000a<li>Checked - where you must attempt to catch them</li>\u000a<li>Unchecked - where an error may occur too often (eg NullPointerExceptions are unchecked)</li>\u000a</ol>\u000a<br>\u000aThe general philosophy of Java developers is that checked exceptions are to be used over unchecked.\u000a<br>\u000aTo throw an exception you use the throw keyword: <code>throw new ExceptionName();</code>.\u000a<br>\u000aTo catch an exception use the 'Try-catch' syntax (examples given below).\u000a<br>\u000aTo create your own exception: <code>public class NameHereException extends Exception{}</code>, these should end with 'Exception'.\u000a<br>\u000aIf a method has the possibility for an exception to rise above it (ie it does not catch the exceptions) then this should be noted in the method signature with <code>methodName(parameters) throws ExceptionName{}</code>.\u000a<br>\u000aIt is bad practice to catch or throw general \"Exception\" classes but was done here for illustrative purposes only. \u000aFurther, there are scenarios where a valid response to an exception is just to ignore it - when this does happen please note this in your comments that it is intentionally ignored.\u000a<br>\u000aThere is a discussion to when to catch and when to throw exceptions, generally if you can recover from an exception in a reasonable and expected manner then do so, but if you are designing an API or the problem is inputs from outwith your method then throw an exception. This is not a hard and fast rule, apply your better judgement.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:95",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:189"],
      "Label": null,
      "Body": "The Ternary operator is the shortcut to a simple, one line, if-else statement.\u000a<br>\u000aThe condition remains in the parenthesis but is followed by a question mark, the code to occur if true, a colon, and the code to occur if false.\u000a<br>\u000aGenerally do not nest ternary operators within ternary operators as this can be hard to read and to maintain, they should be short and simple.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:96",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:190"],
      "Label": null,
      "Body": "This means your method can have an arbitrary amount of parameters, the additional arguments are treated just like an array. These additional parameters must be of the same type as the parameter with the dots (which should be the last parameter).\u000aThese should not be used in place of array parameters since the latter offers better type safety.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:97",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:191"],
      "Label": null,
      "Body": "Comparable is an interface that is implemented when an object implements the <code>int compareTo(&lt;T&gt;obj)</code> method. It means that an object of this type can be show how compared to another object of the declared type.  For example if you had a Person object you may wish to compare them based upon their age or height. \u000a<br>\u000aTechnically they do not need to be compared to an Object of the same type, so you may wish to compare the average life expectancy of a person to another species of animal.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:98",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:192"],
      "Label": null,
      "Body": "Iterable interface being implemented means that an object can be produce an iterator which can be used in 'For Each' loops, or anywhere an Iterator object is required.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:99",
      "@version": 24,
      "@class": "Discussion",
      "in_explain": ["#24:193"],
      "Label": null,
      "Body": "Generics introduced in Java 5 aim to allow a class to be written once but work with multiple types of data types. Consider them as a variable for types at the class level. It does this by introducing the diamond syntax \"<>\" which are used to declare the data type. Since then all of the Java standard library has been converted to use generics although with backwards compatibility in mind the non-generic versions still exist but do not provide the same type safety as generics, and should be avoided. Generics are mostly used for Abstract Data Structures rather than classes (for example if you were creating a B+ Tree generics would be useful but not so useful if you were creating a Person class). \u000a<br>\u000aEach class may have multiple generic parameters separated by commas, which are named just like any other variable and is used in the same manner but replaces the type of another variable. \u000a<p>\u000aHistorically if you required a List you would have to have it return Objects from its methods (as all reference types must be a subclass of Object) and this is not-type safe: you would be able to put a String, Integer and a Person in the same list and treat them all as the same 'Object' which means unsafe casts, but with generics you can have an exception thrown if an invalid type is added to the list.\u000a<p>\u000aGenerics are incredibly sophisticated with many differently syntax possibilities, but the most common are:\u000a<ul>\u000a<li><code>&lt;T&gt;</code>This can be any reference type</li>\u000a<li><code>&lt;T extends ASpecificClass&gt;</code> This can be any subclass of ASpecificClass (which is a subclass of itself)</li>\u000a<li><code>&lt;?&gt;</code> When we do not know nor care for its type. \u000a</ul>\u000a\u000aTo use generics with the Java standard library is very simple: <code>List&lt;String&gt; aListOfStrings = new List<>(); </code>\u000aNotice that we can omit the latter 'String' in the diamond brackets since it can be inferred from context. \u000a<p>\u000aTo create our own generic class we must first declare our class to be generic: <code>public class AnAwesomeClass&lt;T&gt;{}</code>\u000a<p>\u000aWe can then use T anywhere a type declaration would go within our class, as shown in the examples, as if it were a variable but for the type of variables. \u000a<p>\u000aGenerics give you more type safety, reduce bugs and increase maintainability which is inline with Java philosophy, it is useful to use them extensively.\u000a<p>\u000aIn summary: Generics allow variables to exist for types of variables.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:100",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:194"],
      "Label": null,
      "Body": "Iterators are the data structure returned by a class that implements the Iterable interface. These allow you to very efficiently (both in memory and in time) traverse through a data structure, and importantly without needing to understand how the underlying data structure is implemented. Since Iterable is an interface we can re-use a lot of code across all iterable data structures. \u000a<p>\u000aIn fact when you use the for each loop it is iterating over the iterator returned by the iterable object.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:101",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:195"],
      "Label": null,
      "Body": "There are many frameworks that will either change the way Java is executed or have a different syntax but are still somehow \"Java\". These are discussed here.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:102",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:196"],
      "Label": null,
      "Body": "MapReduce is a divide and conquer approach to solving large scale and complex problems. \u000a<br>\u000aIt is named after its two stages: \u000a<ol>\u000a<li>Map - a filter of some form</li>\u000a<li>Reduce - decrease the problem size by some form of calculation</li>\u000a</ol>\u000aHadoop is a very common implementation of MapReduce but is not the only option.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:103",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:197"],
      "Label": null,
      "Body": "Enumerations are half way between variables and classes. They are similar to variables in that they may only contain certain values, but similar to classes since they can have methods, variables and constructors.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:104",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:198"],
      "Label": null,
      "Body": "<em>Final Keyword</em>\u000a<br>\u000aThe final keyword between the variable\u2019s access control and type will tell the compiler to make the variable immutable which will not allow to the variable to be updated.\u000aAn attribute that is 'final' is allowed to be initialised by the constructor instead of being hardcoded.\u000a<br>\u000aThis can also be used in classes to disallow subclasses from being created through inheritance. And finally this keyword can also be used on methods which will prevent sub-classes from overriding that method.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:105",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:199"],
      "Label": null,
      "Body": "<em>Abstract Keyword</em>\u000a<br>\u000aAn abstract class is a class that cannot be instianted and is allowed to contain abstract methods.\u000aAbstract methods are method signatures (ie a method without the {//code} but a \";\").\u000a<p>\u000aAny subclass must implement these methods. All methods inside an abstract class are implicitly public, otherwise an abstract class acts just like a regular class.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:106",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:200"],
      "Label": null,
      "Body": "<em>Static Keyword</em>\u000a<br>\u000aStatic is a keyword that can be applied to global variables (ie fields/members) or to methods. I can be thought of as meaning that a variable or method belongs to the class as a whole and not to Objects of that class. \u000a<p>\u000aThese variables will be initialised at the start of program execution and not when an Object of that type is created. This means that there is only one copy of each static variable per execution. \u000a<br>\u000aStatic methods are invoked on the class itself using the dot operator in the format: <code>ClassName.staticMethod();</code>.\u000a<p>\u000aThe important thing to note is that anything static can be considered \"more general\" than a concrete object and as such a static method cannot invoke or use a non-static variable.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:107",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:203"],
      "Label": null,
      "Body": "<em>public</em>: This allows anyone access to the method or field. This does mean that your variables could get silently modified from anywhere so is generally only used when necessary, final or an abstract data structure.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:108",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:204"],
      "Label": null,
      "Body": "<em>private</em>: This can only be accessed from a method inside the object and cannot be invoked on the object itself. Private methods and fields are not inherited.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:109",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:205"],
      "Label": null,
      "Body": "<em>protected</em>: This is the same as private, but these are inherited by subclasses.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:110",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:206"],
      "Label": null,
      "Body": "<em>package-protected (no modifier</em>): This will allow it to be accessed from itself and any other method/object in\u000athe same package, but not a subclass (unless it is in the same package). Rarely used.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:111",
      "@version": 7,
      "@class": "Discussion",
      "in_explain": ["#24:207"],
      "Label": null,
      "Body": "The easiest way to think about accessing data in variables is to think of them as basic math equations.\u000aConsider the very basic equation: <code> f(x) = x + 3</code> if we gave our x the value 5 then overall we have 8. We directly substitute 5  every time we see the letter x. This gives us <code>f(x) = 5 + 3 = 8 </code>.\u000aAccessing data is the exact same in Java. The explanation above is exactly equivalent to:\u000a\u000a<code>\u000aint x = 5;\u000aint f_x = x + 3;\u000a</code>\u000a<p>\u000aConsider we wanted to use our variable in a function, such as a function to display its value. We would probably do something like:\u000a\u000a<code>\u000aSystem.out.println(x);\u000a</code>\u000aEvery time we see an x we can <b>think</b> of it as being replaced with our value 5.\u000a<p>\u000aNote: Accessing data stored in Objects is more complex and has its own section over in <b>Access Control</b> and <b>Reference Types</b>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:112",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:208"],
      "Label": null,
      "Body": "Java requires us to declare all of our variables, where it is declared determines its \"scope\" (that is where we can access it from).\u000a<p>\u000aAll variables in Java are of the format:\u000a<code>[access control] [modifiers] [type] [name]</code>\u000aWhat this does is it <b>declares</b> a variable to the compiler. From our box analogy this is you telling the compiler to create you a box with certain permissions. \u000a<p>\u000aDepending on the <b>type</b> this will be given a default value by the compiler. Recall that when we tell the compiler the type of a variable we cannot change it. Think of the compiler as the box's guard; it will stop you from doing anything you shouldn't to it (such as putting socks in a box for food).\u000a<p>\u000aWe can then initialise the variable which means to give it its first value. This is us putting something inside the box. This is done very simply using the <b>=</b> operator.\u000a<code> variableName = value;</code>\u000a<p>\u000aThere is a shortcut to declare and initialise a variable in one line which is commonly used.\u000a<code>int x = 5;</code>\u000aThis assigns the newly created variable (box) called x to the value 5. \u000a<p>\u000a<p>\u000aA quick note on scope: Variables can generally only be accessed within the set of  <b>{}</b> they are declared in, but this isn't always true. A more complete explanation is given in <b>Scope</b>.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:113",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:209"],
      "Label": null,
      "Body": "All variables that are not declared as <b>final</b> can be updated so long as they are in scope. Variables can only be replaced with another value of the same type (although this strictly isn't always true for objects which is discussed in <b>Late Binding</b>).\u000aFor primitive types this is very easy, we simply use the assignment operator <b>=</b> to give our variable a new value.\u000a<code>\u000achar letter = 'a';\u000aletter = 'b';\u000a</code>\u000aAt the end our letter variable has the value <b>'b'</b>.\u000a<p>\u000aThis is slightly more complicated for reference types. We can change an object's attribute (that isn't final) in the same way.\u000a<code>\u000aCat c = new Cat(\"Oscar\", 1); \u000ac.age = 2;\u000a</code>\u000aNow our cat is aged 2, but this is slightly different when we want to update the variable holding the object.\u000a<code>\u000aPerson p = new Person(\"Leo\", 42);\u000ap.pet = c; //Notice that p.pet is an object\u000ap.pet = new Cat(\"Oscar Jr.\", 1);\u000a</code>\u000aWhat this has done is update the object that <code>p.pet</code> is pointing to, not the object itself. In that example 3 objects exist by the end: The Car Oscar we declared above, the Person Leo, and another cat Oscar Jr. we declared during. The variable <code>p.pet</code> holds a reference to the object we create at the end, not a new object.\u000a<p>\u000a<small>The moral of the story: Leo only has 1 Oscar</small>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:114",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:210"],
      "Label": null,
      "Body": "To abstract a problem is to reduce it to its basics, and to its simplest form for the code to be written as.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:115",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:211"],
      "Label": null,
      "Body": "All programs should hopefully be tested very thoroughly because improper testing can literally cost lives. \u000aIt is very challenging to strike the balance between testing enough of the program's possible inputs to ensure it works correctly vs. potential heat death of the universe. There is no hard and fast rule for appropriate test coverage, just apply your better judgement, but please, always ensure you have done at least some testing.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:116",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:212"],
      "Label": null,
      "Body": "Continuous and Regression testing are usually only used on larger scale, team based projects. These are automated test suites that are integrated to some form of version control software that automatically test newly updated and added code to ensure there are no new errors created or unexpected interactions with existing code.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:117",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:213"],
      "Label": null,
      "Body": "There are many different way to encode data and it is a good idea to use an already established one when you need to encode data. These will have established libraries to allow easy parsing and creation of data as well as being able to communicate easily with other programs.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:118",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:214"],
      "Label": null,
      "Body": "Comma Separated Values (CSV) is one of the most simple data formats. It begins with an optional header to tell you what each comma separated value means with each element on a new line.\u000aThe problems affiliated with CSV are:\u000a<pre>\u000a\u00091. The header is optional, there is no guarantee that it is there\u000a\u00092. Some data may be missed out skewing a line's length which can be hard to handle properly\u000a</pre>\u000a\u000aBut its major advantage is it ease of use and lack of complexity.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:119",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:215"],
      "Label": null,
      "Body": "Programming with data srts can be tough, especially the gathering of the data into your program for manipulation. This is where Data Interfaces step in, they provide a way to get data loaded into your program.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:120",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:216"],
      "Label": null,
      "Body": "Real world programs are massive, spread across multiple people across multiple teams and potentially across multiple contents. As such it is incredibly important to not have your programmers to create the program's structure ad-hoc and to have it preplanned in advance. \u000aThis makes it easier and more maintainable from its outset and should reduce both programming time and the resources spent maintaining and updating it in the future.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:121",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:217"],
      "Label": null,
      "Body": "Entity Relational Model (ERM) is a model for designing Object based programs. It is in effect a map that displays all the attributes of all the objects and the relationships between those objects. These are common amongst database designers, but are useful in any OO programming.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:122",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:218"],
      "Label": null,
      "Body": "Most programs will not require (nor would it be possible to) exhaustively test every single possible input. It is usually good enough to get a good and random sampling of test data.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:123",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:219"],
      "Label": null,
      "Body": "JavaScript Object Notation (JSON) whilst first designed for use in JavaScript is now almost ubiquitous in programming. Appearing in most APIs it is very hard to not use JSON. JSON owes its popularity to its lightweight and flexible nature which makes it convenient to parse and to send across networks. \u000a\u000aAdvantages:\u000a<pre>\u000a\u00091. Very widely used\u000a\u00092. Many parsers available (usually built into programming languages)\u000a\u00093. Lightweight and flexible (often returned by web based APIs)\u000a\u00094. Very similar to English and easily readable\u000a</pre>\u000a\u000a<p>\u000a<a href=\"https://en.wikipedia.org/wiki/JSON#Example\" src=\"_blank\">Wikipedia</a> has a great example and great article on JSON.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:124",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:220"],
      "Label": null,
      "Body": "The prototype of a method is the first line of the method declaration in your program.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:125",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:221"],
      "Label": null,
      "Body": "Object data interface allows you to pre-load all the data into your program. This is incredibly useful when you have all the data you are going to need so it can be loaded in at the start or during a low-computation part which will hopefully make your program run faster.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:126",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:222"],
      "Label": null,
      "Body": "Object-Relational Model (ORM) is a way for data in a database to be represented and manipulated as Objects in an OO program.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:127",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:223"],
      "Label": null,
      "Body": "Pseudocode is an English-like explanation of the logic of a program or method. There is no agreed upon \"Pseudocode language\" but roughly 1 line of pseudocode should be 1 line of code.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:128",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:224"],
      "Label": null,
      "Body": "Streaming is loading data continiously. This allows you to start work immediately inside your program and continiously gather data potentially from a live source.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:129",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:225"],
      "Label": null,
      "Body": "Often it is important to ensure that the program outputs the correct data at the end of the program, potentially to a screen. \u000aThis can be automated on UNIX based machines using Bash.\u000a<pre>\u000a\u00091. Create a script to generate many different possible input data to ensure a good coverage\u000a\u00092. Create a script to run your program with this data and pipe its output to a file\u000a\u00093. Create a file of the expected output to compare to the actual output\u000a</pre>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:130",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:226"],
      "Label": null,
      "Body": "Test-Driven Development(TDD) is a different approach to program creation that the typical Waterfall approach. In TDD the unit tests are created before the code is actually written. Some believe that this encourages more modular, more correct and more maintainable code with fewer errors and as such reduced development time. Some believe this is boring and useless (but note that some people believe all testing is boring and useless).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:131",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:227"],
      "Label": null,
      "Body": "This is the typical method of software development. \u000aYou start with the highest possible level you have (the furthest away explanation from actual software) and work your way down to actual code.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:132",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:228"],
      "Label": null,
      "Body": "One of the most common design languages is UML (Unified Modelling Language) it is incredibly useful for Object-Orientated programs. There are many other tools available to a programmer depending on the type of problem being solved including many diagrams (Venn diagrams are useful for SQL planning).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:133",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:229"],
      "Label": null,
      "Body": "Most programming languages come with some form of unit testing built in, for Java this is JUnit and for Python this is unittest. If you are unsure you can Google: [programming language of choice] unit testing.\u000aUnit testing is isolating a specific method and ensure its return values are as expected for a wide range of inputs. \u000aA good unit test should:\u000a<pre>\u000a\u00091. Be fast\u000a\u00092. Be independent of its surrounding methods - only rely on what is set up specifically for it\u000a\u00093. Test exactly 1 method that should do 1 thing\u000a\u0009<b>4. Exist</b>\u000a</pre>\u000a\u0009\u000aIt may be useful to test how the methods interact also.",
      "out_appear": ["#27:143"],
      "@fieldTypes": "in_explain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#25:134",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:230"],
      "Label": null,
      "Body": "EXtensible Markup Language (XML) is a far stricter and heavier version of JSON. \u000a\u000aAdvantages:\u000a<pre>\u000a\u00091. All elements must be filled\u000a\u00092. Far stricter on rules so little to none unexpected errors\u000a\u00093. Still popular and widely used\u000a</pre>\u000a\u0009\u000aDisadvantages:\u000a<pre>\u000a\u00091. Inflexible\u000a\u00092. Heavy\u000a</pre>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:136",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:235"],
      "Label": null,
      "Body": "An abstract class (or method) will have its name in italicised font instead of bold font.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:137",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:236"],
      "Label": null,
      "Body": "<table>\u000a<tr>\u000a<td>Symbol</td>\u000a<td>Purpose</td>\u000a</tr>\u000a<tr>\u000a<td>+</td>\u000a<td>Public</td>\u000a</tr>\u000a<tr>\u000a<td>#</td>\u000a<td>Protected</td>\u000a</tr>\u000a<tr>\u000a<td>~</td>\u000a<td>Package</td>\u000a</tr>\u000a<tr>\u000a<td>-</td>\u000a<td>Private</td>\u000a</tr>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:138",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:237"],
      "Label": null,
      "Body": "Attributes are denoted by: <code>[access control modifier]\u00a0[name] : [type]</code>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:139",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:238"],
      "Label": null,
      "Body": "Inheritance is strange in UML. The subclass (the inheriter) has an line connected to its superclass with an arrow pointing in towards the superclass.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:140",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:239"],
      "Label": null,
      "Body": "Interfaces are denoted by <pre>&lt;&lt;Interface&gt;&gt;</pre> above the class name.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:141",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:240"],
      "Label": null,
      "Body": "Methods are: <code>[access control] [name ( [parameters and types])]: [return type]</code>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:142",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:241"],
      "Label": null,
      "Body": "Immutable (for example Java's final): ALL_CAPS<br>\u000aNon-concrete implementation (for example Java's static): underlined name",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:143",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:242"],
      "Label": null,
      "Body": "Objects in UML are represented as squares within squares. They must contain, in the first box, the class's name in bold text. \u000aThen following that they may have either:\u000a<ol>\u000a<li>Attributes if they are included</li>\u000a<li>Operations if attributes are included</li>\u000a<li>Nothing</li>\u000a</ol>\u000a\u000aBut if attributes are excluded they may have either:\u000a<ol>\u000a<li>Operations</li>\u000a<li>Nothing</li>\u000a</ol>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:144",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:243"],
      "Label": null,
      "Body": "Non-inheritance relationships (ie associative relationships) are denoted by a with with a small arrow on one end pointing from the class that contains the contained class. These can be uni or bi directional. \u000aIt may also contain a number below it denoted the smallest and largest amount that can be held (eg 1..25).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:145",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:244"],
      "Label": null,
      "Body": "Method overloading (which is distinct from Method overriding) is when you have multiple methods in the same class with the same name and return type but different parameters types. \u000aThis is often to allow us to the use the same method name (which does the same thing) but with different types of inputs.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:146",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:245"],
      "Label": null,
      "Body": "<em>Default</em>: Default is used in interfaces to give a default implementation for a method in case an implementing class does not implement this method. This means that any classes that implement this interface do not have to implement the method (think of this as the opposite of abstract).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:147",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:246"],
      "Label": null,
      "Body": "Much like reading in from files there are multiple ways to do this. A common example is to use an InputStreamReader to wrap System.in (the standard input stream), to use the Console object provided by System.console() or just read in any data directly from the command line using args (generally advised).\u000a<p>\u000a<b>NEVER</b> blindly trust that users will enter correct and non-malicious inputs. Always be sure to check they are valid.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:148",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:247"],
      "in_contain": [],
      "Label": null,
      "Body": "In programming we often want to repeat a section of code multiple times and often this is an unknown amount of times.\u000a<br>\u000aFortunately there are structures built into the language to make this easier for us.\u000a<br>\u000aIn Python iteration can be done slightly different from most other languages and these ways may seem unusual at first but in the end they are incredibly useful and powerful.",
      "@fieldTypes": "in_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:149",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:248"],
      "Label": null,
      "Body": "In programming we often wish to change how our program runs or what it executes depending on earlier inputs and results.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:150",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:249"],
      "in_contain": [],
      "Label": null,
      "Body": "I/O stands for Input/Output.  Programs typically want to either take data in from a source or outputting (sometimes even both).",
      "@fieldTypes": "in_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:151",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:250"],
      "Label": null,
      "Body": "Data can be stored in many different ways and some forms are better than others for certain tasks.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:152",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:251"],
      "Label": null,
      "Body": "It is exceedingly rare to write a piece of software with no bugs in it on your first try (and congratulations if you manage to do so), but for us mere mortals debugging is probably the most useful skill for any programmer to have.\u000a<br>\u000aDebugging and testing go hand and hand, and unfortunately there is no one specific and best method of debugging.\u000a<br>\u000aThe best advice to be given is to look at your test results and see for what values the output is wrong and then go through each line of where the error may happen and think through what each line of code is doing.\u000a<br>\u000aAnother type of debugging is solving compiler errors, the same advice above also holds for this. Thing about <b>why</b> something is happening.\u000a</br>\u000aAnd finally use your resources, that is to include books and your preferred web search engine.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:153",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:253"],
      "Label": null,
      "Body": "SciPy is an ecosystem of libraries designed with the use for scientists (and mathematicians) in mind. It contains many libraries including Numpy and Mathplotlib but also includes panda (for data manipulation) and IPython for interactive computation.\u000a<br>\u000aScipy library allows you to perform more complex, higher-level mathematics on Numpy arrays, this includes the ability to perform Fourier Transformations and Integrations.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:154",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:254"],
      "Label": null,
      "Body": "Dictionaries in Python are similar to Lists, but instead of mapping integers to some data they can map a key (which is any data) to a value (which is any data).\u000a<p>\u000aThis can make them incredibly convenient and useful as you can easily lookup a keyword.\u000a<p>\u000aThese are declared using the <code> { } </code> brackets.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:155",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:255"],
      "Label": null,
      "Body": "Python's sets are an implementation of mathematical sets and adhere to the same properties. \u000a<p>\u000aThere are methods built into Python for calculating intersection, union and difference between two sets.\u000a<p>\u000aThese are built into the language and do not require any imports, but to create a non-empty set you must give it an iterable (see examples and errors).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:156",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:256"],
      "Label": null,
      "Body": "This is pretending one data type is another. For example pretending an integer is a String or a float is an integer.\u000a<p>\u000aTypes can be checked using the <code>typeof()</code> method.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:157",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:257"],
      "Label": null,
      "Body": "A common form of I/O  (Input/Output) is locally based, meaning to load and save to disk or any other form of backing storage.\u000a<p>\u000aGenerally speaking I/O is a lot slower than using variables (which are probably stored in RAM at the worst case) so is only used when we need to and not used for all problems.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:158",
      "@version": 3,
      "@class": "Discussion",
      "out_explain": [],
      "Label": "Data Types",
      "Body": "Ada's type system is not based on a set of predefined primitive types but allows users to declare their own types. This declaration in turn is not based on the internal representation of the type but on describing the goal which should be achieved. This allows the compiler to determine a suitable memory size for the type, and to check for violations of the type definition at compile time and run time (i.e., range violations, buffer overruns, type consistency, etc.). Ada supports numerical types defined by a range, modulo types, aggregate types (records and arrays), and enumeration types. Access types define a reference to an instance of a specified type; untyped pointers are not permitted. Special types provided by the language are task types and protected types.",
      "@fieldTypes": "out_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:159",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:259"],
      "Label": null,
      "Body": "In most programs we want to change how the program acts during its execution in a non-linear fashion. We may want a different UI to be loaded when a button is clicked, we may want a specific section of code to loop n times when n is given by the user or we may want a special event to occur when something unexpected happens in the program.\u000a<p>\u000aThis section manages all those. Ranging from basic iteration and conditional flow to exceptions.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:160",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:260"],
      "Label": null,
      "Body": "We may require some data to persist across multiple runs. This could be to avoid costly recalculation, to transfer data or to store user preferences.\u000a<p>\u000aWe obviously cannot use variables which are stored in transient memory since they are deleted when the program terminates, thus we have to use something more permanent such as files or databases.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:161",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:261"],
      "Label": null,
      "Body": "It is often useful and important to store data produced at run time locally to allow for fast access, but not all data formats are made equal. Here we discuss the most basic ways to store data as well as some of the more advanced techniques for local data storage.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:162",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:262"],
      "Label": null,
      "Body": "Programming languages are powerful tools, and it is important to understand how to best utilise them. This could include learning the built in structures and what each allow you to do - this will make solving problems easier.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:163",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:263"],
      "Label": null,
      "Body": "Java is an Object-Oriented programming language. That means it manipulates 'Objects' which is a collection of data and methods. These are explained in this section.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:164",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:264"],
      "Label": null,
      "Body": "Programming is not about being the smartest person in the room producing the most complex and unmaintainable code.  \u000aThe best programmers produce simple, readable and maintainable code.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:165",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:265"],
      "Label": null,
      "Body": "<a href=\"http://vilo.cs.st-andrews.ac.uk/?#28:8#34:12#13:82#13:88\">JSON</a> is an incredibly popular format for data transference between programs. \u000a<p>\u000aFortunately Java comes with a JSON parser in org.json.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:166",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:266"],
      "Label": null,
      "Body": "We often want to transfer data across programs, or even to different programmers across an API. To do this we have to agree how we format the data so that the receiving end can read it.\u000a<p>\u000aWe also may want to introduce new programmers at a later point so it generally isn't a good idea to use your own made-up standard.\u000a<p>\u000aThis is what this section covers, standardised ways to format data to be sent to other programmers or programs.\u000a<p>\u000aEach standard has many variations of parsers with slightly different syntax, this section will show at least one library for parsing each standard but there are many others. Programming is about exploration and discovery so feel free to look around for others that you might prefer.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:167",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:269"],
      "Label": null,
      "Body": "Programming is more than just writing code that works.\u000a<p>\u000aMost code is continually adapting and will last for a long time after it was written, this is why we want to ensure the programs we write do not just accomplish what our task was but also do so in a manner that makes them readable, easy to understand, and easy to adapt.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:168",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:268"],
      "Label": null,
      "Body": "Python is very commonly used because of the ease of use, its flexible and convenient data structures and its amazing library collection for manipulating that data.\u000a<p>\u000aUnfortunately we cannot cover all the amazing things Python allows you to do but we implore you to explore for yourself and discover some great libraries that are out there.\u000a<p>\u000aThis section will cover how to create, access, manipulate and store that data.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:169",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:270"],
      "Label": null,
      "Body": "Writing code is like writing in any other language - there are a set of rules that must be followed or else what you're writing may not make sense.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:170",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:271"],
      "Label": null,
      "Body": "Programming would be very tedious and boring if they could only execute code in the order it was typed, or if to repeat the same line of code 3 times you had to type it 3 times.\u000a<p>\u000aFortunately, we have control structures which will change the order and amount of your code's execution.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:173",
      "@version": 8,
      "@class": "Discussion",
      "in_explain": ["#24:277"],
      "Label": "Consumer Demand",
      "Body": "The purchase plans of all consumers for a good or service over a given period of time are affected by a number of important determinants.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:174",
      "@version": 11,
      "@class": "Discussion",
      "in_explain": ["#24:278"],
      "Label": "Own Price",
      "Body": "The law of demand postulates an inverse relationship between a product\u2019s own price and the quantity purchased, <i>ceteris paribus</iu000a<p>\u000a<b>Definition</b>: <i>ceteris paribus</i> is Latin for \u201call else equal\u201d or \u201cholding all other factors constant\u201d.  It indicates that we are interested in isolating the impact of a change in one variable on another under the assumption that nothing else changes.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:176",
      "@version": 11,
      "@class": "Discussion",
      "in_explain": ["#24:280"],
      "Label": "Demand Equation",
      "Body": "The demand relationship can be described mathematically using a simple linear (straight line) equation:\u000a$$ Q^D=a+bP $$ \u0009(a and b represent unspecified numbers)\u000a<br>\u000awhere $$Q^D$$ is the quantity demanded.\u000a$$a$$ is intercept of the equation. \u000a$$b = \\frac{\\Delta Q^D}{\\Delta P}$$is the slope of the equation and P is the price of the good. $$ \\Delta $$ means \u201cchange in\u201d.  \u000a<br>\u000a<br>\u000aAs the relationship is negative by the law of demand, this implies $$ b<0 $$.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:177",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:281"],
      "Label": "Inverse Demand Equation",
      "Body": "It is common in Economics to put price on the left hand side of the demand equation. This is known as the inverse demand equation.  It can be described mathematically using a simple linear (straight line) equation:\u000a$$P=c+dQ^D$$\u0009(again c and d represent unspecified numbers)\u000a<p>\u000aWhere $$Q^D$$ is the quantity demanded. \u000a$$ c $$ is intercept of the equation.\u000a$$ d = \\frac{\\Delta P}{\\Delta Q^D}$$ is the slope.\u000a$$P$$ is the price of the good.  \u000a<p>\u000aAs the relationship is negative by the law of demand, this implies $$d<0$$.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:180",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:283"],
      "Label": "Income and Substitution Effects",
      "Body": "The law of demand is generated by the simultaneous operation of the income and substitution effects of a change in price.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:181",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:284"],
      "Label": "The Income Effect",
      "Body": "In the case of a normal good, when the price of a good increases, consumers have less purchasing power, so consume less of that good.  Conversely when price declines, consumers have more purchasing power so purchase more.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:182",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:285"],
      "Label": "The Substitution Effect",
      "Body": "When the price of a good increases, consumers always buy less of the good and substitute instead a relatively cheaper alternative product, all else equal.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:184",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:288"],
      "Label": "The Demand Choke Price",
      "Body": "The demand choke price is defined as that price at which demand shrinks to zero (it is choked off).  With respect to the inverse demand equation, when $$Q^D=0$$ this implies $$P=c$$\u000aTherefore, the intercept of the inverse demand equation, $$c$$ is the demand choke price. \u000a<p>\u000aThis will be a positive number $$c>0$$ since if the price is low enough there will always be consumers who purchase the good or service.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:185",
      "@version": 13,
      "@class": "Discussion",
      "in_explain": ["#24:289"],
      "Label": "Price Elasticity of Demand",
      "Body": "<b>Definition</b>: the responsiveness of quantity demanded to a change in price is known as the price elasticity of demand (E).  Mathematically it is defined as the percentage change in quantity demanded divided by the percentage change in price:\u000a\u000a$$E = \\frac{\\%\\Delta Q^D}{\\% \\Delta P}$$\u000a\u000aThis is known as an arc elasticity as it is calculating the responsiveness of demand between two different prices.  It is a very useful way to think about the interpretation of an elasticity.  However, arc elasticities are never calculated by professional economists.  Instead, we are interested in the sensitivity of demand at a single price.  This can be derived in the following way:\u000a\u000a$$ E = \\frac{\\%\\Delta Q^D}{\\% \\Delta P}$$\u000a<p>\u000a$$ E = \\frac{\\frac{\\Delta Q^D}{Q^D}}{\\frac{\\Delta P}{P}} $$\u000a<p>\u000a$$E =  \\frac{\\Delta Q^D}{\\Delta P} \\times \\frac{P}{Q^D}$$\u000a<p>\u000a$$ E = b \\times \\frac{P}{Q^D}$$\u000a<p>\u000a$$ E = \\frac{1}{d} \\times \\frac{P}{Q^D}$$\u000a<p>\u000aWhere $$b=\\frac{\\Delta Q^D}{\\Delta P} $$ Is the slope of the demand equation: $$ Q^D =a + bP $$ which has $$d = \\frac{\\Delta P}{\\Delta Q^D}$$ from the inverse demand equation $$P = c + dQ^D$$\u000a\u000a<p>\u000a\u000aThis expression enables you to calculate the point price elasticity of demand for any combination of price and quantity consistent with the demand equation.\u000a<p>\u000aSince the slope (b or d) is negative, then the price elasticity of demand is also negative, $$E<0$$ However, it is common for economists to report the price elasticity in absolute terms, that is, as a positive number.\u000a<p>\u000aNotice that for a linear demand equation in which the slope is fixed (b or d), it must necessarily be the case that the price elasticity of demand is larger in absolute value at higher prices.  In other words, since $$E=b\u00d7PQ^D$$ then as P increases then E must also increase in absolute value given that b is fixed and $$Q^D$$ declines with higher P.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:186",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:290"],
      "Label": "Price Inelastic Demand",
      "Body": "If the price elasticity is less than 1 in absolute value, then demand is not very responsive to a change in price.  This is the case of inelastic demand.  If demand is perfectly inelastic, that is, totally unresponsive to a change in price then $$\u2206Q^D=0$$ and $$E = \\frac{\\frac{\\Delta Q^D}{Q^D}}{\\frac{\\Delta P}{P}}$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:187",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:291"],
      "Label": "Price Elastic Demand",
      "Body": "If the price elasticity is greater than 1 in absolute value, then demand is responsive to a change in price.  This is the case of elastic demand.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:188",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:292"],
      "Label": "Total Expenditure",
      "Body": "The total expenditure of buyers on a good is simply $$P\u00d7Q$$.  This is the same as the total revenue of sellers.  If demand is price inelastic then, as price increases, demand will decline by a smaller proportion than the increase in price. This results in an increase in total expenditure.  By contrast, If demand is price elastic then, as price increases, demand will decline by a larger proportion than the increase in price.  This results in a decrease in total expenditure.  Therefore, when demand is price elastic (E>1), total revenue moves in the opposite direction to the change in price; when demand is price inelastic (E<1), total revenue moves in the same direction as the price change.\u000a<p>\u000aAn important property of a linear demand equation is that total expenditure is maximised at that price where the price elasticity of demand equals 1.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:189",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:293"],
      "Label": "Income",
      "Body": "Holding prices constant, a change in income affects the purchasing power of the consumer and either expands or contracts the feasible combination of goods and services available to purchase.  Two types of goods can be distinguished according to how their demand changes with income: normal and inferior goods.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:190",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:294"],
      "Label": "Normal Goods",
      "Body": "If the quantity demanded rises when income increases, all else equal, then the good is normal.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:191",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:295"],
      "Label": "Inferior goods",
      "Body": "If the quantity demanded falls when income increases, all else equal, then the good is inferior.\u000a\u000a<br>\u000a<br>\u000aImportant remark:  It is entirely possible that an inferior good may satisfy the law of demand regarding the negative relationship between price and quantity demanded.  In other words, when price rises and demand falls this information alone does not tell us whether a good is normal or inferior.  This is because whether a good is normal or inferior relates to its relationship to income, not to prices.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:192",
      "@version": 9,
      "@class": "Discussion",
      "in_explain": ["#24:296"],
      "Label": "Income elasticity of demand",
      "Body": "Definition: the responsiveness of quantity demanded to a change in income (I) is known as the income elasticity of demand. $$E_I^D$$  Mathematically it is defined as the percentage change in quantity demanded divided by the percentage change in income:\u000a\u000a$$E_I^D = \\frac{{\\% \\Delta {Q^D}}}{{\\% \\Delta I}}$$\u000a\u000aFor a normal good, the income elasticity is positive, $$E_I^D>0$$\u000a\u000aThe extent of the responsiveness of demand to a change in income indicates whether a good is a luxury or necessity.\u000a<p>\u000aIf the good is a luxury then $$E_I^D>1$$  The implication is that quantity demanded rises faster than income and the share of income spent on the good increases as income rises.\u000a<p>\u000aIf the good is a necessity then $$ 0<E_I^D<1$$\u000a<br> The implication is that quantity demanded rises slower than income and the share of income spent on the good decreases as income rises.\u000a<p>\u000aFor an inferior good, the income elasticity is negative$$ E_I^D<0$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:194",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:297"],
      "Label": "Price of Other Goods",
      "Body": "A change in the price of one product affects demand for related goods and services. Two types of goods can be distinguished according to how their demand changes with the change in price of other goods: complements and substitutes.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:195",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:299"],
      "Label": "Complements",
      "Body": "Complements are goods consumed together (for example, fish and chips).  When the price of one good changes, the demand for the complement changes in the opposite direction.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:196",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:298"],
      "Label": "Substitutes",
      "Body": "Substitutes are goods which satisfy similar desires (for example, salmon and cod).  When the price of one good changes, the demand for the substitute changes in the same direction.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:197",
      "@version": 10,
      "@class": "Discussion",
      "in_explain": ["#24:300"],
      "Label": "Cross Price Elasticity of Demand",
      "Body": "<b>Definition</b>: the responsiveness of quantity demanded of good X to a change in price of another good Y is known as the cross price elasticity of demand. \u000a\u000a$$E_{XY}^D$$  Mathematically it is defined as the percentage change in quantity demanded of good X divided by the percentage change in the price of good Y:\u000a\u000a$$E_{XY}^D = \\frac{\\% \\Delta Q_X^D}{\\% \\Delta P_Y}$$\u000a\u000aFor complements, the cross price elasticity is negative: $$E_{XY}^D < 0$$\u000a\u000aFor substitutes, the cross price elasticity is positive: $$E_{XY}^D > 0$$\u000a\u000aIf goods are unrelated, the cross price elasticity is zero: $$E_{XY}^D = 0$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:198",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:301"],
      "Label": "Consumer Supply",
      "Body": "The supply plans of all producers of a good or service over a given period of time are affected by a number of important determinants.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:199",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:302"],
      "Label": "Price",
      "Body": "The law of supply postulates a positive relationship between a product\u2019s price and the quantity that suppliers are willing to sell, ceteris paribus. \u000a<p>\u000a<b>Definition</b>: <i>ceteris paribus</i> is Latin for \u201call else equal\u201d or \u201cholding all other factors constant\u201d.  It indicates that we are interested in isolating the impact of a change in one variable on another under the assumption that nothing else changes.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:200",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:303"],
      "Label": "Supply Equation",
      "Body": "The supply relationship can be described mathematically using a simple linear (straight line) equation:\u000a$$Q^S = a + bP $$\u0009a and b represent unspecified numbers.\u000a\u000aWhere $$Q^S$$ is the quantity supplied, a is the intercept of the equation, $$b = \\frac{\\Delta Q^S}{\\Delta P}$$ is the slope of the equation and P is the price of the good. \u000a$$\\Delta$$ means \u201cchange in\u201d.\u000a<p>\u000aAs the relationship is positive by the law of supply, this implies: $$b>0$$\u000a<p>\u000aMarket supply is simply the sum of the supply of all individual producers at each price.",
      "out_appear": ["#27:203"],
      "@fieldTypes": "in_explain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#25:201",
      "@version": 8,
      "@class": "Discussion",
      "in_explain": ["#24:304"],
      "Label": null,
      "Body": "It is common in Economics to put price on the left hand side of the supply equation. This is known as the inverse supply equation.  It can be described mathematically using a simple linear (straight line) equation:\u000a\u000a$$P=c+dQ^S$$\u0009\u000aWith c and d represent unspecified numbers.\u000aWhere \u000a$$Q^S$$ \u000ais the quantity supplied, c is the intercept of the equation\u000a$$d = \\frac{\\Delta P}{\\Delta Q^S}$$\u000ais the slope and P is the price of the good. \u000a<p>\u000aAs the relationship is positive by the law of supply, this implies: $$d>0$$",
      "out_appear": ["#27:204"],
      "@fieldTypes": "in_explain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#25:202",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:305"],
      "Label": "Supply choke price",
      "Body": "The supply choke price is defined as that price at which supply shrinks to zero (it is choked off).  It is also known as the minimum supply price.  With respect to the inverse supply equation, $$ P=c+dQ^S$$ when $$Q^S=0$$ this implies $$P=c$$  Therefore, the intercept of the inverse supply equation, c, is the supply choke price. It makes most sense for this to be a positive number c>0 since a supply choke price below zero would suggest producers are willing to supply goods for free.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:203",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:306"],
      "Label": "law of supply",
      "Body": "The law of supply is generated by the fact that at higher prices it is profitable to produce units of output that are more costly to supply.  For example, in the case of oil, when the oil price rises it becomes profitable to supply oil that is more expensive to extract from the ground.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:204",
      "@version": 30,
      "@class": "Discussion",
      "in_explain": ["#24:307"],
      "Label": "Price elasticity of supply",
      "Body": "<b>Definition</b>: the responsiveness of quantity supplied to a change in price is known as the price elasticity of supply $$E^S$$  \u000aMathematically it is defined as the percentage change in quantity supplied divided by the percentage change in price:\u000a$$E^S = \\frac{{\\% \\Delta Q^s}}{{\\% \\Delta P}}$$\u000aThis is known as an arc elasticity as it is calculating the responsiveness of supply between two different prices.  It is a very useful way to think about the interpretation of an elasticity.  However, in practice, arc elasticities are never computed by professional economists.  Instead, we are interested in the sensitivity of quantity supplied at a single price.  This can be derived in the following way:\u000a\u000a$$ E^S = \\frac{\\%\\Delta Q^S}{\\%\\Delta P} $$\u000a$$ E^S = \\frac{\\frac{\\Delta Q^S}{Q^S}}{\\frac{\\Delta P}{P}} $$\u000a$$ E^S = \\frac{\\Delta Q^S}{\\Delta P} \\times \\frac{P}{Q^S} $$\u000a$$ E^S = b \\times \\frac{P}{Q^S} $$\u000a$$ E^S = \\frac{1}{d} \\times \\frac{P}{Q^S} $$\u000a\u000aWhere $$b = \\frac{\\Delta Q^S}{\\Delta P}$$\u000aIs the slope of the supply equation: $$Q^S = a + bP$$\u000aAnd $$D = \\frac{\\Delta P}{\\Delta Q^D} $$ Is the slope of the inverse supply equation: $$P = c + dQ^S$$\u000a\u000ahis expression enables you to calculate the point price elasticity of supply for any combination of price and quantity consistent with the supply equation.\u000aSince the slope (b or d) is positive, then the price elasticity of supply is also positive, ie:\u000a\u000a$$ E^S > 0$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:205",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:308"],
      "Label": "Input costs",
      "Body": "Firms produce output using inputs, also known as factors of production.  These include labour (workers), capital (plant and machinery) and raw materials. Holding product prices constant, a change in the cost of these inputs (for example, a change in wages)  affects quantity supplied.  If costs increase, production becomes less profitable and supply will contract at every price.  If costs decrease, production becomes more profitable and supply will expand at every price.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:206",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:309"],
      "Label": "Advances in tech",
      "Body": "Technological advances are a source of lower production costs.  They permit firms to reduce costs by using existing inputs more efficiently (fewer inputs to produce each unit of output) or to use alternative cheaper inputs to produce output. If costs decrease, production becomes more profitable and supply will expand at every price.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:207",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:310"],
      "Label": "number of sellers",
      "Body": "In the long run, firms can enter and exit an industry.  At any given price, this will expand or contract supply respectively.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:208",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:311"],
      "Label": "Sellers Outside options",
      "Body": "If it becomes more profitable to produce some other good, an option outside of the current market, supply will decrease at any given price as sellers move out of the market to produce the other product.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:209",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:312"],
      "Label": "Markets",
      "Body": "The interaction of buyers and sellers in markets is fundamental to economic analysis.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:210",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:313"],
      "Label": "Unit Elastic Supply",
      "Body": "If the choke price (the minimum supply price) is zero: $$c=0$$ Then the price elasticity of supply always equals 1 (unity) whatever the level of price and quantity supplied with a linear (straight line) supply equation.  This is because: $$E^S = \\frac{c}{dQ^S} + 1$$\u000a$$E^S = \\frac{0}{dQ^S} + 1 = 1$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:211",
      "@version": 7,
      "@class": "Discussion",
      "in_explain": ["#24:314"],
      "Label": null,
      "Body": "If the price elasticity is greater than 1 then producers are highly responsive to a change in product price in their supply decisions.  This is the case of elastic supply. If supply is perfectly elastic then the elasticity is infinite.   This is most easily seen as arising from a zero slope of the inverse supply equation $$ P=c+dQ^S$$ where $$d=0$$ such that:\u000a $$ E^S = \\frac{1}{d} \\times \\frac{P}{Q^S} $$\u000a$$ E^S = \\frac{1}{0} \\times \\frac{P}{Q^S} = \\infty$$\u000aIn this case price equals the choke price,  $$P=c$$  At any price above c, quantity supplied will be infinite.  At any price below c, quantity supplied will be zero.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:212",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:315"],
      "Label": null,
      "Body": "Using the expression for the supply elasticity:\u000a\u000a$$E^S = \\frac{c}{dQ^s} + 1 $$\u000a\u000aWe are able to see that if the choke price (the minimum supply price) is greater than 0, ie:\u000a\u000a$$ c > 0 $$\u000a\u000aThat the ratio:\u000a\u000a$$\\frac{c}{dQ^S} $$\u000a\u000aIs also positive and the price elasticity of supply is always greater than 1 whatever the level of quantity supplied (and price). It must also be the case that as $$Q^S$$ increase (and, therefore, as P increases) the ratio:\u000a\u000a$$\\frac{c}{dQ^S}$$\u000a\u000aWill decline. As a result, the elasticity also falls and converges towards a value of one.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:213",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:316"],
      "Label": null,
      "Body": "If the price elasticity is less than 1 then supply is not very responsive to a change in price.  This is the case of inelastic supply.  If supply is perfectly inelastic, that is, totally unresponsive to a change in price then $$\\Delta Q^S=0$$ and $$E^S = \\frac{\\frac{\\Delta Q^S}{Q^S}}{\\frac{\\Delta P}{P}} = 0$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:214",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:317"],
      "Label": null,
      "Body": "Using the expression for a supply elasticity: $$ E^S = \\frac{c}{dQ^S} + 1 $$ it can be seen that if the choke price (the minimum supply price) is less than zero, ie $$c<0$$ then the ratio: $$ \\frac{c}{dQ^S}$$  is also negative and price elasticity of supply is always less than 1 whatever the level of price and quantity supplied.  Furthermore, as $$Q^S $$ increases (and, therefore, as P increases), the ratio $$\\frac{c}{dQ^S}$$ declines, becoming less negative, such that the elasticity rises and converges towards a value of one.  Of course, a negative choke price may not be realistic as it implies that when price is zero, the supplier is willing to supply some goods for free to the market.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:215",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:318"],
      "Label": null,
      "Body": "The short run is typically defined as that period of time in which the stock of capital is fixed.  By contrast, in the long run, all inputs are variable.  If the product price changes it may take time for firms to adjust their supply.  \u000a<p>\u000aFor example, they may need to invest in new buildings and machinery.  The long run price elasticity of supply is, therefore, likely to be larger (more responsive) than the short run elasticity as firms are only able to adjust their capital stock in the long run.  \u000a<br> \u000aAs a result the slope, b, of the supply equation  $$Q^S=a+bP$$ will generally be larger in the long run than in the short run indicating greater responsiveness to a change in price when all inputs are variable.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:216",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:319"],
      "Label": null,
      "Body": "We have noted that for the inverse supply equation $$P=c+dQ^S$$ the price elasticity of supply can be written:\u000a$$E^S = \\frac{1}{d} \\times \\frac{P}{Q^S}$$\u000aSubstituting for P, this gives:\u000a$$E^S = \\frac{1}{d} \\times \\frac{P}{Q^S}$$\u000a\u000aLook carefully at the expression:\u000a$$ E^S = \\frac{c}{dQ^s} + 1$$\u000aNotice that as $$Q^S$$ increases and, therefore, as P increases, the ratio: $$\\frac{c}{dQ^S}$$  becomes smaller and smaller and converges towards zero. \u000a<p>\u000aThe implication is that with a higher price and quantity supplied, the price elasticity of supply converges towards 1 with a linear supply equation.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:217",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:320"],
      "Label": null,
      "Body": "Suppose the demand and supply equations are given by:\u000a\u000a$$Q^D = a + bP$$\u000a$$Q^S = c + dP$$\u000a\u000aWhere a, b, c, d are some unspecified numbers.\u000a\u000aIn equilibrium:\u000a\u000a$$ Q^D = Q^S \\implies a + bp = c + dP $$\u000a\u000aWhich we can rearrange to get:\u000a\u000a$$P = \\frac{c - a}{b - d} $$\u000a\u000aWhich we call the equilibrium price,\u000a\u000a$$P_e$$\u000a\u000aAnd the equilibrium quantity:\u000a\u000a$$Q_e = a + bP_e = c + dP_e$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:218",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:321"],
      "Label": null,
      "Body": "In equilibrium the plans of sellers are exactly matched with the plans of buyers.  Notice this is an efficient outcome in the sense that the equilibrium price reflects both the costs of producing the good (the supply curve) and the value of the good to consumers (the demand curve).  This is described as market clearing.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:219",
      "@version": 3,
      "@class": "Discussion",
      "in_contain": [],
      "Label": null,
      "Body": "If the plans of sellers do not match with the plans of buyers, this is the case of disequilibrium.\u000aThere are two possibilities, namely excess supply and excess demand.  In a free market, the disequilibrium is only temporary as prices move to restore market equilibrium.  If there are reasons why the price cannot adjust then disequilibrium will tend to persist.",
      "@fieldTypes": "in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:220",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:322"],
      "Label": null,
      "Body": "In the case of excess supply, supply exceeds demand at the current market price and\u000a\u0009producers have unsold goods.  This arises when the market price is above the equilibrium \u000a\u0009level.  To eliminate the surplus and attract more buyers, sellers respond by lowering the\u000a\u0009price of the product.  As price falls in a free market, demand increases and supply declines\u000auntil the market reaches equilibrium and the plans of both buyers and sellers are satisfied.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:221",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:323"],
      "Label": null,
      "Body": "In the case of excess demand, demand exceeds supply at the current market price and\u000aconsumers face a shortage since there are too many buyers chasing too few goods.  This arises when the market price is below the equilibrium level.  Suppliers take advantage by raising the price of the product.  As price increases in a free market, demand declines and supply expands until the market reaches equilibrium and the plans of both buyers and sellers are satisfied.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:223",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:325"],
      "Label": null,
      "Body": "In the case of excess supply, supply exceeds demand at the current market price and producers have unsold goods.  This arises when the market price is above the equilibrium level.  To eliminate the surplus and attract more buyers, sellers respond by lowering the price of the product.  As price falls in a free market, demand increases and supply declines until the market reaches equilibrium and the plans of both buyers and sellers are satisfied.\u000a<p>\u000a<b>Example</b>\u000aConsider the following market.  The demand for a good in this market is given by: $$Q^D = 100 -  0.1 \\times P$$\u000a\u000aThen the supply equation is given by: $$ Q^S = 0.1 \\times P $$\u000a\u000aWith price measured in \u00a3 and quantity in millions. \u000a<p>\u000aSuppose the government imposes a price floor (a minimum price) in the market of: $$ P = 900 $$\u000a\u000a<i>What is the quantity traded in the regulated market at this price? And what is the level of excess supply?</i>\u000a<p>\u000aThe price floor of \u00a3900 generates: $$ Q^D = 100 - 0.1 \\times 900 = 10 $$ \u000a$$ Q^S = 0.1 \\times 900 = 90$$.\u000a\u000aBecause of: $$ Q^D < Q^S $$ the quantity traded is 10m units (the short side of the market) and the excess supply is:\u000a$$ Q^S - Q^D = 80 $$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:224",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:327"],
      "in_contain": ["#19:439"],
      "Label": null,
      "Body": "In the case of excess demand, demand exceeds supply at the current market price and\u000aconsumers face a shortage since there are too many buyers chasing too few goods.  This arises when the market price is below the equilibrium level.  Suppliers take advantage by raising the price of the product.  As price increases in a free market, demand declines and supply expands until the market reaches equilibrium and the plans of both buyers and sellers are satisfied.\u000a<p>\u000a<b>Example</b>\u000aConsider the following market.  The demand for a good in this market is given by:\u000a$$ Q^D = 100 - 0.1 \\times P $$\u000aThe supply equation is given by:\u000a$$ Q^S  = 0.1 \\times P $$\u000aWith the price measured in \u00a3 and quantity in millions. Suppose the government imposes a price ceiling (a maximum price) in the market of: $$ P = 300 $$\u000a<i>What is the quantity traded in the regulated market at this price? And what is the level of excess demand?</i>\u000a<p>\u000aThe price ceiling of 300 generates: $$ Q^D = 100 - 0.1 \\times  300 = 70$$ $$Q^S = 0.1 \\times 300 = 30$$.\u000a\u000aThis means: $$ Q^S < Q^D $$ he quantity traded is 30m units (this is the short side of the market).\u000aExcess demand is:\u000a\u000a$$Q^D - Q^S = 40 $$",
      "@fieldTypes": "in_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:225",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:329"],
      "Label": null,
      "Body": "Total economic welfare relates to the wellbeing of all people including consumers, producers and the government.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:226",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:330"],
      "Label": null,
      "Body": "Consumer surplus is difference between the price that consumers are willing to pay for a good or service and the price they actually pay.  Total consumer surplus in the market is the area below the demand curve and above the market price.\u000a<p>\u000a<b>Example</b> Consider a linear market demand equation:\u000a$$ Q^D = a + bP $$ With a and b being unspecified numbers.\u000aThe demand choke price is the price at which demand is zero:\u000a$$ Q^D = 0 = a + bP \\implies P =  -\\frac{a}{b} $$\u000aFor a price equilibrium the consumer surplus triangle is given by:\u000a\u000a$$ 0.5 \\times Q_{e} \\times ( - \\frac{a}{b} - P_{e}) $$\u000a\u000aWhere an equilibrium quantity is: $$Q_{e}$$\u000aThe equilibrium price is:  $$P_{e}$$\u000aAnd the choke price is given by: $$ -\\frac{a}{b}$$\u000a<p>\u000aSuppose the demand equation is:\u000a$$ Q^D = 5 - P$$\u000aWith $$Q_{e} = 3$$ And $$P_{e} = 4$$\u000aThe consumer surplus is then given by:\u000a\u000a$$ 0.5 \\times 3 \\times (-\\frac{5}{-\\frac{1}{2}}- 4) = 9 $$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:227",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:331"],
      "Label": null,
      "Body": "Producer surplus difference between the price at which producers are willing to sell their goods and the price they actually receive.  Total producer surplus in the market is the area above the supply curve and below the market price.\u000a<p>\u000a<b>Example</b>: Consider a linear supply equation where c and d are unspecified numbers: $$ Q^S=c+dP $$\u000aThe supply choke price at which supply is zero:\u000a$$ Q^S = 0  = c + dP \\implies P = - \\frac{c}{d}$$\u000aFor an equilibrium price $$P_{e}$$, an equilibrium quantity $$Q_{e}$$ and a supply choke price ($$-\\frac{c}{d}$$)  the\u000aproducer surplus is the triangle given by\u000a $$ 0.5 \\times Q_{e} \\times (P_{e}-(-\\frac{c}{d})) $$\u000aSuppose the supply equation is: $$ Q^S = -1 + P $$ with $$ Q_{e} = 3 $$ and $$  P_{e} = 4 $$ \u000aThen the producer surplus is given by $$0.5 \\times 3 \\times (4-(-(-\\frac{1}{1})))=4.5$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:228",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:332"],
      "Label": null,
      "Body": "Total surplus is the sum of consumer surplus and producer surplus.  If a government imposes taxes on a market then the tax revenue is also counted as part of total surplus as the revenue is spent on activities which increase welfare (health, education etc.).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:229",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:333"],
      "Label": null,
      "Body": "A price ceiling is a maximum price, a price cap.  It is designed to transfer surplus from producers to consumers.  A price ceiling which binds will be below the equilibrium market price, generating excess demand.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:230",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:334"],
      "Label": null,
      "Body": "A price floor is a minimum price.  It is designed to transfer surplus from consumers to producers.  A price floor which binds will be above the equilibrium market price, generating excess supply.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:231",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:335"],
      "Label": null,
      "Body": "A quota is a government imposed quantity regulation which sets a limit on the maximum quantity of a good or service which can be supplied.  A quota which binds will reduce supply below the equilibrium level.  The supply curve becomes vertical (perfectly inelastic) at the level of the quota, introducing a regulatory bend in the supply curve.  Where demand intersects this supply curve the price is above the equilibrium price level which would arise without a quota. Similar to a price floor, the higher price transfers surplus from consumers to producers.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:232",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:336"],
      "Label": null,
      "Body": "A sales tax on sellers increases production costs and shifts the supply curve up and to the left.  The market equilibrium price rises and quantity traded declines, redistributing total surplus away from both consumers and producers and to the government (in tax revenue). In the module, we consider the simple case of a specific tax also known as an excise tax.  This is a specific amount of tax per unit of the good sold, for example, \u00a35 on each bottle of whisky.\u000a<p>\u000a<b>A Common Mistake</b>: For an inverse supply curve, the tax (TAX) is simply added to right hand side of the equation:\u000a\u000a$$ P=a+bQ^S+TAX $$ \u000a\u000aThis shows that for, a given level of supply, a higher tax implies a higher price.  In other words, a higher tax shifts the supply curve up and to the left on the standard supply diagram which has price on the vertical axis.\u000a<p>\u000aHowever, for the supply curve written on the left hand side, it is a common error to add TAX to the right hand side in the same way:\u000a\u000a$$ Q^{S}=a+bP+TAX $$ \u000a\u000aWhich is incorrect because this would imply that, for a given price, a higher tax implies a higher quantity supplied.  In\u000aother words, a higher tax shifts the supply curve down and to the right on the standard supply which has price on the vertical axis.  This is clearly a mistake. To avoid confusion, a strong recommendation is always to rearrange a supply equation to put it in its inverse form:\u000a\u000a$$ P=a+bQ^S $$ \u000a\u000aThen add TAX to the right hand side.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:233",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:337"],
      "Label": null,
      "Body": "Suppliers always bear the LEGAL incidence or burden of sales taxes.  They collect the revenue and send it to the government. However, they can pass on part of the ECONOMIC incidence or burden of the tax to consumers through higher prices.  The tax generates a wedge between the price buyers pay $$P_{b}$$ and the price sellers receive $$P_{s}$$ after sending the tax revenue to the tax authorities, where:\u000a\u000a$$ P_{s} = P_{b} - TAX$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:234",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:338"],
      "Label": null,
      "Body": "The share of the tax incidence between buyers and sellers falls more heavily  on the side of the market which is more price inelastic. The intuition is that elasticity measures the willingness of buyers/sellers to leave the market when there is a change in price.  If buyers have a relatively low price elasticity, it means they do not have good substitutes for the product and cannot easily exit the market when the price rises.  This enables suppliers to pass on the sales tax in higher prices to consumers without losing revenue. Typically, sales taxes are placed on goods with low elasticises (alcohol, petrol, tobacco) such that consumers rather than producers bear more of the tax incidence.  An approximation of the tax share for each side of the market is given by the following formulae:\u000a<p>\u000aTax share borne by consumers:\u000a$$ \\frac{E^S}{E^S+|E^D|}$$\u000a\u000aTax share borne by producers:\u000a\u000a$$ \\frac{|E^D|}{E^S+|E^D|}$$\u000a\u000aThese shares range between 0 and 1.  Multiply them by 100 to give a share as a percentage of the tax burden. Where $$|E^D|$$ is the absolute value of the price elasticity of demand (as this is normally negative) and $$E^S$$ is the price elasticity of supply.\u000aNotice that if $$E^S=0$$ and supply is perfectly inelastic then none of the tax is passed on to consumers.  Symmetrically, if $$E^D=0$$ and demand is perfectly inelastic then all of the tax is passed on to consumers in higher prices (their tax share = 1, i.e. 100%)",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:235",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:339"],
      "Label": null,
      "Body": "A deadweight loss is a decline in total surplus arising from a government\u000aintervention in the market.  In the cases of a price ceiling, price floor, quota or sales tax, these interventions all reduce the quantity of trade compared to a free market.This means some transactions no longer occur which previously generated benefits for consumers and producers.  Trade produces gains for consumers and producers. If there is less trade then gains are lost from those transactions which now no longer occur.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:236",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:340"],
      "Label": null,
      "Body": "The more trade that is lost following a government intervention, the greater the deadweight loss.  The magnitude of the effect on trade depends on the  size of the price elasticities since these measure how sensitive the demand of consumers and supply of producers is to a change in price caused by the government intervention.  The higher the price elasticities, the more the market shrinks and the higher is the welfare loss.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:237",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:341"],
      "Label": null,
      "Body": "If the plans of sellers do not match with the plans of buyers, this is the case of disequilibrium.\u000aThere are two possibilities, namely excess supply and excess demand.  In a free market, the disequilibrium is only temporary as prices move to restore market equilibrium.  If there are reasons why the price cannot adjust then disequilibrium will tend to persist.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:238",
      "@version": 5,
      "@class": "Discussion",
      "in_explain": ["#24:342"],
      "in_contain": [],
      "Label": null,
      "Body": "Consider two goods, X and Y.  An indifference curve describes the combinations X and Y which generate the same utility (satisfaction or well-being) for a consumer.  Suppose, for example, utility, is given by: \u000a$$U = XY = 6 $$\u000aThe consumer will be indifferent between the following combinations of X and Y.  These then are all bundles of X and Y on the same indifference curve.\u000a<p>\u000a<table class=\"table\">\u000a  <tr>\u000a    <th>X</th>\u000a    <th>Y</th>\u000a    <th>U = XY</th>\u000a    <th>\u0394X</th>\u000a    <th>\u0394Y</th>\u000a    <th>\u0394Y / \u0394X</th>\u000a  </tr>\u000a  <tr>\u000a    <td>1</td>\u000a    <td>6</td>\u000a    <td>6</td>\u000a    <td>-</td>\u000a    <td>-</td>\u000a    <td>-</td>\u000a  </tr>\u000a  <tr>\u000a    <td>2</td>\u000a    <td>3</td>\u000a    <td>6</td>\u000a    <td>1</td>\u000a    <td>-3</td>\u000a    <td>-3</td>\u000a  </tr>\u000a  <tr>\u000a    <td>3</td>\u000a    <td>2</td>\u000a    <td>6</td>\u000a    <td>1</td>\u000a    <td>-1</td>\u000a    <td>-1</td>\u000a  </tr>\u000a  <tr>\u000a    <td>4</td>\u000a    <td>1.5</td>\u000a    <td>6</td>\u000a    <td>1</td>\u000a    <td>-0.5</td>\u000a    <td>-0.5</td>\u000a  </tr>\u000a  <tr>\u000a    <td>5</td>\u000a    <td>1.2</td>\u000a    <td>6</td>\u000a    <td>1</td>\u000a    <td>-0.3</td>\u000a    <td>-0.3</td>\u000a  </tr>\u000a  <tr>\u000a    <td>6</td>\u000a    <td>1</td>\u000a    <td>6</td>\u000a    <td>1</td>\u000a    <td>-0.2</td>\u000a    <td>-0.2</td>\u000a  </tr>\u000a</table>\u000a<p>\u000a<i>Downward sloping property for goods</i>\u000a<p>\u000aNotice that, when X increases, Y must decrease in order for utility to be constant.  Hypothetically If X had increased but Y had remained unchanged then utility would necessarily increase as the consumer would have more X for a given amount of Y.  So if consumption of X had risen from 1 unit to 2 units but consumption of Y had remained at 6 units then utility would have risen from:\u000a$$ U = XY = 1 \\times 6 = 6 $$\u000aTo:\u000a$$ U = XY = 2 \\times 6 = 12 $$\u000a\u000aFrom this we derive the property that indifference curves for goods always slope down in that if the consumption of one good increases, the consumption of the other good must decrease to maintain utility constant.\u000a<p>\u000a<i>Marginal Rate of Substitution (MRS)</i>\u000a<p>\u000aThe trade-off between the consumption of X and Y is known as the Marginal Rate of Substitution.\u000aNotice from the table that when <b>X = 1</b> the consumer is willing to sacrifice 3 units of Y (<b>&Delta; Y = -3</b>) in order to obtain just one more unit of X (<b>&Delta; X = 1</b>). This is because, unlike X, the consumer already has Y in abundance (<b>&Delta; Y = 6</b>). so she is willing to trade in 3 units of Y to obtain one more unit of X.  In other words, the consumer has a high valuation of one more unit of X in terms of Y.\u000a<p>\u000aBy contrast, when <b>X = 5</b> the consumer is willing to sacrifice only 0.2 of a unit of Y (<b>&Delta; Y = -0.2</b>) n order to obtain another unit of X and maintain utility constant.  This is because she now has lots of X but very little Y.  Therefore, the consumer has a low valuation of one more unit of X in terms of Y.\u000a<p>\u000aThis trade-off between consumption of X and Y is given by:\u000a$$\\frac{\\Delta Y}{\\Delta X}$$ and listed in the final column of the table.  It is known as the Marginal Rate of Substitution of X for Y:\u000a$$MRS_{XY}$$\u000aWhich shows the rate at which a consumer is willing to trade-off (substitute) good Y for an additional unit of good X and still be equally well off.  It is equivalent to the slope of the indifference curve.\u000a<p>\u000aHowever, it is conventional to report the MRS as the negative of the slope:\u000a$$ MRS_{XY} = -\\frac{\\Delta Y}{\\Delta X} $$\u000aTo make this a positive number.\u000a<p>\u000aFor example, if: $$ MRS_{XY} = 2$$  then the interpretation is that, at the current of levels of consumption of X and Y, the consumer is willing to give up two units of Y to obtain an additional unit of X and maintain utility constant.\u000a<p>\u000a<i>Diminishing MRS</i>\u000a<p>\u000aAn important property of the MRS is that it diminishes as X increases.  This is simply another way of saying that a consumer is less willing to trade Y to obtain an additional unit of X as the quantity of Y decreases relative to X.  As a result, the consumer\u2019s valuation of X in terms of Y declines as consumption of X increases.",
      "@fieldTypes": "in_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:239",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:343"],
      "Label": null,
      "Body": "If goods are very close substitutes (e.g. two very similar types of breakfast cereal such as Tesco\u2019s Bran Flakes and Aldi\u2019s Bran Flakes) one consequence is that the trade-off between them does not vary much along the indifference curve.  If I really think that the cereals are close substitutes then the rate at which I trade them off does not depend too much on whether I already have a large quantity of Tesco\u2019s Bran Flakes or a small quantity.  The valuation of an additional unit of Tesco\u2019s Bran Flakes in terms of Aldi\u2019s Bran Flakes is not very sensitive to the initial quantities.\u000a<p>\u000aAs the MRS describes this trade-off it implies that the slope of the indifference curve is fairly constant.  In other words, the MRS falls slowly and this implies the curvature of the indifference curve is relatively shallow (it is almost straight).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:240",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:344"],
      "Label": null,
      "Body": "In the extreme case of perfect substitutes, the trade-off between the two goods is constant, that is to say, it does not depend at all on the initial quantities.  In other words, the MRS is constant and the indifference curves are linear.  The consumer trades goods at the same rate, no matter how many she has of each.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:241",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:345"],
      "Label": null,
      "Body": "If goods have a low degree of substitutability one consequence is that the trade-off between them varies greatly along the indifference curve.  Consider the case of complements such as bread and butter.  The rate at which I trade off units of butter for an additional unit of bread does depend heavily on whether I already have a large quantity or a small quantity of bread.  This is because if I have very little bread but lots of butter, I\u2019m naturally willing to sacrifice a large quantity of butter to obtain the bread I need to spread it on.  Conversely, if I have lots of bread but little butter, my value of additional slice of bread in terms of butter is low: I\u2019m not willing to sacrifice much butter to obtain more bread.\u000a<p>\u000aAs the MRS describes this trade-off, it implies that the slope of the indifference curve changes rapidly.  In other words, the MRS falls quickly and, as a result, the curvature of the indifference curve is high.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:242",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:346"],
      "Label": null,
      "Body": "In the case of perfect complements, such as a left shoe and a right shoe, the goods are consumed in fixed proportions.  In this case the proportion is 1:1.  This means there is no utility from consuming a left shoe without also consuming a right shoe.  Adding more left shoes to a single right shoe will not add to satisfaction.  The consumer would be indifferent between the following combinations of shoes:\u000a\u000a<div class=\"tg-wrap\"><table class=\"table\">\u000a  <tr>\u000a    <th>Left Shoes</th>\u000a    <th>Right Shoes</th>\u000a  </tr>\u000a  <tr>\u000a    <td>1</td>\u000a    <td>1</td>\u000a  </tr>\u000a  <tr>\u000a    <td>1</td>\u000a    <td>2</td>\u000a  </tr>\u000a  <tr>\u000a    <td>1</td>\u000a    <td>3</td>\u000a  </tr>\u000a  <tr>\u000a    <td>1</td>\u000a    <td>4</td>\u000a  </tr>\u000a  <tr>\u000a    <td>1</td>\u000a    <td>5</td>\u000a  </tr>\u000a  <tr>\u000a    <td>2</td>\u000a    <td>1</td>\u000a  </tr>\u000a  <tr>\u000a    <td>3</td>\u000a    <td>1</td>\u000a  </tr>\u000a  <tr>\u000a    <td>4</td>\u000a    <td>1</td>\u000a  </tr>\u000a  <tr>\u000a    <td>5</td>\u000a    <td>1</td>\u000a  </tr>\u000a</table></div>\u000a<p>\u000aIf you plot this indifference curve, it will be L-shaped.  The only way to obtain more utility is to have more of both shoes.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:243",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:347"],
      "Label": null,
      "Body": "The theory of production investigates the choices of firms with respect to the quantities of goods to produce and the combination of inputs to employ.  Many of the concepts of producer theory have their analogues in consumer theory. The firm combines inputs (factors of production) to produce outputs. In simple models, we assume that there are only two distinct inputs to the production of a single commodity, namely, capital and labour.\u000a<p>\u000a<i>Capital</i>\u000a<p>\u000aCapital refers to the stock of buildings, machinery and vehicles. We assume all capital is the same and denote it by K.\u000a<p>\u000a<i>Labour</i>\u000a<p>\u000aLabour refers to input of workers into the production process. We assume all labour is the same and denote it by L.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:244",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:348"],
      "Label": null,
      "Body": "A production function relates the quantities of inputs to the quantity (Q) of the good produced (also known Total Product). Assuming just two inputs, capital (K) and labour (L), the function takes the following form:\u000a<p>\u000a$$ Q = F(K,L) $$ \u000a<p>\u000aNote that it shows the maximum possible output from each combination of inputs. In other words, there is no technological inefficiency in the production process.\u000aThere are many specific functional forms for the production function that are used by economists. The most popular one is the <i>Cobb-Douglas production function</i>:\u000a<p>\u000a$$ Q = AK^{\\alpha}L^{\\beta} $$\u000a<p>\u000aQ=AK\u03b1L\u03b2\u000aWhere \u03b1 and \u03b2 (both positive) denote the sensitivity of production to changes in capital and labour, respectively. A is a positive parameter, often interpreted as \u201ctotal factor productivity\u201d.  It represents the effect of technology on the productivity of the inputs in producing output.  A very simple case often used in EC1002 is where A=1 and \u03b1=\u03b2=0.5 giving:\u000a<p>\u000a$$ Q = K^{0.5}L^{0.5} = \\sqrt{KL} $$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:245",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:349"],
      "Label": null,
      "Body": "The short run is a period of time in which at least one input is fixed and cannot be varied whatever the level of output produced.  Typically, it is assumed that the stock of capital is fixed in the short run at some level:\u000a<p>\u000a$$ K = \\overline{K}$$ \u000a<p>\u000aLabour is the only input to production that can be changed in the short run.\u000aThe short-run production function takes the following form:\u000a<p>\u000a$$ Q = F(\\overline{K}, L) $$\u000a<p>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:246",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:350"],
      "Label": null,
      "Body": "The marginal product of labour is the rise (or fall) in quantity produced after labour has been increased (or decreased) by one unit, keeping capital fixed. This can be calculated with the following formula:\u000a<p>\u000a$$ MP_{L} = \\frac{\\Delta Q}{\\Delta L}$$\u000a<p>\u000aAn important feature of the marginal product of labour is that it is (eventually) diminishing as output increases, given that the capital input is fixed.  This means that each consecutive worker hired will contribute less to production than the previous one.  This is the famous \u201claw of diminishing marginal returns\u201d or \u201cdiminishing marginal productivity\u201d first formulated by Adam Smith.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:247",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:351"],
      "Label": null,
      "Body": "This is defined as the average contribution of every worker to production. It is calculated using the following formula:\u000a<p>\u000a$$ AP_{L} = \\frac{Q}{L}$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:248",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:352"],
      "Label": null,
      "Body": "There is an important relationship between the marginal and average product of labour.  \u000a(1) If the marginal product of labour is below the average product of labour then the average product will decline when another worker is hired (as the extra worker pulls down the average further).  \u000a(2) Conversely, if the marginal product of labour is above the average product of labour then the average product will rise when another worker is hired (as the extra worker pulls up the average further).\u000a(3) The implication of (1) and (2) is that the marginal product and average product of labour are equal at the maximum value of average product.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:249",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:353"],
      "Label": null,
      "Body": "<i>In the long run, we are all dead. \u2013 John Maynard Keynes</i><p>\u000aThe long run is a period of time in which all inputs are variable.  Both capital and labour can be freely varied.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:250",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:354"],
      "Label": null,
      "Body": "This is an analogous concept to marginal product of labour but this time representing the addition to output following an increase in capital by one unit, keeping labour constant. It is calculated as follows:\u000a<p>\u000a$$ MP_{K} = \\frac{\\Delta Q}{\\Delta K}$$\u000a<p>\u000aAs with labour, it is typically assumed that the marginal product of capital decreases as more capital is employed.  The implication is that if a given quantity of output is produced using a capital intensive method (few workers, many machines) then the marginal product of capital will be relatively low due to the law of diminishing marginal returns (and the marginal product of labour will be relatively high).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:251",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:355"],
      "Label": null,
      "Body": "Isoquant means same (<i>iso</i>) quantity of output (<i>quant</i>). An isoquant represents the set of all combinations of capital and labour which produce the same quantity of output. These combinations form a downward sloping curve when plotted in the (K, L) space and one of the inputs is expressed as a function of the other for a fixed quantity of output Q=Q, most often capital as a function of labour:\u000a<p>\u000a$$ K=f(L) $$\u000a<p>\u000aThe isoquant is downward sloping since an increase in one of the inputs must be accompanied with a decrease in the other in order to yield the same output as before.  The slope of the isoquant is given by:\u000a<p>\u000a$$ \\frac{\\Delta K}{\\Delta L} < 0$$\u000a<p>\u000aThe further away from the origin an isoquant lies, the bigger the output level it represents.  The isoquant shares many of the same properties as indifference curves in consumer theory.\u000a<p>\u000a<i>Helpful analogy</i>:\u000a<p>\u000aSuppose you want to create a forest of exactly 10 trees and you have both birch and willow saplings. The more birch saplings you use, the less willow saplings you will need to use to complete the forest (and vice versa). Similarly, the more labour you use to obtain a certain quantity of production, the less capital you will require.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:252",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:356"],
      "Label": null,
      "Body": "The Marginal Rate of Technical Substitution (MRTS) describes the trade-off between labour and capital.  It shows the change in the capital stock when labour is increased by one unit, keeping quantity produced constant. Mathematically, it can be expressed as follows:\u000a<p>\u000a$$ MRTS_{LK} = - \\frac{\\Delta K}{\\Delta L}$$\u000a<p>\u000aBy convention, this represents the change in capital when labour is increased.\u000aThe MRTS is the negative of the slope of the isoquant.  As the slope is negative, the MRTS must be positive.  It shows the rate at which the producer can trade-off (substitute) capital for an additional worker and still produce the same output.  For example, if MRTSLK=2 the interpretation is that, at the current levels of K and L, the firm will need to substitute two units of K for an additional worker if production is held constant.\u000a<p>\u000a<i>Diminishing MRTS</i>\u000a<p>\u000aAn important property of the MRTS is that it diminishes as the labour input increases.  This is simply another way of saying that a producer needs to give up less and less capital in exchange for an additional worker as the number of workers rises (and output is maintained constant).  This is due to the law of diminishing returns.  As more workers are hired and less capital is employed, the marginal productivity of labour declines and that of capital rises. In this case, an extra worker is so unproductive that he or she can only replace a relatively low amount of capital if output is to remain fixed.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:253",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:357"],
      "Label": null,
      "Body": "As with goods in consumption, capital and labour can be more or less substitutable in production. The degree of substitutability is reflected in the curvature of the isoquant. \u000a<p>\u000a<i>Low curvature</i>\u000a<p>\u000aA low curvature implies the MRTS declines slowly and the trade-off between capital and labour does not change much along the isoquant.  This will be the case when the inputs are close substitutes such that their productivity is not affected much by the mix of capital and labour in the production process (whether it is capital intensive or labour intensive).\u000a<p>\u000a<i>Perfect substitutes</i>\u000a<p>\u000aIn the case of perfect substitutes, the MRTS is constant and the isoquants are linear.  This implies that the marginal products of the inputs are not affected at all by the mix of capital and labour for a given output level.  There is no diminishing returns.\u000a<p>\u000a<i>High curvature</i>\u000a<p>\u000aA high curvature implies the MRTS declines quickly and the trade-off between capital and labour does change significantly along the isoquant.  This will be the case when the inputs are not close substitutes such that their productivity is affected by the mix of capital and labour in the production process (whether it is capital intensive or labour intensive).\u000a<p>\u000a<i>Perfect complements</i>\u000a<p>\u000aIn the case of perfect complements, the isoquants are shaped like the letter \u201cL\u201d.  Capital and labour can only be used in fixed proportions to produce output efficiently.  An example is taxi-cabs and taxi-drivers.  A cab cannot be substituted for a driver (at least, not until self-driving cars become available).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:254",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:358"],
      "Label": null,
      "Body": "Since, in the long run, both labour and capital can be adjusted, it is helpful to look at how output is affected by simultaneous changes in BOTH capital and labour. Since MPL represents the increase in total product when labour is increased by one unit and MPK represents the increase in output when capital is increased by one unit, the total change can be expressed mathematically as follows:\u000a<p>\u000a$$ \\Delta Q = MP_{L} \\times \\Delta L + MP_{K} \\times K$$\u000a<p>\u000aWhere \u2206L is the change in the labour input and \u2206K is the change in the capital input. On a given isoquant, output doesn\u2019t change (by definition), implying \u2206Q=0. The equation can be re-written:\u000a<p>\u000a$$ 0 = MP_{L} \\times \\Delta L + MP_{K} \\times K $$\u000a$$  MP_{K} \\times K = -  (MP_{L} \\times \\Delta L)  $$\u000a$$ - \\frac{\\Delta K}{\\Delta L} = MRTS_{LK} = \\frac{MP_{L}}{MP_{K}} $$\u000a<p>\u000aThe MRTS equals the ratio of the marginal products of labour and capital.  If production is capital intensive (few workers, many machines) then the MPL will be high, the MPK will be relatively low and the MRTSLK is high. In this case, an extra worker is so productive that he or she can replace a relatively large amount of capital with output remain fixed.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:255",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:359"],
      "Label": null,
      "Body": "When representing the costs of production, C, for the case of capital and labour inputs in the long run we use the following equation:\u000a<p>\u000a$$ C = rK + wL$$\u000a<p>\u000aFor simplicity, we assume that all units of labour are hired at a fixed wage w and all units of capital are rented at a fixed rental rate r.  In other words, the prices of K and L do not vary with the quantities of K and L.  Thus, rK is total spending on capital and wL is total spending on labour.<p>\u000aThe set of all combinations of capital and labour which have the same total cost for the firm is called an <i>isocost</i>. \u000a<p>\u000aFor any given cost C, we can rearrange the isocost equation as follows in order to express K as a function of L and which can be plotted in (K, L) space:\u000a$$ C = rK + wL$$\u000a$$ rK = C - wL$$\u000a$$ K = \\frac{C}{r} - \\frac{w}{r}L$$\u000a<p>\u000aThis is a linear equation, and its graph is an isocost line. The slope of this line is: \u000a<p>\u000a$$ - \\frac{w}{r}$$\u000a<p>\u000aThis is negative since both w and r are positive parameters.\u000a<p>\u000aIsocosts are parallel downward sloping lines. Similar to isoquants, isocost lines further away from the origin represent higher production costs.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:256",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:360"],
      "Label": null,
      "Body": "There is an infinite number of combinations of capital and labour which yield the desired quantity of output. How does the firm choose the least cost combination of inputs such that it is not possible to reduce costs by changing the mix of capital and labour?  Suppose, for example, that workers are more productive relative to their cost (the wage) than units of capital are to their price (the rental rate).  In other words, we have:\u000a<p>\u000a$$ \\frac{MP_{L}}{w} > \\frac{MP_{K}}{r}$$\u000a<p>\u000an that case, increasing L and reducing K will permit the same level of output to be produced at lower total cost.\u000a<p>\u000aConversely if:\u000a<p>\u000a$$ \\frac{MP_{L}}{w} < \\frac{MP_{K}}{r}$$\u000a<p>\u000aThen costs can be lowered by hiring more capital and firing workers and still producing the same output.\u000a<p>\u000aIt is only when:\u000a<p>\u000a$$ \\frac{MP_{L}}{w} = \\frac{MP_{K}}{r}$$\u000a<p>\u000aThen inputs and equally productive relative to their prices that costs will be minimized for a given level of output.\u000a<p>\u000aThis cost minimizing condition can re-written as:\u000a<p>\u000a$$ \\frac{MP_L}{MP_K} = \\frac{w}{r}$$\u000a<p>\u000aThis is equates the (absolute) slope of the isoquant to the (absolute) slope of the isocost curve.  And, as we know, the ratio of marginal products is the marginal rate of technical substitution between capital and labour:\u000a<p>\u000a$$ MRTS_{LK} = \\frac{MP_{L}}{MP_{K}}$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:257",
      "@version": 16,
      "@class": "Discussion",
      "in_explain": ["#24:361"],
      "Label": null,
      "Body": "Returns to scale measure of how quantity changes when both inputs are scaled up by the same number. \u000aFor a production function Q=F(K, L) there exist three possibilities in terms of returns to scale:+\u000a<p>\u000a<ul>\u000a<li>Constant returns to scale \u2013 scaling both inputs by the same proportionate amount z yields a value of output which is <b>exactly</b> z times the original quantity. Mathematically:\u000a$$F(zK,zL)=zQ $$</li>\u000a<li> Increasing returns to scale - scaling both inputs by the same proportionate amount z yields a value of output which is <b>more than</b> z times the original quantity. Mathematically:\u000a$$F(zK,zL)>zQ$$</li>\u000a<li> Decreasing/diminishing returns to scale - scaling both inputs by the same proportionate amount z yields a value of output which is <b>less than</b> z times the original quantity. Mathematically:\u000a$$F(zK,zL) \\lt zQ$$</li>\u000a\u000a</ul>\u000aConstant returns to scale are often the case and are assumed in the most widely used production functions.\u000a<p>\u000a<i>Helpful analogy</i>:\u000a<p>\u000aWhy are constant returns to scale normally the case?\u000aThink of labour and capital as two ingredients in a recipe, just like egg whites and sugar combined to make meringues. Since you\u2019d expect to make twice as many meringues if you put in twice the amount of sugar and egg whites, you\u2019d expect to obtain twice as much production if you put in twice as much capital and labour.\u000a<p>\u000a<i>Example</i>\u000a<p>\u000aSuppose the firm\u2019s production function is given by:\u000a$$ Q = K^{0.5}L^{0.5} = \\sqrt{KL}$$\u000a<p>\u000aIf initially K=L=5 then:\u000a<p>\u000a$$ Q = \\sqrt{KL} = \\sqrt{5 \\times 5} = 5$$\u000a<p>\u000aSuppose the quantities of K and L both double such that K=L=10 then:\u000a<p>\u000a$$ Q = \\sqrt{KL} = \\sqrt{10 \\times 10} = 10$$\u000a<p>\u000aAs a result of the doubling of both inputs, output has also doubled from 5 to 10.  This indicates that this particular production function exhibits constant returns to scale.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:258",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:362"],
      "Label": null,
      "Body": "Technological change permits a firm to replace old technology with state-of-the-art production techniques and obtain the same output with fewer inputs or, equivalently, more output with the same inputs.  In both cases, the inputs become more productive.  Consider the production function:\u000a<p>\u000a$$ Q = Af(K, L)$$\u000a<p>\u000aHere <i>A</i> denotes the level of total factor productivity.  \u000a<p>\u000aAll else equal, an improvement in technology causes an increase in the value of A and shifts the isoquants inwards towards the origin reflecting the fact that the same level of production can now be obtained with fewer inputs of K and L.  Technical progress, then, will lower costs of producing output.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:259",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:363"],
      "Label": null,
      "Body": "Marginal utility (MU) is the additional satisfaction derived from consuming an additional unit of a good.  In the case of good X, it is given by:\u000a<p>\u000a$$ MU_X = \\frac{\\Delta U}{\\Delta X} $$\u000a<p>\u000aIf the consumption of one more unit:\u000a<p>\u000a$$ \\Delta X = 1$$\u000a<p>\u000aThis generates an additional four units of utility:\u000a<p>\u000a$$ \\Delta U = 4 $$\u000a<p>\u000aTherefore:\u000a<p>\u000a$$ MU_X = 4 $$\u000a<p>\u000a<i>Diminishing marginal utility</i>\u000a<p>\u000aFamously, as consumption of a good increases, the marginal utility of the last unit consumed declines.  \u000a<p>\u000a<i>Relationship between Marginal Utility and the Marginal Rate of Substitution</i>\u000a<p>\u000aSuppose a consumer consumes just two goods X and Y.  On a given indifference curve, if the consumer consumes more of X then consumption of Y must decline in order to maintain utility constant.  The gain in utility from consuming more X is exactly offset by the loss in utility from consuming less Y.\u000a<p>\u000aTo show this, re-arrange the expression for marginal utility for good X to give the change in utility from consuming more X:\u000a<p>\u000a$$ \\Delta U = MU_X \\times \\Delta X$$\u000a<p>\u000aLikewise for good Y:\u000a<p>\u000a$$ \\Delta U = MU_Y \\times \\Delta Y$$\u000a<p>\u000aIf a consumer adjusts their consumption along an indifference curve, the change in utility is by definition zero:\u000a<p>\u000a$$ \\Delta U = 0 = MU_Y \\times \\Delta Y + MU_X \\times \\Delta X$$\u000a<p>\u000aRe-arranging:\u000a<p>\u000a$$ -MU_Y \\times \\Delta Y = MU_X \\times \\Delta X$$\u000a$$ - \\frac{\\Delta Y}{\\Delta X} = \\frac{MU_X}{MU_Y}$$\u000a<p>\u000aThe left hand side of the above equation is the negative of the slope of the indifference curve which is simply the Marginal Rate of Substitution:\u000a<p>\u000a$$ - \\frac{\\Delta Y}{\\Delta X} = MRS_{XY}$$\u000a<p>\u000aIt therefore follows that:\u000a<p>\u000a$$ \\frac{MU_X}{MY_Y} = MRS_{XY}$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:260",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:364"],
      "Label": null,
      "Body": "In addition to preferences, consumer choices are also affected by income (I) and prices:\u000a$$ (P_X, P_Y) $$\u000a These constitute constraints on a consumer\u2019s budget.  Assume a consumer spends all of her income on X and Y (no saving) then the budget constraint is:\u000a<p>\u000a$$ I = P_{X}X + P_{Y}Y$$\u000a<p>\u000aThe maximum quantity of good X the consumer can afford (when Y=0) is:\u000a<p>\u000a$$ \\frac{I}{P_X}$$\u000a<p>\u000a and the maximum quantity of good Y (when X=0) is:\u000a<p>\u000a$$ \\frac{I}{P_Y}$$\u000a<p>\u000aThe higher the price of each good, the smaller the maximum quantity of that good the consumer can afford.\u000aTo find the slope of the budget constraint, rearrange the equation:\u000a<p>\u000a$$ Y = \\frac{I}{P_Y} - \\frac{P_X}{P_Y}X$$\u000a<p>\u000aThe slope then is given by the (negative of) the relative prices of X and Y:\u000a<p>\u000a$$ \\frac{\\Delta Y}{\\Delta X} = -\\frac{P_X}{P_Y}$$\u000a<p>\u000aThe higher is the price of X, the steeper the slope.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:261",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:365"],
      "Label": null,
      "Body": "The optimal choice of X and Y for the consumer is the combination which maximizes her utility given her budget constraint.  To understand this choice suppose, for example, that good X generates a higher marginal utility relative to its price than the marginal utility of good Y relative to its price, namely:\u000a<p>\u000a$$ \\frac{MU_X}{P_X} > \\frac{MU_Y}{P_Y}$$\u000a<p>\u000aThis means the marginal utility per \u00a3 spent is greater for X than for Y.  In that case, reallocating income to increasing consumption of X and reducing consumption of Y will increase total utility.\u000a<p>\u000aConversely if:\u000a<p>\u000a$$ \\frac{MU_X}{P_X} < \\frac{MU_Y}{P_Y}$$\u000a<p>\u000aThen utility can be increased by consuming more units of Y and fewer of X. It is only when:\u000a<p>\u000a$$ \\frac{MU_X}{P_X} = \\frac{MU_Y}{P_Y} $$\u000a<p>\u000aThat it is not possible to shift spending from one good to the other and increase utility.  This then is the optimality condition for the consumer to be maximizing utility subject to her budget constraint.  For the consumer to have the highest utility she can afford requires that the marginal utility per \u00a3 spent is the same for all goods.\u000a<p>\u000aIt can be re-written as:\u000a<p>\u000a$$ \\frac{MU_X}{MU_Y} = \\frac{P_X}{P_Y}$$\u000a<p>\u000aThis equates the (absolute) slope of the indifference curve to the (absolute) slope of the budget constraint.  And, as we know, the ratio of marginal utilities is the marginal rate of substitution between the two goods:\u000a<p>\u000a$$ MRS_{XY} = \\frac{MU_X}{MU_Y}$$\u000a<p>\u000a<p>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:262",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:366"],
      "Label": null,
      "Body": "Suppose the price of good X decreases. The total effect of this price change on quantities of X and Y consumed can be decomposed into an income effect and a substitution effect.  These effects actually occur simultaneously but we can study them separately.  Before doing so, we will work through an example of the total effect of a price change.\u000a<p>\u000a<i> The total effect of a price change </i>\u000a<p>\u000aAs an example, suppose initially that:\u000a$$ U = XY$$\u000a$$ MU_X = Y $$\u000a$$ MU_Y = X $$\u000a<p>\u000aAssume that:\u000a$$ I = 120, P_X = 4, P_Y = 1$$\u000a<p>\u000aThe budget constraint is:\u000a$$ I = P_{X}X + P_{Y}Y = 120 = 4X + Y$$\u000a<p>\u000aAt the optimum:\u000a<p>\u000a$$  \\frac{MU_X}{P_X} = \\frac{MU_Y}{P_Y} $$\u000a$$ \\implies \\frac{Y}{4} = \\frac{X}{1}$$\u000a$$ \\implies Y = 4X$$\u000a<p>\u000aSubstituting this into the budget constraint for Y gives:\u000a<p>\u000a$$ 120 = 4X + Y = 8X $$\u000a$$ \\implies X = 15$$\u000a$$ \\implies Y = 60$$\u000a<p>\u000aThe consumer\u2019s utility is:\u000a<p>\u000a$$ U = XY = 900$$\u000a<p>\u000aNow assume the price of good X falls from   PX=4 to PX=1 all else equal.\u000a<p>\u000aAt the optimum:\u000a<p>\u000a$$ \\frac{MU_X}{P_X} = \\frac{MU_Y}{P_Y}$$\u000a$$ \\implies \\frac{Y}{1} = \\frac{X}{1} $$\u000a$$ \\implies Y = X $$\u000a<p>\u000aSubstituting for Y in the budget constraint gives:\u000a<p>\u000a$$ 120 = X + Y = 2X$$\u000a$$ \\implies X = 60$$\u000a$$ \\implies Y = 60$$\u000a<p>\u000aThe consumer\u2019s utility is:\u000a$$ U  = XY = 3600$$\u000a<p>\u000a\u000aThe total effect of the fall in the price of X had caused consumption of X to increase from 15 to 60 and consumption of Y to remain unchanged at 60.  \u000aIn other words, the total effect for X is an increase in consumption of 45 units and zero change for Y.\u000aUtility has risen fourfold from 900 to 3600.\u000aThe total effect of the price change can be decomposed into the substitution effect and income effect.\u000a<p>\u000a<i>The substitution effect of a price change</i>\u000aWhen relative prices change, consumers will substitute the now relatively cheaper good in place of the relatively more expensive good.  This is the substitution effect.  As the price of good X falls relative to good Y, the consumer always purchases more of X and less of Y according to the substitution effect.\u000aIt is identified by a movement along the indifference curve.  In other words, it is derived as the substitution of X in place of Y holding utility fixed at its original level.  The substitution effect always works in the opposite direction to the price change.  If the relative price of X declines, the consumer always buys more X and vice versa.\u000aWe derived above the optimality condition following the price change, namely:\u000a<p>\u000a$$ \\frac{MU_X}{P_X} = \\frac{MU_Y}{P_Y}$$\u000a$$ \\implies \\frac{Y}{1} = \\frac{X}{1} $$\u000a$$ \\implies Y = X $$\u000a<p>\u000aGiven that the substitution effect is calculated holding utility fixed, the optimality condition Y=X can be substituted into the consumer\u2019s utility function:\u000a<p>\u000a$$ U = XY = 900 = X^2$$\u000a$$ \\implies X = 30 $$\u000a$$ \\implies Y = 30 $$\u000a<p>\u000a(given X and Y cannot be negative).\u000aAccording to the substitution effect then, the fall in the price of X has increased consumption of X from 15 to 30 units and reduced consumption of Y from 60 to 30 units.\u000aIn other words, the substitution effect for X is an increase of 15 units and the effect for Y is a decrease of 30 units.\u000a<p>\u000a<i>The income effect of a price change</i>\u000a<p>\u000aThe price change also increases purchasing power of a given level of money income (I=120 in this example).  The consumer is richer in the sense that she now has more consumption possibilities and can in principle buy more of both X and Y and add to her utility.\u000aThe easiest way to calculate the income effect is as:\u000a<table class=\"table\">\u000a  <tr>\u000a    <th></th>\u000a    <th>Total effect \u2013 Substitution effect = Income effect</th>\u000a  </tr>\u000a  <tr>\u000a    <td>Income effect for good X:</td>\u000a    <td>45 \u2013 15 = 30</td>\u000a  </tr>\u000a  <tr>\u000a    <td>Income effect for good Y:</td>\u000a    <td>0 \u2013 (-30) = 30</td>\u000a  </tr>\u000a</table>\u000aIn the case of good X, consumption of X following the price change increases from 15 to 60 units.  The substitution component of this change is an increase in X from 15 to 30 units.  This leaves the income component which is the increase in X from 30 to 60 units.\u000a<p>\u000aIn the case of good Y, consumption of Y following the price change is constant at 60 units.  The substitution component of this change is a decrease in Y from 60 to 30 units.  This leaves the income component which is the increase in Y from 30 back to 60 units.\u000a<p>\u000aAs these income effects are both positive in the sense that more is consumed when purchasing power rises, this means that X and Y are both normal goods.\u000a<p>\u000a<i>Notes on the income effect</i>\u000a<p>\u000aNote that the income effect compares consumption of X and Y assuming that relative prices are fixed at the new level following the price change.  The only thing that differs is the indifference curve (that is, the level of utility).  In the numerical example, the optimality condition with the new relative prices is Y=X.\u000aOn the original indifference curve we found:\u000a<p>\u000a$$ U = XY = 900 = X^2$$\u000a$$ \\implies X = 30$$\u000a$$ \\implies Y = 30$$\u000a<p>\u000aOn the new indifference curve we found:\u000a<p>\u000a$$ U = XY = 3600 = X^2$$\u000a$$ \\implies X = 60$$\u000a$$ \\implies Y = 60$$\u000a<p>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:263",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:367"],
      "Label": null,
      "Body": "Production costs are usefully divided into short run and long run costs.  In the short run, the firm faces some fixed factors of production, such as capital, while other inputs, such as labour and raw materials, are variable.  Expenditure on these inputs constitute the firm\u2019s fixed costs and variable costs respectively.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:264",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:368"],
      "Label": null,
      "Body": "Fixed costs (FC), sometimes called overhead costs, do not vary with output and need to be paid by the firm even if the quantity of output is zero. For example, the owner of pizzeria needs to pay rent for the restaurant space no matter how many pizzas are served.  In the long run, all inputs are variable and the firm has no fixed costs. Fixed costs can be either avoidable or sunk.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:265",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:369"],
      "Label": null,
      "Body": "Avoidable costs are those fixed costs which can be recovered if the firm stops operating and produces zero output.  For example, a firm may be able to sublet building and machinery to another company.  As a result, it avoids paying these fixed costs itself.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:266",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:370"],
      "Label": null,
      "Body": "Sunk costs are fixed costs which can never be recovered even if the firm shuts down and sells its business and assets.  If, for example, a firm has signed a long term rental contract for a building and is not permitted to sublet, then the rent is a sunk cost.  It cannot be recovered even by closing and producing nothing.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:267",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:371"],
      "Label": null,
      "Body": "An important economic prediction is that sunk costs are sunk and should not affect production decisions in the present.  They are lost forever so cannot affect the costs and benefits of current choices.  Suppose, for example, the firm considers the choice of either (1) shutting down or (2) continuing to operate.  If the firm shuts down, sunk costs are unaffected since they are already paid.  If the firm continues to operate, sunk costs are unaffected since they are already paid.  This means that sunk costs should not enter the decision to shut down or to continue operating.<p>\u000aHowever, there is a powerful behavioural tendency for producers and consumers to consider sunk costs when making choices.  They are difficult to ignore and people pay attention to them.  This is called the sunk cost fallacy.\u000a<p>\u000a<i>Examples of the sunk cost fallacy</i><p>\u000aAn example is investment by the British and French governments in the supersonic jet Concorde in the 1960s.  The project cost six times more than initial estimates.  The project could have stopped when it was clear how expensive it was becoming and that it was unlikely to be profitable.  However, the governments felt that too much had already been invested to quit half way through and this investment would then be wasted.  This is the classic sunk cost fallacy in action.\u000a<p>\u000aAnother example is membership of the gym.  Members have paid a fixed upfront fee, say, \u00a3300.  This fee is a sunk cost, money which is already spent and cannot be recovered.  When choosing whether to attend the gym in the evening or spend time watching television, the membership fee already paid is irrelevant to the decision according to economic theory",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:268",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:372"],
      "Label": null,
      "Body": "Variable costs (VC) are directly related to the quantity produced. A good example is raw material inputs as the firm will purchase a quantity of raw materials that corresponds to the quantity of output it intends to produce.  Simple models often focus on labour as the only variable input.  In that case, variable costs are the same as total spending on labour (L): $$ VC = wL $$\u000a<p>\u000aWhere w is the wage rate per unit of labour.  If we know the (short run) production function then we can also re-write VC in terms of output Q.  For example, suppose: \u000a$$ Q = \\sqrt{L} $$\u000a$$ \\implies L = Q^2$$\u000a$$ \\implies VC = wQ^2$$\u000aThe important point that this algebra illustrates is that variable costs depend on the specification of the production function which relates inputs to outputs.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:269",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:373"],
      "Label": null,
      "Body": "Total costs are simply the sum of fixed and variable costs of output.  They can be represented by the following equation:\u000a$$ TC = FC + VC$$\u000aIn the long run,  FC = 0 therefore\u000a$$ TC = VC $$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:270",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:374"],
      "Label": null,
      "Body": "<i> Average Total Cost (AC or ATC </i>\u000aThis is defined as total costs divided by the level of output; the per-unit cost of producing a good:\u000a$$ AC = \\frac{TC}{Q}$$\u000aThe average cost function is often quadratic, which means its curve is normally U-shaped.  Average costs comprise the sum of average variable costs (AVC) and average fixed costs (AFC).\u000a$$ AC = AVC + AFC$$\u000a<p>\u000a<i> Average Variable Cost (AVC) </i>\u000aThe average cost function is often quadratic, which means its curve is normally U-shaped.  Average costs comprise the sum of average variable costs (AVC) and average fixed costs (AFC).\u000a$$ AC = AVC + AFC$$\u000a<p>\u000a<i>Average Variable Cost (AVC)</i>\u000aThis is defined as the per-unit variable cost of producing a good:\u000a$$ AFC = \\frac{FC}{Q}$$\u000aGiven that fixed costs are fixed at a given level, this means that, as output rises, average fixed cost will decline.  In other words, the same fixed costs will be spread over a larger and larger level of production.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:271",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:375"],
      "Label": null,
      "Body": "Marginal cost (MC) is the additional cost that the production of every consecutive unit of the good incurs. It can be computed as:\u000a$$ MC(Q) = TC(Q + 1) - TC(Q)$$\u000aEquivalently, marginal cost is the slope of the total cost curve:\u000a$$ MC = \\frac{\\Delta TC}{\\Delta Q}$$\u000aAs fixed costs do not change with output, it is also the case that marginal cost is the slope of the total variable cost curve:\u000a$$ MC = \\frac{\\Delta VC}{\\Delta Q}$$\u000aIf labour is the only variable input then variable costs are the same as total spending on workers:\u000a$$ VC = wL $$\u000aAssuming the wage is fixed, then any change in the labour input is reflected directly in the change in variable costs:\u000a$$ \\Delta VC = w\\Delta L$$\u000aWe can use this result to re-write the expression for marginal costs:\u000a$$ MC = \\frac{\\Delta VC}{\\Delta Q} = \\frac{w\\Delta L}{\\Delta Q}$$\u000aSince\u000a$$ \\frac{\\Delta L}{\\Delta Q}$$\u000ais the reciprocal of the marginal product of labour then:\u000a$$ MC = \\frac{\\Delta L}{\\Delta Q} = \\frac{w}{MP_L} $$\u000aWith wages fixed, the marginal cost of a unit of output depends on the marginal product of labour.  Under the law of diminishing marginal productivity, as output increases, the marginal product of labour declines and marginal costs rise.  Intuitively, when the marginal product of labour is low, more workers are needed to produce each additional unit of output so the marginal cost of that output will be high.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:272",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:376"],
      "Label": null,
      "Body": "The minima of average variable costs and average total costs occur at the points where the marginal cost curve intersects these curves.  This is because when MC is less than AC then AC must be falling with output and when MC is greater than AC then AC must be rising. When MC=AC this implies that AC is at its minimum value (likewise for AVC).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:273",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:377"],
      "Label": null,
      "Body": "Economies of scale are a measure of how the total cost of production reacts to a scaling of production quantity.<p> \u000aMore specifically, economies of scale refer to the case when an upscaling of production by a factor z causes production costs to scale up by less than that factor. For example, economies of scale imply that if z = 2 and output doubles, the total cost of that output less than doubles. As a result, average costs of production are falling and the firm is on the left side of the U-shaped long run average cost curve.\u000a<p>\u000aDiseconomies of scale refer to the case when an upscaling of production by a factor z causes production costs to scale up by <b>more</b> than that factor. For example, diseconomies of scale imply that if z = 2 and output doubles, the total cost of that output more than doubles. As a result, average costs of production are rising and the firm is on the right side of the U-shaped long run average cost curve.<p>\u000aIn the case where an upscaling of production by a factor causes total costs to rise by <b>exactly</b> that factor, we say we have constant economies of scale as average costs are unchanged.  This occurs at the bottom of the long-run average cost curve when it is flat.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:274",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:378"],
      "Label": null,
      "Body": "Market structure refers to the characteristics of the supply side of the market regarding the level and type of competition between firms.  The module discusses four market structures.  They are (i) Perfect Competition; (ii) Monopoly; (iii) Oligopoly and; (iv) Monopolistic Competition.  These market structures are distinguished by the number of firms, whether the goods are identical or differentiated, the existence of barriers to entry and exit, and the extent of the power of the firm to set prices.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:275",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:379"],
      "Label": null,
      "Body": "Perfect competition is an idealised model of a market where there is a large number of firms producing an identical product and no barriers to prevent new firms entering the market or existing firms exiting the market in the long run. While no market satisfies these strong assumptions, the model is very useful approximation for highly competitive markets such as that for tomatoes. \u000aUnder these conditions, individual firms have no market power to set prices.  They are price takers rather than price setters.  The equilibrium price is determined by the forces of demand and supply in the market.  This market price, then, is given to firms; they take it as pre-determined and exogenous.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:276",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:381"],
      "Label": null,
      "Body": "As the individual firm is a price taker, it faces a horizontal demand curve at the equilibrium market price Pe. The firm is so small relative to the market that its production decision has no influence on the market and the firm can sell as much as it wishes at that price. As it is horizontal, the demand function facing the firm is perfectly elastic. If the firm\u2019s price was above the equilibrium P>Pe the firm would sell nothing as consumers can always buy the identical product from another firm at Pe. If the firm\u2019s price was below the equilibrium P<Pe it could not possibly increase its profits since it can already sell as output as it wishes at Pe. The firm does not choose the price, rather it chooses how much output to produce taking the price as given.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:277",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:382"],
      "Label": null,
      "Body": "Profit is the difference between the total revenue and the total cost of the firm.\u000a$$ \\Pi = TR - TC $$\u000aTotal revenue is equal to the product of the market price and quantity sold:\u000a$$ TR = P\\times Q $$\u000aSo we can express profit as follows:\u000a$$ \\Pi = P\\times Q - TC$$\u000aSince\u000a$$ ATC = \\frac{TC}{Q}$$\u000a$$ \\implies TC = ATC\\times Q$$\u000a$$ \\Pi = P\\times Q - ATC\\times Q$$\u000a$$ \\Pi = (P - ATC)Q $$\u000aATC is Average Total Cost. This equation shows us that the sign of the difference between price and ATC determines whether the firm makes positive or negative profit (that is, a loss).\u000a<p>\u000aIn the <em>long run</em>, since all costs are variable, we can equivalently write the expression for profit as:\u000a$$ \\Pi = (P - AVC)Q$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:278",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:383"],
      "Label": null,
      "Body": "A famous rule in economics is that a firm maximises its profits \u03c0 at the output level which ensures that marginal cost (MC) equals marginal revenue (MR). \u000a$$ \\Pi = \\Pi_{max} where MC = MR$$\u000a<em>Marginal Revenue</em><p>\u000aMarginal revenue is the additional revenue from the sale of an additional unit.  Mathematically it is given by:\u000a$$ MR = \\frac{\\Delta TR}{\\Delta Q}$$\u000aWhere TR is total revenue.  Since every unit is sold at the market price then it must be true that marginal revenue equals this price in perfect competition:\u000a$$ MR = P$$\u000aEvery additional unit sold will add exactly the same amount to total revenue, namely the market price.\u000a<p>\u000a<em>Marginal Cost</em><p>\u000aThe marginal cost (MC) of an additional unit of output reflects the marginal productivity of inputs.  If the productivity of inputs is relatively low then more need to be hired to produce an additional output such that the marginal cost of producing that extra output is relatively high.  In the short run, if labour is the only variable input then marginal costs will be increasing when the marginal returns to the labour input are diminishing.\u000a<p><em>Marginal Profit</em><p>\u000aFor a given level of output, then, the difference between marginal revenue and marginal cost represents the difference between the additional revenue from one more unit sold minus the additional cost its production will incur.  In other words, <em>MR-MC</em>  is the marginal profit from the additional unit of output.<p>\u000aIf:\u000a$$ MR - MC > 0 $$\u000ahis means that increasing production by one unit will increase profit.  This gives the producer an incentive to expand production. Indeed, the firm will continue to increase output until:\u000a$$ MR - MC = 0 $$\u000aWhich is when there is no further gain from doing so. An increase in production beyond that point will decrease profits, since <em>MR-MC</em> will fall below zero. <p>\u000aSo the firm chooses to produce the level of output where $$MR=MC$$  This is the condition which must be satisfied for profit maximisation.\u000aGiven that $$P=MR$$ for a perfectly competitive firm, it is also the case that profit in perfect competition will be maximised at the level of output where $$P=MC$$ given that $$MR=MC$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:279",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:384"],
      "Label": null,
      "Body": "Shutdown price\u000aMaximising profit doesn\u2019t always mean making a profit. In some cases, the best a firm can do in a market is to minimise its losses. Making a loss does not necessarily mean that the firm should shut down, at least not in the short run.  This is because shutting down in the short run may generate greater losses then continuing to operate at some positive level of output.  The reason is that even if the firm shuts down it has to pay its fixed costs if these are sunk costs which cannot be recovered.  Of course, it also has to pay these fixed costs if it continues to operate.  As the sunk cost fallacy warns us, sunk costs should not influence decision making.  Whether the firm shuts down or not, it will still incur the fixed costs.<p>\u000aThe shutdown decision then depends on the variable costs of production (VC) and how these compare with the total revenue (TR) from continuing to operate.  If this revenue is sufficient to cover variable costs $$TR>VC$$ then it is better to continue to produce output.<p>\u000aDividing by Q, the condition can be alternatively represented as the firm should continue producing if:\u000a$$ P > AVC $$\u000aOnly if price falls below the <b>minimum value of AVC</b> should the firm shutdown. In that case, the price is so low that firm is unable to cover its variable costs of production and shutting down is preferable. It is conventional to call:\u000a$$ P = minimum AVC$$ the <b>shutdown price</b> where the firm is indifferent between producing and shutting down.  Since this is the minimum value of the AVC curve, it is also the case that the marginal cost curve passes through this point and AVC = MC.\u000a<p>\u000aIn the long run when all costs are variable, the firm would exit the industry if it is unable to earn profits.  This is the case when $$P<minimum LATC$$ where LATC is long run average total cost.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:280",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:385"],
      "Label": null,
      "Body": "The quantity supplied is determined by the profit maximising condition: $$MC=MR$$ \u000aSince P=MR then P=MC and for each given level of price it is the marginal cost curve which determines how much output is produced.  The marginal cost curve is, therefore, the firm\u2019s short run supply curve.  Since the firm shuts down at a price level below the minimum of average variable costs, this means the supply curve is restricted to the portion of the marginal cost curve above the point where $$MC=AVC$$.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:281",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:386"],
      "Label": null,
      "Body": "We obtain the industry supply curve from the individual supply curves of firms by simply adding up the production quantities of all firms at a given price. For example, with 100 firms who produce 2 units at P=3, the whole industry will produce 200 units at P=3.  Market supply then is given by the sum of the marginal cost curves of each individual firm. The market price is determined as usual by the intersection of the industry demand and industry supply curve.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:282",
      "@version": 4,
      "@class": "Discussion",
      "in_explain": ["#24:387"],
      "Label": null,
      "Body": "The producer surplus: $$PS$$ is the area between the price level and the marginal cost curve as this is the individual firm\u2019s supply curve. \u000aMathematically, we can represent the producer surplus (for a discrete good, i.e. a good which can only occur in whole number quantities, like a TV) in the following way for each unit of output:\u000a$$ Q = 1, 2, ..., Q^*$$ where $$Q^*$$ is the profit maximising level of output:\u000a$$ PS = (P - MC(1)) + (P - MC(2)) + ... + (P - MC(Q^*))$$\u000aRearranging:\u000a$$ PS = P\\times Q^* - [MC(1) + MC(2) + ... + MC(Q^*)]$$\u000aTherefore $$P\\times Q^*$$ is the firm's total revenue. The sum of the marginal costs of each unit is the same as the firm\u2019s total variable costs.  This is because marginal costs do not add to fixed costs.  To summarise, we have:\u000a$$ PS = TR - VC $$\u000aSince we know that\u000a$$ AVC = \\frac{VC}{Q} \\implies VC = AVC\\times Q$$\u000aWe can re-write the expression for producer surplus as:\u000a$$ PS = P\\times Q^* - AVC^* \\times Q^*$$\u000a$$ PS = (P - AVC^*)Q^*$$",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:283",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:388"],
      "Label": null,
      "Body": "The difference between producer surplus and profit is related to fixed costs and defined as follows:\u000a<p>\u000a<em>Producer Surplus</em>\u000a$$ PS = TR - VC $$\u000a<em>Profit</em>\u000a$$\\Pi = TR - TC = TR  - VC  - FC $$\u000aThis implies that:\u000a$$ \\Pi = PS - FC$$\u000aThe firm can operate in the short run with a negative profit (a loss) but will never operate with a negative producer surplus since that would mean the revenue would not cover variable costs.  In other words, the firm would shut down if producer surplus is negative.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:284",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:389"],
      "Label": null,
      "Body": "Perfectly competitive markets in the long run differ in significant ways from the short run.<p>\u000a1) All inputs are variable and, as a result, there are no fixed costs.  Total costs and variable costs are, therefore, identical.  Likewise long run average total costs (LATC) and average variable costs (LAVC) are the same.<p>\u000a2) In the long run, the firm shuts down if production is unprofitable and price is below the minimum of the long run average total cost curve.  The shutdown price is given by <em>P=minimum LATC</em> where the firm is indifferent between leaving the market and continuing to operate.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:285",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:390"],
      "Label": null,
      "Body": "A firm will enter the market if it expects to make a profit. This means that, for entry to occur, price would have to exceed long-run average total cost (LATC). The entry of a new firm in the market will increase supply in the market and put downward pressure on the market price. As more and more firms enter the market, the price is eventually reduced to the long run competitive equilibrium where <em>P=LMC=minimum LATC</em> where LMC is long run marginal cost.  At this point no potential entrant will choose to enter the market, since expected profit is zero.\u000a<p>\u000aIn a perfectly competitive market in equilibrium no firm makes any profit, in the sense of economic profit. The accounting profit they make is just enough to keep them in business and make them equally as well off as any outside option, but no more than that.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:286",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:391"],
      "Label": null,
      "Body": "Suppose the market price is below the level of minimum average total cost. In such a case, firms already in the industry are making losses and will choose to exit.  As the number of firms diminishes, the supply curve shifts up and to the left and this will put upward pressure on the market price until the long run competitive equilibrium is attained in which price now equals the minimum average total cost, losses are eliminated and profits are zero. It is realistic to assume that there are cost differences between firms and the firms with costlier production will be those who exit first.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:287",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:392"],
      "Label": null,
      "Body": "An appealing property of perfectly competitive markets is that they produce the quantity of output which maximises total surplus.  In a competitive market, price equals marginal cost in equilibrium.  This means that all output for which the value to buyers (the price) exceeds the cost to sellers (the marginal cost) is produced. Moreover, no output for which the value to buyers (the price) is less than the cost to sellers (the marginal cost) is produced.  As a result social welfare is maximised.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:288",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:393"],
      "Label": null,
      "Body": "A monopoly is a single seller who, therefore, faces all of the market demand for their product. This is why a monopolist\u2019s demand curve is downward sloping.  The monopolist has market power to set the price of its output.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:289",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:394"],
      "Label": null,
      "Body": "Barriers to entry are factors which prevent firms from easily entering a market and competing profitably.  They are the source of market power which permit monopoly profits to persist.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:290",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:395"],
      "Label": null,
      "Body": "Natural monopoly refers to a context in which the average total cost curve of a firm exhibits economies of scale. In other words, the average total cost of the monopolist will fall as quantity increases. Average total costs are the sum of average fixed costs and average variable costs.\u000a$$ ATC = AFC + AVC $$\u000aEquivalently:\u000a$$ ATC = \\frac{FC}{Q} + AVC $$\u000aAssuming that fixed costs (FC) are high and average variable costs (AVC) are fairly constant as output changes, then average total costs (ATC) are dominated by fixed costs. As output increases, AFC decline and so do ATC. If an incumbent firm monopolises the market and so benefits from very low ATC it will be difficult for another firm to enter the market and compete for market share as the entrant\u2019s ATC will be much higher given its smaller level of production. In this sense, the existence of a natural monopoly acts as a barrier to entry. Nevertheless, it is socially efficient for such an industry to have only one single producer, as every other firm would have to duplicate very high fixed costs.<p>\u000aThere are several industries which are good examples of natural monopolies. Among them are electricity transmission, nationwide railways and postal services. The fixed costs in these industries are huge and the presence of more than one firm sharing the market would raise average costs substantially. Given their market dominance, natural monopolists are often regulated by governments to prevent firms from extracting excessive profits from their market power.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:291",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:396"],
      "Label": null,
      "Body": "Switching costs are a barrier to entry. They refer to barriers which discourage a customer from switching to a competitor product. An example would be a customer who receives frequent flyer benefits from an airline. Even if a competitor company offers lower prices, the customer will be reluctant to use their services for fear of losing their existing frequent flyer status and the benefits it generates. Consumers\u2019 switching costs may be sufficient in some cases to deter competitors from entering a market.<p>\u000aAn important case of switching costs is found in network goods \u2013 goods whose value to the consumer rises with the number of other customers who use them. An example of a network good is social media such as Facebook. Users are typically reluctant to switch from a social network with billions of users to another with only a few.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:292",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:397"],
      "Label": null,
      "Body": "Consumers do not necessarily see all products on a market as perfect substitutes for each other and often have a preference for a particular brand, for example, Apple products, and are willing to pay a price premium to purchase the good.  Such loyalty generates a degree of market power for the favoured brand and a barrier to successful competition from rivals.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:293",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:398"],
      "Label": null,
      "Body": "If a firm manages to control a key input to production, it can make it costly for every potential competitor to obtain this input, and thus prevent them from entering the market.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:294",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:399"],
      "Label": null,
      "Body": "Patents are also barriers to entry in that they provide legal protection from market competition and so confer monopoly power on an inventor. The intention of patents is to incentivise innovation and technological progress. Innovation creates a public good since it either makes production processes more efficient and lowers prices or else introduces new products to the market, adding to consumer surplus in both cases. Innovation however, often comes with high research and development (R&D) costs and requires the use of expensive, highly-qualified labour input. These very large fixed costs require the incentive of monopoly profits to make R&D investment worthwhile. Patenting an innovation provides the inventor with a monopoly over the production and sale of the new technology or product for a number of years (16 years in the UK). The patent thus generates a welfare trade-off.  There is a (deadweight) loss of surplus arising from monopoly pricing during the patent period but also a gain arising from the benefits of new innovations.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:295",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:400"],
      "Label": null,
      "Body": "In a perfectly competitive market, the additional (marginal) revenue generated by the sale of one more unit of a good equals the price of that product.  However, the monopolist faces a downward sloping demand curve.  This means that in order to sell an additional unit the firm must reduce the price.  There are two opposite effects on total revenue.  First, additional revenue is generated from the sale of the extra unit equal to the selling price.  But, second, the price also declines for all other the units sold which were previously on sale at a higher price.  The net result is that marginal revenue will be less than price for a monopolist.\u000a<p>\u000aAssume the following linear form of the inverse demand function:\u000a$$ P = a - bQ$$\u000aWhere a and b are constants. The slope is given by:\u000a$$ \\frac{\\Delta P}{\\Delta Q} = - b < 0$$\u000aMarginal revenue equals the slope of total revenue.\u000a$$ MR = \\frac{\\Delta TR}{\\Delta Q}$$\u000aTotal revenue can be written:\u000a$$ TR = P\\times Q = (a - bQ)Q = aQ - bQ^2$$\u000aThe slope of this quadratic total revenue function is marginal revenue and is given by (you do not need to know how to derive this slope but it will be obvious to those familiar with calculus):\u000a$$ MR = a - 2bQ$$\u000aThe important point is that marginal revenue itself has a slope of <em>-2b</em>, that is, it is twice the slope of the inverse demand function. The inverse demand curve and the MR curve also have the same intercept on the vertical axis at <em>a</em>.\u000a<p>\u000aAs in all market structures, profit is maximised at that level of output Q* where marginal cost equals marginal revenue:\u000a$$ MC = MR $$\u000aSubstituting for MR, we have:\u000a$$ MC = a - 2bQ^*$$\u000aSince\u000a$$ P = a - bQ^*$$\u000aIt is the case that under monopoly:\u000a$$ P > MC$$\u000a<p>\u000aTo see this note that:\u000a$$ P-MC=(a-bQ^*)-(a-2bQ^*)=bQ^*>0$$\u000aThe difference between price and marginal cost bQ* is known as the firm\u2019s price <em>markup</em>.<p>\u000aAs usual, profit is the difference between the total revenue and the total cost of the firm.\u000a$$ \\Pi = TR - TC$$\u000aTotal revenue is equal to the product of the market price and quantity sold:\u000a$$ TR = P\\times Q$$\u000aSo we can express profit as follows:\u000a$$ \\Pi = P\\times Q - TC$$\u000aSince\u000a$$ ATC = \\frac{TC}{Q} \\implies TC = ATC\\times Q$$\u000a$$ \\implies \\Pi = P\\times Q - ATC\\times Q$$\u000a$$ \\Pi = (P - ATC)Q$$\u000aA <em>monopolist will never choose an output level where demand is price inelastic</em>.  The reason is that if it does so the monopolist can always increase profits, increase revenue and reduce costs by choosing a lower output level and a higher price.  To see this, note that total revenue is maximised at the output level where marginal revenue is zero:\u000a$$ MR = a - 2bQ  = 0 \\implies Q = \\frac{a}{2b}$$\u000aThis revenue maximising output level is at the midpoint of the demand curve where the price elasticity of demand equals one.  Any other output level will generate lower total revenue.  A higher output level, say $$Q^H$$, on the inelastic portion of the demand curve, not only reduces revenue but also increases costs.  Contrast this with a lower output level, say $$Q^L$$ on the elastic portion of the demand curve, which happens to give the same revenue as at $$Q^H$$  Producing less output at $$Q^L$$ will necessarily have lower costs than at $$Q^H$$  If total revenue is the same at each of these two output levels then profit must be higher at $$Q^L$$ than $$Q^H$$.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:297",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:401"],
      "Label": null,
      "Body": "Compared to competitive markets, monopolists increase price and reduce quantity produced.  As a result, there are fewer gains from trade which causes a loss in social welfare.  More specifically, since under monopoly price is greater than marginal cost, <em>P>MC</em>, there are transactions which would be of mutual benefit to both parties, as the value to the buyer (P) exceeds the costs to the seller (MC), but which do not occur.  Monopoly then creates a deadweight loss.  The higher prices under monopoly reduce consumer surplus and increase producer surplus compared to perfect competition.  Welfare is further adversely affected by the incentives which firms face to invest resources in acquiring a monopoly status or protecting a monopoly position.  Firms may spend large sums, for example, in lobbying governments to make decisions which favour them.  This activity is known as rent seeking (rent here refers to profit) and is a social waste since it is essentially attempting to benefit one firm at the expense of rivals.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:298",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:402"],
      "Label": null,
      "Body": "Given that monopoly generates losses in social welfare, governments are active in regulating market power in order to protect the consumer.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:299",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:403"],
      "Label": null,
      "Body": "Prices may be directly regulated in cases of natural monopoly in order to prevent a firm from using its market power to exploit consumers.  This can be achieved by the government placing a cap on the market price. Such price regulation would be fully socially efficient if price is set equal to the firm\u2019s marginal cost.\u000a<p>\u000aHowever, there is a serious problem with such regulation in that it would result in the natural monopolist making sustained losses. \u000a<p>\u000aConsider a total cost function for a natural monopoly given by:\u000a$$ TC = a + bQ$$\u000aWhere <em>a</em> is greater than 0 and represents the firm\u2019s fixed costs. The associated average cost function is:\u000a$$ ATC = \\frac{a}{Q} + b $$\u000aAs <em>Q</em> rises,$$\\frac{a}{Q}$$ decreases and so do average total costs.  This is the case of economies of scale which is a defining characteristic of a natural monopoly.\u000a<p>\u000aBy setting price equal to marginal cost, the government regulator imposes:\u000a$$ P = MC = b$$\u000aThe reason why marginal cost is equal to b is because this is the slope of the total cost curve:\u000a$$ TC = a + bQ$$\u000aThe profit of the firm equals its total revenue minus total costs:\u000a$$\\Pi=TR-TC=P\u00d7Q-TC=bQ-(a+bQ)=-a $$\u000aAnd because <em>a</em> is always greater than 0 the firm will face loses. To put it another way, as output increases, ATC converge towards b as $$\\frac{a}{Q}$$ diminishes:\u000a$$ ATC = \\frac{a}{Q} + b$$\u000abut always remain above <em>b</em>. If price is set at:\u000a$$ P = MC = b$$\u000athen price exceeds ATC and profit must be negative:\u000a$$ \\Pi = (P - ATC)Q < 0$$\u000a\u000aIf the government can directly observe the marginal cost of the natural monopolist (a case of symmetric information), the firm will additionally have no incentive to reduce the costs of production and make it more efficient, since the government will respond by further decreasing the equilibrium price which will eat up any gain the firm obtains from the increased efficiency. Conversely, if the government cannot directly observe the firm\u2019s marginal cost (a case of <em>asymmetric information</em>), the firm has an incentive to report higher marginal costs to the government than is actually true in order for the price to be set above the actual marginal cost and for the firm to make a profit.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:300",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:404"],
      "Label": null,
      "Body": "Antitrust legislation (also called competition policy) is intended to promote competition within markets by restricting firms from acting in a way that prevents competitors from entering and thriving in the market. Such legislation is particularly often used in industries where there are one or a few established firms with market power. Antitrust laws can, for example, prevent a big firm from acquiring some of its competitors, or mandate the break-up of a large firm which is deemed to have too much market power. Antitrust legislation tends to be very strong in high-income countries but weaker elsewhere.\u000a<p>\u000aOne of the strongest prohibitions in most antitrust legislation is the ban on <em>collusion</em> \u2013 cooperation between competing firms in the market. In the US, for example, discussing pricing strategies with your competitors is a criminal act.\u000a<p>\u000aA problem arises with antitrust legislation if it prevents mergers and acquisitions (M&As) which would actually make the market more efficient and make consumers better off. At times, these \u2018good\u2019 M&As are hard to distinguish from \u2018bad\u2019 M&As which would harm customers.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:301",
      "@version": 3,
      "@class": "Discussion",
      "in_explain": ["#24:405", "#24:406"],
      "Label": null,
      "Body": "A market structure where all firms have some market power, but do not have complete market power. In the sense of, they can control their prices to extract some abnormal (nonzero) economic profit but the presence of other firms in the market prevents them from being able to extract monopoly levels of profit.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:302",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:407"],
      "Label": null,
      "Body": "Oligopoly is a market in which a small number of firms compete. The name is derived from the Greek words <i>oligos</i> (\u2018several\u2019) and <i>polein</i> (\u2018to sell\u2019).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:303",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:408"],
      "Label": null,
      "Body": "Collusion is defined as behaviour in which firms coordinate their actions and collectively act as a monopoly in order to extract monopoly profits. A cartel is a form of collusion in which firms collectively act as a monopoly in the market. In some contexts, the term cartel refers to cases where collusion arises in an explicit written agreement between the firms.\u000a<p>\u000a<i>Cartels tend to be unstable since</i>, once in a cartel, every company can achieve higher profits by breaking the cartel agreement and selling their produce at a slightly lower price. This, however, is contingent on all other cartel members not breaching the agreement themselves. If every company acts on the incentive to breach the agreement, outputs will grow, prices will go down, eventually stabilizing at the competitive level, and profits will be decreased as a result. This will, in turn, create a new incentive to form a cartel.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:304",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:409"],
      "Label": null,
      "Body": "Cournot oligopoly is a model of the market where firms sell identical products and every company chooses what quantity to produce. All goods are sold for the same price, which is determined by the total quantity produced by all firms in the market. Firms choose quantities simultaneously and there is no communication between them.\u000a<p>\u000a<i>Equilibrium in a Cournot oligopoly</i>:\u000aSuppose we have two firms in a Cournot competitive oligopoly. (an oligopoly with two firms is also called duopoly). They produce an identical good which has the following demand curve:\u000a$$ P = a - bQ$$\u000aThe marginal cost of Firm 1 is $$mc1$$ and the marginal cost of Firm 2 is $$mc2$$\u000aLet\u2019s call the quantity the first firm produces Q1 and the quantity the second firm produces Q2. Obviously:\u000a$$ Q = Q_1 + Q_2$$\u000aWe can plug that into our first equation which will yield:\u000a$$ P = a - bQ_1 - bQ_2$$\u000aNow, we have to look at the market from the perspective of each firm. Let\u2019s start with Firm 1. Firm 1 does not know the quantity Firm 2 is intending to produce, so it is going to treat Q2 as a constant. For convenience we\u2019re going to rewrite the price equation as follows:\u000a$$ P = (a - bQ_2) - bQ_1$$\u000a$$Let A = a - bQ_2$$\u000a$$ P = A - bQ_1$$\u000aThis equation is called Firm 1\u2019s <b>residual demand curve</b>.\u000a<p>\u000aOn the basis of this residual demand curve, Firm 1 can maximise its profits by equating marginal revenue to marginal cost. The <b>residual marginal revenue of Firm 1</b> has twice the slope of the residual demand curve.\u000a$$ MR_1 = A - 2bQ_1$$\u000aAfter setting it equal to  MC:\u000a$$ MR_1 = MC_1$$\u000a$$A - 2bQ_1 = mc_1$$\u000a$$Q_1 = \\frac{A - mc_1}{2b}$$\u000aSubstituting for our A:\u000a$$ Q_1 = \\frac{a - bQ_2 - mc_1}{2b}$$\u000a$$ Q_1 = \\frac{a - bQ_2 - mc_1}{2b}$$\u000a$$ Q_1 = \\frac{a - mc_1}{2b} - \\frac{1}{2}Q_2$$\u000aWe get an expression of the optimal quantity of Q1 as a function of Q2. This equation is called Firm 1\u2019s <b>reaction curve</b>. By convention, Q2 is plotted on the vertical axis and Q1, so let\u2019s rewrite it in terms of Q1:\u000a$$ Q_2 = \\frac{a - mc_1}{b} - 2Q_1$$\u000aIn the same way we used for Firm 1, we can derive Firm 2\u2019s reaction curve:\u000a$$ Q_2 = \\frac{a - mc_2}{2b} - \\frac{1}{2}Q_1$$\u000aIf we set the two equations above equal to each other, we can derive the optimal quantities of Q1 and Q2, which are the best responses of each firm to the actions of its competitor.\u000a$$ \\frac{a- mc_1}{b} - 2Q_1 = \\frac{a- mc_2}{2b} - \\frac{1}{2}Q_1$$\u000a$$ -1.5 Q_1 = \\frac{a - mc_2}{2b} - \\frac{a - mc_1}{b}$$\u000a$$ Q_1 = \\frac{a - mc_1}{1.5b} - \\frac{a - mc_2}{3b} = \\frac{a - 2mc_1 + mc_2}{3b} $$\u000a$$ Q_2 = \\frac{a - mc_2}{2b} - \\frac{1}{2}(\\frac{a - 2mc_1 + mc_2}{3b})$$\u000a$$ Q_2 = \\frac{a - mc_2}{2b} - \\frac{a - 2mc_1 + mc_2}{6b} = \\frac{a - 2mc_2 + mc_1}{3b} $$\u000aThe ordered pair:\u000a$$ (Q_1, Q_2) = (\\frac{a - 2mc_1 + mc_2}{3b}, \\frac{a - 2mc_2 + mc_1}{3b} )$$\u000arepresents the best response of each firm to the other one\u2019s action. These are the quantities which the firms will end up producing on the market in the long run. They define what is called the C<i>ournot equilibrium</i> in this duopolistic market.\u000aThe total quantity produce on this market will be:\u000a$$ Q= Q_1 + Q_2 = \\frac{2a - mc_1 - mc_2}{3b}$$\u000aWhich means the market price will be:\u000a$$ P = a - bQ = a - b\\frac{2a - mc_1 - mc_2}{3b}$$\u000a$$ P = A - \\frac{2a - mc_1 - mc_2}{3} $$\u000a<p>\u000a<I>Numerical Example</i>\u000aApple (with iOS) and Google (with Android) have a joint share of almost 98% of the smartphone operation system market, making it one of the most prominent examples of a real-life duopoly. Suppose the demand-curve in the smartphone operation system market is P=20-0.5Q. The cost of fitting an additional phone with an operational system is 12 for Android and 10 for iOS. The fixed costs are 2 (million) for Android and 3 (million) for iOS. Find the number of phones which will be fitted with each operation system, the market price of the operation systems, and the amount of profit Apple and Google will be generating. \u000a<p>\u000aLet $$Q_A$$be the number of phones fitted with Android and $$Q_I$$ be the number of phones fitted with iOS (quantities are in millions). The total demand on the market will be:\u000a$$ Q = Q_A + Q_I$$\u000aWe can thus rewrite the demand curve as follows:\u000a$$P=20-0.5(Q_A+Q_I)$$\u000aAndroid will treat iOS\u2019s supply as a constant, so it\u2019s helpful to define $$A_1=20-0.5Q_I$$\u000aTherefore $$ P = A_1 - 0.5Q_A$$\u000aThis is Android\u2019s <i>residual demand curve</i>. From it, we can derive Android\u2019s <i>residual marginal revenue</i>:\u000a$$ MR_1 =  A_1 - Q_A$$\u000aAndroid\u2019s profit will be maximized when its residual marginal revenue equals its marginal cost:\u000a$$MR_1=A_1 - Q_A=12$$\u000a$$MR_1=20 - 0.5Q_I - Q_A=12$$\u000a$$Q_A = 8-  0.5Q_I$$\u000aThis is Android\u2019s <i>reaction curve</i>. It shows what quantity Android would be best off putting out in response to whatever quantity iOS puts out. It tracks Android\u2019s best response to any strategy of iOS.\u000aFor iOS, the residual demand curve is the following:\u000a$$ P = A_2 - 0.5Q_I$$\u000aWhere $$A_2 = 20 - 0.5Q_A$$\u000aIts residual marginal revenue is therefore: \u000a$$MR_2 = A_2 - Q_I$$\u000aAgain, profit is maximised where residual marginal revenue equals marginal cost:\u000a$$MR_2 = A_2 - Q_A = 10$$\u000a$$MR_2 = 20 - 0.5Q_A - Q_I = 10$$\u000a$$Q_I = 10 - 0.5Q_A$$\u000aThis is iOS\u2019s <i>reaction curve</i>. It shows what quantity iOS would be best off putting out in response to whatever quantity Android puts out. It tracks iOS\u2019s best response to any strategy of Android.<p>\u000aThe two reaction curves (of Android and iOS) are a system of equation which can be solved for the optimal values of QA and QI \u2013 the only pair of values which satisfies both best response conditions. And since each firm will try to respond to its opponent in the best possible way, these are the quantities that will end up being produced.\u000a$$ Q_A = 8 - 0.5Q_I$$\u000a$$ Q_I = 10 - 0.5Q_A$$\u000aThe solution to this system is $$Q_A=4, Q_I=8.$$ This means, at equilibrium, 8 million phones will be fitted with iOS and 4 million will be fitted with Android. The total quantity in the market will be Q=12. The systems will be sold for $$P=20-0.5Q  = 20 - 0.5\\times 12 = 20 - 6 = 14$$ (while in reality Android sells its software to phone manufacturers, we can assume Apple sells iOS to itself, by adding the costs of it to the price of an iPhone).\u000aTo find the profits of Google (through Android), we first need to identify their total cost function. The fitting of every additional phone with Android costs 12, so the fitting of an amount of phones QA will cost 12QA. The fixed costs of Android are 2. Therefore: $$TC = 12Q_A + 2$$\u000aWhich means:\u000a$$ \\Pi_A  = TR -TC = P \\times Q_A - 12Q_A - 2$$\u000a$$ \\Pi_A = 14 \\times 4 - 12\\times 4 - 2 = 6 (millions)$$\u000aSimilarly, the total cost function of Android is:\u000a$$ TC =  10Q_I + 3 $$\u000aAnd its profit function is:\u000a$$ \\Pi_I = TR - TC = P \\times Q_I - 14Q_I - 3 $$\u000a$$ \\Pi_I = 14 \\times 8 - 10 \\times 8 - 3 = 29 (millions)$$\u000a<p>\u000a<i> Reflection</i>\u000a<p>\u000aThe numbers chosen in this example are arbitrary and not based on real-world data but show an important discrepancy with reality \u2013 iOS makes way less profit than Android, seriously? And as probably every person who\u2019s ever looked to buy a phone knows, iPhones cost substantially more than Android phones \u2013 something which is totally inconsistent with the Cournot model, which assumes all firms sell their produce at the same market price. So, the real-world market for smartphone operation systems must not be a Cournot oligopoly \u2013 it should be a market in which firms can freely choose their price. Moreover, while iPhones and Android phones have the same basic functionality, consumers do not consider them perfect substitutes \u2013 iPhones have certain features which are deemed better, are thought to be more aesthetic and are to some extent a status symbol. Therefore, we need a model which encompasses the idea of product differentiation \u2013 the ability of producers to distinguish their products from similar products in order to make them more appealing to customers.\u000aSuch models do exist and are briefly explored in the \u201cOther types of oligopoly\u201d section on ViLO, and in more detail in your textbook.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:305",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:410"],
      "Label": null,
      "Body": "The Bertrand model of competition is similar to the Cournot model but has one key difference: instead of choosing the quantities which they want to produce, firms choose (simultaneously) the prices at which they want to sell their goods. The total demand in the market is then determined by the pricing decisions of the two firms and the firms produce enough to meet it. <p>\u000aThe Bertrand model can be adapted both for markets with identical and for markets with differentiated goods.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:306",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:411"],
      "Label": null,
      "Body": "The Stackelberg model is also similar to Cournot in that the firms choose the quantities at which to produce and the price is determined by the total quantity the firms put out on the market. The difference is that unlike in Cournot, where the two firms choose the production quantities at the same time, independent of each other, in Stackelberg the firms choose to produce one after another (sequentially). One of the firms is a first mover in this game and chooses a production quantity. The other one observes this move and chooses its production quantity based on that first move.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:307",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:412"],
      "Label": null,
      "Body": "A market with a large number of firms, which sell similar but differentiated products which customers do not consider perfect substitutes. For example, all the cafes in St Andrews can be said to operate in a monopolistically competitive market. Every caf\u00e9 draws from essentially the same customer base but they all offer products which are sufficiently different for every caf\u00e9 to be able to set its own prices to an extent. These prices do not, however, influence the pricing of their competitors and generally stay within a narrow band for comparable products.  In other words, there is no strategic interaction. It is also relatively easy to set up a new caf\u00e9 which will increase supply and decrease profits on the market. New caf\u00e9s will stop appearing once one cannot expect to make any economic profit out of the creation of a new caf\u00e9.\u000aFirms are free to enter or exit a monopolistically competitive market, which means all of them make zero economic profit in the long run (entry stops when the economic profit for all firms equals 0). \u000a<p><i>Numerical Example</i>\u000a<p>\u000aLisa is a farmer who produces organic acai berries. She operates in a monopolistically competitive market and faces a demand curve $$ P = 130- 2Q$$\u000aShe operates with a constant marginal cost of 10 per pack, and her total cost function is:\u000a$$ TC = 10Q + f$$ where f is the firm's fixed costs.\u000a<ul>\u000a<li>Maximise Lisa\u2019s profit</li>\u000a<li>Find the price at which Lisa will sell a pack of acai berry</li>\u000a<li>Find how much profit Lisa will be earning</li>\u000a<li>Find a value of f such that the market Lisa is operating in is in long-run equilibrium</li>\u000a</ul>\u000aProfit is maximized the usual way, by setting marginal revenue equal to marginal cost.\u000a$$ MR = 130 - 4Q$$\u000a$$ MC = 10$$\u000a$$MR = MC$$\u000a$$130 - 4Q = 10$$\u000a$$Q^* = 30$$\u000aThe profit-maximizing price we obtain by plugging the profit maximizing quantity (30) into the demand function:\u000a$$ P^* = 120 - 2Q^*$$\u000a$$ P^* = 120 - 2\\times30 = 60$$\u000aThe maximum profit can be obtained via our usual profit function:\u000a$$ \\Pi = TR - TC$$\u000a$$ \\Pi = =P^* Q^* - ( 10Q^* + f)$$\u000a$$ \\Pi = 60\\times 30 - (10\\times 30 + f )$$\u000a$$ \\Pi = 1800 - 300 - f$$\u000a$$ \\Pi = 1500 - f$$\u000aIn a long-run equilibrium, a monopolistically competitive firm should be earning <i>zero economic profit</i>. Therefore, in order to ensure that the market is in long-run equilibrium, \u03c0 should be set to 0.\u000a$$ \\Pi = 1500 - f = 0$$\u000a$$ f = 1500 $$\u000aNotice that in long run equilibrium, even though profits are zero, it is still the case that PcMC=MR because the demand curve is downward sloping.  In order to sell more goods, the firm must reduce the price on all goods sold.  This implies the standard result that MR<P and so MC<P as MR=MC in equilibrium.  In competitive markets, it is also the case that long run profits are zero but in that case MC=P.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:308",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:413"],
      "Label": null,
      "Body": "Firms can exploit market power to increase profits either through price discrimination or else through clever strategies to convert consumer surplus into producer surplus.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:309",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:414"],
      "Label": null,
      "Body": "Price discrimination is a pricing strategy in which a firm sells units of a good at different prices to different customers to take advantage of their different willingness to pay. An example would be a shop offering a discount to students on certain items but not to other customers. The reason for this is that students are, generally speaking, poorer than working adults and more precarious in their spending, and so have a lower willingness to pay. By offering a lower price to students the shop may be able to achieve higher sales and generate more profits.<p>\u000aThere are two conditions that must hold for price discrimination to be viable:\u000a<ul>\u000a<li>The firm must have market power \u2013 without market power, the firm cannot choose its price at all, let alone manipulate it to its own advantage.</li>\u000a<li>The firm must prevent resale \u2013 if resale of the good is possible, those who buy the good at its lowest price can try to resell the item to those paying a higher price.  The two parties could negotiate a deal between the low and high prices which makes both of them better off.  The act of reselling an item at a price higher than you paid for it is an example of arbitrage. Ball ticket sales in St Andrews present an opportunity for arbitrage \u2013 once a ball ticket is bought at its original price, it is often re-sold at a (substantially) higher price, generating profit for the original buyer.</li>\u000a</ul>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:310",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:415"],
      "Label": null,
      "Body": "Also called <i>perfect price discrimination</i>, this occurs when the firm knows the exact maximum price at which every customer on the market is willing to buy a product and charges them that exact price. A firm which manages to perfectly price discriminate among its customers is able to eliminate all consumer surplus in the market and transfer it into its producer surplus. This is because consumer surplus, is the difference between the maximum price the consumer is willing to pay for a good and the price they actually pay for it. Since under first-degree price discrimination everyone pays the maximum price they are willing to pay, the consumer surplus is zero. The producer surplus will be the sum of the differences between the maximum willingness of the consumer to pay for a good and the minimum price at which the producer is willing to sell each unit of the good, which equals the marginal cost of producing that good. The producer surplus will therefore be equal to the area enclosed between the demand curve and the marginal cost curve. Note that first-degree price discrimination does not create any deadweight loss and is therefore socially efficient.<p>\u000aPerfect price discrimination is rarely if ever achievable in the real world as it requires plausible information about the maximum willingness to pay of every customer on the market. Such information can be incredibly costly to obtain for a firm and customers have an incentive to misstate their true maximum willingness to pay. One of the closest real-life examples are college tuition fees. By requiring information about an applicant\u2019s family income, a college can obtain an accurate estimate of the price which the family would be willing to set aside for the higher education of their child. On the basis of that knowledge, the college can devise an individualized financial assistance package, which essentially tailors the actual price the family will have to pay for college to its willingness to pay.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:311",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:416"],
      "Label": null,
      "Body": "Since perfect price discrimination is often infeasible to impose in the real world, an often-applied approach is to divide the market into several groups which have different elasticities of demand.  A higher price is charged to those who are less price sensitive and a lower price to those with a higher price sensitivity.  This approach is called <i>third-degree price discrimination</i> or <i>segmenting</i>. Think of a museum that charges different prices for adults, students and children under 7.<p>\u000aUnlike first-degree price discrimination, third-degree generates some consumer surplus. Consider a student discount. Some students are better off than other students, so the richer students would be generating a consumer surplus out of the fact that the discounted student price is below the maximum price they are willing to pay for the good. Third-degree price discrimination, however, also generates a deadweight loss, which makes it socially inefficient. \u000a<p>\u000a<i>Numerical Example</i><p>\u000aThe Postojna Cave in Western Slovenia is one of the biggest cave systems in Europe that is open for tourists \u2013 in fact, it is one of Slovenia\u2019s top tourism sites. It is a place of outstanding natural beauty where you take a 2km train journey into the depths of the cave before beginning your tour of its galleries, but clearly not everyone can afford to visit it at the same price. \u000aAssume that the cave management has to deal with two distinct groups of customers - working adults and students. The management also knows that the inverse demand curve for working adults is:\u000a$$ P = 24 - 2Q_1$$\u000aand the inverse demand curve for students is:\u000a$$ P = 18 - Q_2$$\u000aSuppose the marginal cost of servicing an additional visitor is MC=10, and the total cost function is TC=10Q+10.<p>\u000aFirst, assume both groups are charged the same price. It is easier to build intuition if we convert the inverse demand curves we have into actual demand curves of the form Q=Q(P).\u000a$$ P = 24 - 2Q_1 \\implies Q_1 = 12 - 0.5P$$\u000a$$ P = 18 - Q_2 \\implies Q_2 = 18 - P$$\u000aAt price P a total of Q=Q1+Q2 visits to the cave will be demanded:\u000a$$ Q = Q_1 + Q_2$$\u000a$$ Q = 12 - 0.5P + 18 - P$$\u000a$$Q = 30 - 1.5P$$\u000a$$P = 20 - \\frac{2}{3}Q$$\u000aThe cave\u2019s marginal revenue is (remember MR has twice the slope of the inverse demand function):\u000a$$ MR = 20 - \\frac{4}{3}Q$$\u000aTo maximize the cave\u2019s profit, set MR equal to MC.\u000a$$ MR = MC$$\u000a$$20 - \\frac{4}{3}Q = 10$$\u000a$$\\frac{4}{3}Q = 10$$\u000a$$Q = 7.5$$\u000a\u000aProfit will be maximized when exactly 7.5 visits are made to the cave in total. Let\u2019s plug that into the inverse demand function to find the entrance fee that will be set in this case:\u000a$$ P=20-\\frac{2}{3}\\times 7.5=15$$\u000aTherefore, the cave will generate a total revenue of:\u000a$$ TR = P\\times Q = 15 \\times 7.5 = 112.5$$\u000aThe profit without price discrimination will thus be:\u000a$$ \\Pi = TR - TC = 112.5 - 10Q - 10 = 112.5 - 75 - 10 = 27.5$$\u000aNow, let\u2019s charge each group different prices according to their respective willingness to pay. We are essentially going to break down the market into two constituent markets \u2013 one for adult tickets and one for student tickets and we will maximize profit in both of them.<p>\u000aThe first market (for adult tickets) will have the following demand and marginal cost curves:\u000a$$ P_1 = 24 - 2Q_1$$\u000a$$ MC = 10$$\u000aFrom the demand curve we can derive the following marginal revenue curve for this market:\u000a$$ MR = 24 - 4Q_1$$\u000aAs always, we maximize profit by setting MR equal to MC:\u000a$$ MR = MC$$\u000a$$ 24 - 4Q_1 = 10$$\u000a$$Q_1 = 14$$\u000a$$Q_1 = 3.5$$\u000aThe price this market faces (i.e. the price of an adult ticket) would be:\u000a$$ P_1 = 24 - 2Q_1 = 24 - 2\\times 3.5 = 24 - 7 = 17$$\u000aThe total revenue in this market would be:\u000a$$ TR_1 = P_1\\times Q_1 = 17\\times 3.5 = 59.5$$\u000aBy performing analogous calculations, we can derive that the profit-quantity in the student ticket market would be 4 and the student ticket price would be 14. This means the total revenue from student tickets would be:\u000a$$ TR_2 = P_2 \\times Q_2 = 14\\times 4 = 56$$\u000aThe grand total revenue would naturally be the sum of the revenue from adult tickets and the revenue from student tickets:\u000a$$ TR = TR_1 + TR_2 = 59.5 + 56 = 115.5$$\u000aThe profit with price discrimination will be:\u000a$$ \\Pi = TR - TC = 115.5 -10Q - 10 = 115.5 - 10\\times (3.5 + 4) - 10 = 115.5 - 75 - 10 = 30.5$$\u000aAs the profit without price discrimination was 27.5, it is clear that segmenting the market with third degree price discrimination has raised profits as 30.5 > 27.5.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:312",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:417"],
      "Label": null,
      "Body": "Second-degree price discrimination (also called <i>indirect price discrimination</i>) relates to cases when the firm cannot directly observe the demand of its customers and therefore cannot divide them into categories with different price elasticities. So, it gives consumers the option to define themselves by providing a menu of pricing options to choose from. The idea is that customers with more inelastic demands would choose the more expensive option(s) while the customers with more elastic demands would choose the less expensive option(s). <p>\u000aThese are two of the most commonly employed types of second-degree price discrimination:\u000a<ul>\u000a<li><i>Quantity discounting</i> \u2013 a pricing strategy where people who buy a larger quantity of a good pay a lower per-unit price for the good. It is applied when some of the customers have more elastic demand curves than others. Say you discover that Jane demands only one slice of pizza at a per-unit price of \u00a33 but five at a per-unit price \u00a31. Her friend Amanda prefers healthy food, so she demands one slice of pizza at \u00a33 but only 1.5 slices at price \u00a31. So, you price pizza as follows: \u00a33 per slice but 5 slices cost \u00a35. Jane will immediately jump to buy 5 slices at \u00a35, because they will cover her total demand at that per-unit price. Her friend Amanda will, however, buy one slice at \u00a33 and be happy with it.</li>\u000a<li><i>Versioning</i> \u2013 offering a range of products that are all versions of the same core product but suit different demand categories. Ths is most readily observed in airlines who sell, for example, Economy, Business and First Class tickets. It is the same journey for all but some passengers would prefer a few more amenities on board and are willing to pay extra for them \u2013 a fact which airlines are happy to exploit for their own benefit. </li>\u000a</ul>",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:313",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:418"],
      "Label": null,
      "Body": "Two-part tariffs are a pricing strategy whereby the customer is first charged a lump-sum payment (e.g. a membership fee) and then a flat fee for every unit they consume. Via the lump-sum payment the producer can claim the whole consumer surplus and then set the per-unit flat fee equal to the marginal cost. This way the firm can turn the whole consumer surplus into producer surplus and avoid any deadweight loss.\u000a<p>\u000a<i>Numerical Example</i><p>\u000aLet\u2019s consider a demand curve for rounds of golf given by:\u000a$$ P = 100 - 10Q$$\u000aP=100-10Q\u000aAssume that the marginal cost for each round of golf is MC=10, which is also set as the price for a round of golf. Therefore:\u000a$$ P = 100 - 10Q = 10$$\u000a$$ Q = 9$$\u000aUnder those conditions, nine rounds of golf will be purchased on the market. At what price should the golf club set its membership fee? The idea is that in order to maximize its producer surplus, the golf course should set its membership fee equal to the consumer surplus of the golfer. Recall that the consumer surplus is the sum of the differences between the maximum price the customer is willing to pay for a good at a given quantity and what they actually pay. As such a producer can safely claim the whole consumer surplus of a customer without reducing their consumption. In this case, the consumer surplus of a golfer is given by.\u000a$$ CS = (Demand choke price - P^*)\\times Q^*$$\u000a$$  cs = (100 - 10)\\times 9 = 90\\times 9 = 810$$\u000aThe membership fee the golf course will set in this case will equal 810.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:314",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:419"],
      "Label": null,
      "Body": "Game theory is the study of strategic decisions and interactions between rational decision makers. A game is defined as a situation in which there are two or more people (players) who can each choose between possible decisions (strategies) and the outcomes of each decision for the player are contingent on the strategies which their opponents choose.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:315",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:420"],
      "Label": null,
      "Body": "A game theoretical analysis of any real-life strategic interaction starts with the identification of the players. There can be a potentially infinite number of players, but we often restrict their number to two if possible, because it is most convenient to work with two-player games.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:316",
      "@version": 8,
      "@class": "Discussion",
      "in_explain": ["#24:421"],
      "Label": null,
      "Body": "A sequence of actions available to each player is known as a <i>strategy</i>. Every <i>combination</i> of strategies produces an <i>outcome</i>, and in each outcome each player receives a payoff. Sometimes these payoffs are readily quantifiable, like an amount of money, but most often they simply represent the order of preference which the player has for the possible outcomes of the game. For example, in a game with 6 possible outcomes, 6 can be assigned to the most preferred outcome, 5 to the second most preferred, and so on. Most games are set up so that higher payoffs are preferred but there are some exceptions.\u000a<p>\u000aConsider a game with two players, A and B, each of whom has 2 strategies at their disposal \u2013 Strategy 1 and Strategy 2, and they are both choosing their strategy at the same time, not knowing what the other side will choose.  This is known as a <b>simultaneous game</b>.  In this game there are 4 possible outcomes, written in the form (Strategy of Player A, Strategy of Player B), and the payoffs are written as (Payoff of Player A, Payoff of Player B).\u000a<ul>\u000a<li>(Strategy 1, Strategy 1) -> (3, 3)</li>\u000a<li>(Strategy 1, Strategy 2) -> (1, 4)</li>\u000a<li>(Strategy 2, Strategy 1) -> (4, 1)</li>\u000a<li>(Strategy 2, Strategy 2) -> (2, 2)</li>\u000a</ul>\u000a<p>\u000aA convenient way to represent strategies and payoffs is a <b>payoff matrix</b>. This is a table in which (by convention) the rows represent the strategies available to the Player A and the columns represent the strategies available to Player B. Each cell represents the outcome defined by the choice of the strategies in the respective row and column. In every cell we write the payoffs for the respective outcome. For the game we defined above, the payoff matrix will look like this:\u000a<p>\u000a<table class=\"table\">\u000a<colgroup>\u000a<col style=\"width: 44px\">\u000a<col style=\"width: 100px\">\u000a<col style=\"width: 104px\">\u000a<col style=\"width: 143px\">\u000a</colgroup>\u000a  <tr>\u000a    <th></th>\u000a    <th></th>\u000a    <th></th>\u000a    <th></th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>PLAYER B</td>\u000a    <td></td>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Strategy 1</td>\u000a    <td>Strategy 2</td>\u000a  </tr>\u000a  <tr>\u000a    <td>P<br>L<br>A<br></td>\u000a    <td>Strategy 1</td>\u000a    <td>3, 3</td>\u000a    <td>1, 4</td>\u000a  </tr>\u000a  <tr>\u000a    <td>Y<br>E<br>R<br><br><br>A<br></td>\u000a    <td>Strategy 2</td>\u000a    <td>4, 1</td>\u000a    <td>2, 2</td>\u000a  </tr>\u000a</table>\u000a<p>\u000aSo how do we analyse it?  Player A does not know whether Player B will choose Strategy 1 or Strategy 2, so the best they can do is look what their <b>best response</b> will be in each case. If Player B plays Strategy 1, Player A would be best playing Strategy 2 as it will give them a higher payoff (4>3). Similarly, if Player B plays Strategy 2, Player A\u2019s best response is Strategy 2 (2>1). We put a checkmark next to Player A\u2019s optimal choice in each case:\u000a<p>\u000a<table class=\"table\">\u000a<colgroup>\u000a<col style=\"width: 44px\">\u000a<col style=\"width: 100px\">\u000a<col style=\"width: 104px\">\u000a<col style=\"width: 143px\">\u000a</colgroup>\u000a  <tr>\u000a    <th></th>\u000a    <th></th>\u000a    <th></th>\u000a    <th></th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>PLAYER B</td>\u000a    <td></td>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Strategy 1</td>\u000a    <td>Strategy 2</td>\u000a  </tr>\u000a  <tr>\u000a    <td>P<br>L<br>A<br></td>\u000a    <td>Strategy 1</td>\u000a    <td>3, 3</td>\u000a    <td>1, 4</td>\u000a  </tr>\u000a  <tr>\u000a    <td>Y<br>E<br>R<br><br><br>A<br></td>\u000a    <td>Strategy 2</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">&#10004;</span> 4, 1</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">&#10004; </span>2, 2</td>\u000a  </tr>\u000a</table>\u000a<p>\u000aIf we analyse Player B\u2019s choices in a similar fashion, we discover that they will also always prefer Strategy 2 over Strategy 1 (4>3 and 2>1):\u000a<p>\u000a<table class=\"table\">\u000a<colgroup>\u000a<col style=\"width: 44px\">\u000a<col style=\"width: 100px\">\u000a<col style=\"width: 104px\">\u000a<col style=\"width: 207px\">\u000a</colgroup>\u000a  <tr>\u000a    <th></th>\u000a    <th></th>\u000a    <th></th>\u000a    <th></th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>PLAYER B</td>\u000a    <td></td>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Strategy 1</td>\u000a    <td>Strategy 2</td>\u000a  </tr>\u000a  <tr>\u000a    <td>P<br>L<br>A<br></td>\u000a    <td>Strategy 1</td>\u000a    <td>3, 3</td>\u000a    <td>1, 4<span style=\"color:rgb(254, 0, 0)\">&#10004;</span></td>\u000a  </tr>\u000a  <tr>\u000a    <td>Y<br>E<br>R<br><br><br>A<br></td>\u000a    <td>Strategy 2</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">&#10004;</span> 4, 1</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">&#10004; </span>2, 2<span style=\"color:rgb(254, 0, 0)\"> &#10004;</span></td>\u000a  </tr>\u000a</table>\u000a<p>\u000aWe thus proved that both Player 1 and Player 2 are better off playing Strategy 2. So, if they are rational, the only outcome that will ever occur in this game is (Strategy 2, Strategy 2) and the payoffs to the players will always be (2,2). This outcome is an equilibrium since each player is playing their best response and neither has an incentive to change.  It is known as a <b>Nash equilibrium</b> after John Nash, the Princeton mathematician who introduced it.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:317",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:422"],
      "Label": null,
      "Body": "Let\u2019s examine a game in which we have two players (A and B), each with 3 strategies at their disposal: Strategy 1, Strategy 2 and Strategy 3.\u000a<p>\u000a<table class=\"table\">\u000a<colgroup>\u000a<col style=\"width: 45px\">\u000a<col style=\"width: 103px\">\u000a<col style=\"width: 107px\">\u000a<col style=\"width: 213px\">\u000a<col style=\"width: 198px\">\u000a</colgroup>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>PLAYER B</td>\u000a    <td></td>\u000a    <td></td>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Strategy 1</td>\u000a    <td>Strategy 2</td>\u000a    <td>Strategy 3</td>\u000a  </tr>\u000a  <tr>\u000a    <td>P<br>L<br>A<br></td>\u000a    <td>Strategy 1</td>\u000a    <td>7, 3<span style=\"color:rgb(254, 0, 0)\">\u2714</span></td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2714</span>6, 2</td>\u000a    <td>7, 1</td>\u000a  </tr>\u000a  <tr>\u000a    <td>Y<br>E<br>R<br></td>\u000a    <td>Strategy 2</td>\u000a    <td>5, 6<span style=\"color:rgb(254, 0, 0)\">\u2714</span></td>\u000a    <td>4, 3</td>\u000a    <td>8, 2</td>\u000a  </tr>\u000a  <tr>\u000a    <td>A</td>\u000a    <td>Strategy 3</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2714</span>8, 5<span style=\"color:rgb(254, 0, 0)\">\u2714</span></td>\u000a    <td>2, 4</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2714</span>9, 1</td>\u000a  </tr>\u000a</table>\u000a<p>\u000aLook at Player B first. We can see that their best response is always Strategy 1 no matter what Player A chooses. Such a strategy is called a <b>dominant strategy</b>. Strategies 2 and 3 always produce worse payoffs for Player B than Strategy 1 \u2013 strategies 2 and 3 are said to be <b>dominated by</b> Strategy 1. But we can also observe that Strategy 2 always gives better payoffs than Strategy 3, therefore Strategy 3 is also dominated by Strategy 2, even though Strategy 2 is not a dominant strategy. We can thus conclude that <i>if a strategy is dominated by another strategy, the latter strategy is not necessarily dominant</i>.\u000aFor Player A, we observe that Strategy 2 is never chosen. However, neither Strategy 1 nor Strategy 3 always produce better payoffs than Strategy 2. This means that Strategy 2 is not dominated by any strategy for Player A.  Still, while it is not dominated, Strategy 2 is <b>never a best response</b> for Player A.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:318",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:423"],
      "Label": null,
      "Body": "In the case when a player chooses the specific strategy which maximizes their payoff, we say that they follow a <b>pure strategy</b>.\u000aIf they choose a strategy randomly from the set of strategies available to them (which sometimes does make sense), we then say the Player follows a <b>mixed strategy</b>.\u000aOnly pure-strategy games will be examined in first-year microeconomics.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:319",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:424"],
      "Label": null,
      "Body": "A <b>zero-sum game</b> is a game in which the gains of one player are perfectly balanced out by the losses of other players. A classic zero-sum game arises when cutting a cake \u2013 the amount by which one person\u2019s slice gets bigger is the amount by which everyone else\u2019s slices will shrink in total. The sum of the payoffs of the players in any given outcome of a zero-sum game equals zero \u2013 this is why the game is called zero-sum. Therefore, for a zero-sum game with two players, if a player\u2019s payoff in one outcome is A, then the payoff of their opponent in that outcome must be -A.\u000aA <b>non-zero-sum game</b> is any game in which the sum of the payoffs in at least one outcome does not equal zero.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:320",
      "@version": 6,
      "@class": "Discussion",
      "in_explain": ["#24:425"],
      "Label": null,
      "Body": "A classic game is the Prisoner\u2019s Dilemma. The story goes as follows: two people were caught by the police and are suspected to have committed a crime. The police decide to interrogate them separately and not allow them to communicate before their interrogations. The suspects are presented with the following two choices:\u000a<p>\u000a<ul>\u000a<li>Admit to the crime</li>\u000a<li>Deny the crime</li>\u000a</ul>\u000aTheir choices generate the following payoffs:\u000a<ul>\u000a<li>If both deny, each of them gets 3 years in jail</li>\u000a<li>If one admits and one denies, the one who admits gets 1 year, and the one who denies gets 10 years</li>\u000a<li>If both admit, each of them gets 5 years</li>\u000a</ul>\u000aLet\u2019s assume that <i>n</i> years in jail give a suspect utility of <i>-n</i>, so that we keep the usual rule in game theory that higher payoffs are preferred. This yields the following payoff matrix:\u000a<table class=\"table\">\u000a  <tr>\u000a    <th></th>\u000a    <th></th>\u000a    <th>SUSPECT</th>\u000a    <th>B</th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Deny</td>\u000a    <td>Admit</td>\u000a  </tr>\u000a  <tr>\u000a    <td>S<br>U<br>S<br>P<br></td>\u000a    <td>Deny</td>\u000a    <td>-3, -3</td>\u000a    <td>-10, -1 <span style=\"color:rgb(254, 0, 0)\">\u2714</span></td>\u000a  </tr>\u000a  <tr>\u000a    <td>E<br>C<br>T<br><br>A<br></td>\u000a    <td>Admit</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2714</span> -1, -10<br></td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2714</span> -5, -5 <span style=\"color:rgb(254, 0, 0)\">\u2714</span><br></td>\u000a  </tr>\u000a</table>\u000a<p>\u000aAs we can see, both suspects are always better off admitting to the crime, therefore Admit is a dominant strategy and Deny is a dominated strategy for both of them, and the Nash equilibrium will be (Admit, Admit). So, even though denying will give them both a more favourable (efficient) outcome, their regard for their own self-interest will lead them to choose a suboptimal outcome.\u000a<p>\u000aThe reason why the Prisoner\u2019s Dilemma is probably the most famous game in game theory is that there is a vast number of real-life situations where a person or an entity is required to make a choice between cooperating or not cooperating (defecting/cheating) and many of these situations can be modelled according to the framework of the Prisoner\u2019s Dilemma.\u000a<p>\u000a<i>Free-riding and environmental legislation</i>\u000a<p>\u000aImagine a treaty to cut carbon emissions has been signed between USA and China. Cutting emissions will incur a cost of 3 to a country and will bring a benefit of 2.5. However, the benefits of cutting emissions are enjoyed by both countries equally, therefore if one of them cuts emissions, the other will also receive a benefit of 2.5, and if both cut emissions, both will receive a benefit of 5 (2x2.5). In other words, emissions reduction is a public good.  The payoff matrix of this game is given by:\u000a<p>\u000a<table class=\"table\">\u000a  <tr>\u000a    <th></th>\u000a    <th></th>\u000a    <th>USA</th>\u000a    <th></th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Cut</td>\u000a    <td>Don't Cut</td>\u000a  </tr>\u000a  <tr>\u000a    <td>C<br>H<br>I<br></td>\u000a    <td>Cut</td>\u000a    <td>2, 2<br></td>\u000a    <td>-0.5, 2.5<span style=\"color:rgb(254, 0, 0)\">\u2714</span></td>\u000a  </tr>\u000a  <tr>\u000a    <td>N<br>A<br></td>\u000a    <td>Don't Cut</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2714</span> 2.5, -0.5<br></td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2714</span> 0, 0 <span style=\"color:rgb(254, 0, 0)\">\u2714</span><br></td>\u000a  </tr>\u000a</table>\u000aAs in the classic Prisoner\u2019s Dilemma, here both parties have an incentive to choose a strategy which leads to a suboptimal outcome \u2013 (Don\u2019t cut, Don\u2019t cut). In the context of environmental legislation, reaping the benefits of other countries cutting emissions while not cutting your own emissions is called <b>free riding</b>.\u000aOne way to discourage free-riding is to use sanctions. In our case, assume that the treaty has a clause stating that a country which free rides has to pay a fine of f. Our goal is to find the minimum amount f should be in order to ensure that the Nash equilibrium is (Cut, Cut). \u000a<table class=\"table\">\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>USA</td>\u000a    <td></td>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Cut</td>\u000a    <td>Don't Cut</td>\u000a  </tr>\u000a  <tr>\u000a    <td>C<br>H<br>I<br></td>\u000a    <td>Cut</td>\u000a    <td>2, 2<br></td>\u000a    <td><span style=\"color:rgb(0, 0, 0)\">-0.5, 2.5</span><span style=\"font-style:italic;color:rgb(0, 0, 0)\">-f</span></td>\u000a  </tr>\u000a  <tr>\u000a    <td>N<br>A<br></td>\u000a    <td>Don't Cut</td>\u000a    <td>2.5<span style=\"font-style:italic\">-f</span>, -0.5<br></td>\u000a    <td><span style=\"font-style:italic\">-f, -f</span><br></td>\u000a  </tr>\u000a</table>\u000aAssume USA cuts emissions. For China to cut emissions as well, the following must hold:\u000a$$ 2 > 2.5 - f \\implies f > 0.5 $$\u000aIf USA doesn\u2019t cut emissions, then for China to cut emissions:\u000a$$ -0.5 > -f \\implies f > 0.5 $$\u000aIf China cuts emissions, then for USA to cut emissions:\u000a$$ 2 > 2.5 - f \\implies f > 0.5 $$\u000aIf China doesn\u2019t cut emissions, then for USA to cut emissions:\u000a$$ - 0.5 \\implies -f \\implies f  0.5 $$\u000aOverall, we find that any fine for free riding f exceeding 0.5 will be effective in incentivizing the countries to cut emissions. Let\u2019s see the effect of f=1 on our payoff matrix:\u000a<table class=\"table\">\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>USA</td>\u000a    <td></td>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Cut</td>\u000a    <td>Don't Cut</td>\u000a  </tr>\u000a  <tr>\u000a    <td>C<br>H<br>I<br></td>\u000a    <td>Cut</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span>2, 2<span style=\"color:rgb(254, 0, 0)\">\u2713</span><br></td>\u000a    <td><span style=\"color:rgb(254, 0, 0)\">\u2713</span><span style=\"color:rgb(0, 0, 0)\">-0.5, 1.5</span></td>\u000a  </tr>\u000a  <tr>\u000a    <td>N<br>A<br></td>\u000a    <td>Don't Cut</td>\u000a    <td>1.5, -0.5<span style=\"color:rgb(254, 0, 0)\">\u2713</span><br></td>\u000a    <td>-1, -1<br></td>\u000a  </tr>\u000a</table>\u000aThe dominant strategy is now Cut for both sides and the Nash equilibrium is (Cut, Cut).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:321",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:426"],
      "Label": null,
      "Body": "Games may have more than one equilibrium. The key question then becomes  which equilibrium is selected and why?",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:322",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:427"],
      "Label": null,
      "Body": "A pure coordination game occurs when both players have the same two strategies at their disposal and have the same preferences over them. They, however, receive less utility if they choose a different strategy than in any configuration where they pick the same strategy. \u000a<p>\u000aLet\u2019s consider the following example \u2013 two friends discuss whether to go to Costa or Starbucks. Assume coordinating on either coffee shop gives both of them utility of 10. Not coordinating gives both of them utility of 0.\u000a<table class=\"table\">\u000a  <tr>\u000a    <th></th>\u000a    <th></th>\u000a    <th>MIKE</th>\u000a    <th></th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Starbucks</td>\u000a    <td>Costa</td>\u000a  </tr>\u000a  <tr>\u000a    <td>L<br>I<br></td>\u000a    <td>Starbucks</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span>10, 10<span style=\"color:rgb(254, 0, 0)\">\u2713</span><br></td>\u000a    <td><span style=\"color:rgb(0, 0, 0)\">0, 0</span></td>\u000a  </tr>\u000a  <tr>\u000a    <td>A<br>M<br></td>\u000a    <td>Costa<br></td>\u000a    <td>0, 0</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span>10, 10<span style=\"color:rgb(192, 192, 192)\">\u2713</span><br><br></td>\u000a  </tr>\u000a</table>\u000a<p>\u000aThe problem of choosing an equilibrium in a pure coordination game was explored by economist Thomas Schelling, who argued that the solution was often what he termed the <b>focal point</b>\u2013 the thing which is customary to do \u2013 e.g. \u201cWe always meet in Costa, so we\u2019ll do it there this time as well.\u201d. Alternatively, the game is solved by <b>pre-game communication</b> \u2013 the two friends agreeing where to go.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:323",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:428"],
      "Label": null,
      "Body": "An <i>assurance game</i> (alternatively called stag hunt) is a game with two equilibria, one is bad for both players, the other is superior for both players. Selection of the good equilibrium requires mutual assurance that both players will choose strategies consistent with this equilibrium.  Without such assurance, they have incentives to choose strategies consistent with the bad equilibrium.\u000a<p>\u000aAn example of an assurance game is <i>mutually assured destruction</i> (MAD). USA and USSR both have two strategies at their disposal \u2013 Develop (nuclear weapons) and Not Develop:\u000a<table>\u000a  <tr>\u000a    <th></th>\u000a    <th></th>\u000a    <th>USSR</th>\u000a    <th></th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Develop</td>\u000a    <td>Not Develop</td>\u000a  </tr>\u000a  <tr>\u000a    <td>U<br>S<br>A<br></td>\u000a    <td>Develop<br></td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span><span style=\"color:rgb(0, 0, 0)\">2, 2</span><span style=\"color:rgb(254, 0, 0)\">\u2713</span><br></td>\u000a    <td>3, 1</td>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td>Not Develop</td>\u000a    <td>1, 3</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span>4, 4<span style=\"color:rgb(254, 0, 0)\">\u2713</span><br><br></td>\u000a  </tr>\u000a</table>\u000aNot Develop is preferred to Develop since money spent on a nuclear program could be better spent on education, science, social welfare, Domino\u2019s pizza for everyone, etc. \u000a<p>\u000aThere are two Nash equilibria in this game \u2013 (Develop, Develop) and (Not Develop, Not Develop). The most favourable (efficient) outcome is (Not Develop, Not Develop) but a country will choose Not Develop only if it is assured that the other side will also choose Not Develop. If the USSR chooses Not Develop but the USA chooses Develop then the USSR would end up with its worst outcome (a payoff of 1).  The USSR will only choose Not Develop then if it trusts the USA to do the same (and vice versa). No such assurance existed during the Cold War, therefore countries chose (Develop, Develop).",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:324",
      "@version": 2,
      "@class": "Discussion",
      "in_contain": ["#19:552"],
      "Label": null,
      "Body": "\u201cChicken\u201d (also known as the Hawk Dove game) is a game which is played as follows: two people set off on a collision course at high speeds at two opposite ends of the same street. The first one to swerve is called a chicken and loses the game. Of course, if no one swerves, there\u2019s going to be quite a mess, to put it mildly.\u000a<p>\u000aLet\u2019s assign the following payoffs to the game:\u000a<ul>\u000a<li>A tie (both swerving) gives both a payoff of 0</li>\u000a<li>A win gives a payoff of 1</li>\u000a<li>A loss (chicken) gives a payoff of -1</li>\u000a<li>A crash (both straight) gives both a payoff of -10</li>\u000a</ul>\u000a<table class=\"table\">\u000a  <tr>\u000a    <th>PLAYER</th>\u000a    <th></th>\u000a    <th>TWO</th>\u000a    <th></th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Swerve</td>\u000a    <td>Straight</td>\u000a  </tr>\u000a  <tr>\u000a    <td>O<br>N<br>E<br></td>\u000a    <td>Swerve</td>\u000a    <td><span style=\"color:rgb(0, 0, 0)\">0, 0</span><br></td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span>-1, 1<span style=\"color:rgb(254, 0, 0)\">\u2713</span><br></td>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td>Straight</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span> 1, -1 <span style=\"color:rgb(254, 0, 0)\">\u2713</span><br></td>\u000a    <td>-10, -10<br></td>\u000a  </tr>\u000a</table>\u000aThe Nash equilibria are (Swerve, Straight) and (Straight, Swerve). Chicken is an example of an anti-coordination game, where a player benefits more if they choose a different strategy to their opponent than if they choose the same strategy.\u000a<p>\u000aEquilibrium selection in the Chicken game is solved via pre-game communication (e.g. an agreement that one player lets the other win and then the second player lets the first win when playing the game repeatedly) or a commitment mechanism such as reputation (e.g. you\u2019re playing against someone who is known never to swerve).",
      "@fieldTypes": "in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#25:325",
      "@version": 2,
      "@class": "Discussion",
      "in_explain": ["#24:429"],
      "Label": null,
      "Body": "Battle of the Sexes is an example of a coordination game where the two players are always better off playing the same strategy but they have differing preferences over strategies.\u000a<p>\u000aLet\u2019s assume we have a couple: Anna and Bob. Anna loves to watch football while Bob likes to go to rock concerts. There\u2019s an exciting football fixture tonight and a concert of Bob\u2019s favourite rock band. They have different interests but, at the same time, Anna and Bob prefer to be together rather than go somewhere alone. This yields the following payoff matrix:\u000a<p>\u000a<table class=\"table\">\u000a  <tr>\u000a    <th></th>\u000a    <th></th>\u000a    <th>Bob</th>\u000a    <th></th>\u000a  </tr>\u000a  <tr>\u000a    <td></td>\u000a    <td></td>\u000a    <td>Football</td>\u000a    <td>Concert</td>\u000a  </tr>\u000a  <tr>\u000a    <td>A<br>N<br></td>\u000a    <td>Football</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span>3, 2 <span style=\"color:rgb(254, 0, 0)\">\u2713</span><br></td>\u000a    <td>1, 1<br></td>\u000a  </tr>\u000a  <tr>\u000a    <td>N<br>A<br></td>\u000a    <td>Concert</td>\u000a    <td>0, 0</td>\u000a    <td><span style=\"color:rgb(49, 102, 255)\">\u2713</span>2, 3 <span style=\"color:rgb(254, 0, 0)\">\u2713</span><br></td>\u000a  </tr>\u000a</table>\u000aEquilibrium selection in a Battle of the Sexes game is solved the same way as a game of Chicken \u2013 through pre-game communication or by reputation.",
      "@fieldTypes": "in_explain=g"
    },
    {
      "@type": "d",
      "@rid": "#26:0",
      "@version": 6,
      "@class": "Lecture",
      "Number": 1,
      "in_contain": ["#19:219"],
      "out_Number": ["#12:0", "#12:1", "#12:2", "#12:3"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:1",
      "@version": 14,
      "@class": "Lecture",
      "Number": 2,
      "in_contain": ["#19:220"],
      "out_Number": [
        "#12:4",
        "#12:5",
        "#12:6",
        "#12:7",
        "#12:8",
        "#12:9",
        "#12:52"
      ],
      "out_teaches": ["#12:76"],
      "@fieldTypes": "in_contain=g,out_Number=g,out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#26:2",
      "@version": 17,
      "@class": "Lecture",
      "Number": 3,
      "in_contain": ["#19:221"],
      "out_Number": ["#12:13", "#12:71"],
      "out_teaches": ["#12:72", "#12:77", "#12:78"],
      "@fieldTypes": "in_contain=g,out_Number=g,out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#26:3",
      "@version": 8,
      "@class": "Lecture",
      "Number": 4,
      "in_contain": ["#19:222"],
      "out_Number": ["#12:17", "#12:18"],
      "out_teaches": ["#12:79", "#12:80"],
      "@fieldTypes": "in_contain=g,out_Number=g,out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#26:4",
      "@version": 6,
      "@class": "Lecture",
      "Number": 5,
      "in_contain": ["#19:223"],
      "out_Number": ["#12:20", "#12:62"],
      "out_teaches": ["#12:81", "#12:82"],
      "@fieldTypes": "in_contain=g,out_Number=g,out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#26:5",
      "@version": 6,
      "@class": "Lecture",
      "Number": 7,
      "in_contain": ["#19:224"],
      "out_Number": ["#12:21", "#12:22"],
      "out_teaches": ["#12:83"],
      "@fieldTypes": "in_contain=g,out_Number=g,out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#26:6",
      "@version": 12,
      "@class": "Lecture",
      "Number": 6,
      "in_contain": ["#19:225"],
      "out_Number": ["#12:24", "#12:26", "#12:51", "#12:70"],
      "out_teaches": ["#12:84"],
      "@fieldTypes": "in_contain=g,out_Number=g,out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#26:8",
      "@version": 9,
      "@class": "Lecture",
      "Number": 8,
      "in_contain": ["#19:226"],
      "out_Number": [
        "#12:27",
        "#12:28",
        "#12:29",
        "#12:30",
        "#12:31",
        "#12:68"
      ],
      "out_teaches": ["#12:85"],
      "@fieldTypes": "in_contain=g,out_Number=g,out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#26:9",
      "@version": 7,
      "@class": "Lecture",
      "Number": 9,
      "in_contain": ["#19:227"],
      "out_Number": ["#12:32", "#12:50"],
      "in_HasCode": ["#41:56"],
      "@fieldTypes": "in_contain=g,out_Number=g,in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#26:10",
      "@version": 14,
      "@class": "Lecture",
      "out_contain": [],
      "Number": 10,
      "in_contain": ["#19:228"],
      "out_Number": ["#12:35", "#12:69"],
      "out_teaches": ["#12:73", "#12:74"],
      "@fieldTypes": "out_contain=g,in_contain=g,out_Number=g,out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#26:11",
      "@version": 6,
      "@class": "Lecture",
      "Number": 1,
      "in_contain": ["#19:229"],
      "out_Number": ["#12:36", "#12:37", "#12:38", "#12:39"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:12",
      "@version": 3,
      "@class": "Lecture",
      "Number": 2,
      "in_contain": ["#19:230"],
      "out_Number": ["#12:40"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:13",
      "@version": 5,
      "@class": "Lecture",
      "Number": 3,
      "in_contain": ["#19:231"],
      "out_Number": ["#12:41", "#12:42", "#12:43"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:14",
      "@version": 3,
      "@class": "Lecture",
      "Number": 4,
      "in_contain": ["#19:232"],
      "out_Number": ["#12:44"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:15",
      "@version": 4,
      "@class": "Lecture",
      "Number": 5,
      "in_contain": ["#19:233"],
      "out_Number": ["#12:45", "#12:46"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:16",
      "@version": 5,
      "@class": "Lecture",
      "Number": 6,
      "in_contain": ["#19:234"],
      "out_Number": ["#12:47", "#12:48", "#12:49"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:17",
      "@version": 4,
      "@class": "Lecture",
      "Number": 2,
      "in_contain": ["#19:279"],
      "out_Number": ["#12:53", "#12:54"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:18",
      "@version": 3,
      "@class": "Lecture",
      "Number": 5,
      "in_contain": ["#19:276"],
      "out_Number": ["#12:55"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:19",
      "@version": 3,
      "@class": "Lecture",
      "Number": 6,
      "in_contain": ["#19:275"],
      "out_Number": ["#12:56"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:20",
      "@version": 5,
      "@class": "Lecture",
      "Number": 12,
      "in_contain": ["#19:280"],
      "out_Number": ["#12:57", "#12:58", "#12:59"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:21",
      "@version": 3,
      "@class": "Lecture",
      "Number": 13,
      "in_contain": ["#19:277"],
      "out_Number": ["#12:60"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:22",
      "@version": 3,
      "@class": "Lecture",
      "Number": 20,
      "in_contain": ["#19:278"],
      "out_Number": ["#12:61"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:23",
      "@version": 3,
      "@class": "Lecture",
      "Number": 3,
      "in_contain": ["#19:349"],
      "out_Number": ["#12:63"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:24",
      "@version": 3,
      "@class": "Lecture",
      "Number": 7,
      "in_contain": ["#19:350"],
      "out_Number": ["#12:64"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:25",
      "@version": 3,
      "@class": "Lecture",
      "Number": 8,
      "in_contain": ["#19:351"],
      "out_Number": ["#12:65"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:26",
      "@version": 4,
      "@class": "Lecture",
      "Number": 11,
      "in_contain": ["#19:352"],
      "out_Number": ["#12:66", "#12:67"],
      "@fieldTypes": "in_contain=g,out_Number=g"
    },
    {
      "@type": "d",
      "@rid": "#26:28",
      "@version": 2,
      "@class": "Lecture",
      "Number": 11,
      "out_teaches": ["#12:86"],
      "@fieldTypes": "out_teaches=g"
    },
    {
      "@type": "d",
      "@rid": "#27:0",
      "@version": 1,
      "@class": "appear",
      "in": "#16:0",
      "out": "#13:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:1",
      "@version": 1,
      "@class": "appear",
      "in": "#16:1",
      "out": "#13:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:2",
      "@version": 1,
      "@class": "appear",
      "in": "#16:2",
      "out": "#14:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:3",
      "@version": 1,
      "@class": "appear",
      "in": "#16:3",
      "out": "#13:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:6",
      "@version": 1,
      "@class": "appear",
      "in": "#16:6",
      "out": "#25:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:7",
      "@version": 1,
      "@class": "appear",
      "in": "#16:7",
      "out": "#25:6",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:8",
      "@version": 1,
      "@class": "appear",
      "in": "#16:10",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:9",
      "@version": 1,
      "@class": "appear",
      "in": "#16:11",
      "out": "#14:7",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:10",
      "@version": 1,
      "@class": "appear",
      "in": "#16:8",
      "out": "#14:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:11",
      "@version": 1,
      "@class": "appear",
      "in": "#16:9",
      "out": "#14:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:13",
      "@version": 1,
      "@class": "appear",
      "in": "#16:12",
      "out": "#14:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:14",
      "@version": 1,
      "@class": "appear",
      "in": "#16:13",
      "out": "#13:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:15",
      "@version": 1,
      "@class": "appear",
      "in": "#16:20",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:16",
      "@version": 1,
      "@class": "appear",
      "in": "#16:23",
      "out": "#14:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:17",
      "@version": 1,
      "@class": "appear",
      "in": "#16:22",
      "out": "#14:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:18",
      "@version": 1,
      "@class": "appear",
      "in": "#16:21",
      "out": "#14:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:20",
      "@version": 1,
      "@class": "appear",
      "in": "#16:24",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:21",
      "@version": 1,
      "@class": "appear",
      "in": "#16:25",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:22",
      "@version": 1,
      "@class": "appear",
      "in": "#16:26",
      "out": "#14:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:23",
      "@version": 1,
      "@class": "appear",
      "in": "#16:28",
      "out": "#14:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:24",
      "@version": 1,
      "@class": "appear",
      "in": "#16:27",
      "out": "#14:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:25",
      "@version": 1,
      "@class": "appear",
      "in": "#16:30",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:26",
      "@version": 1,
      "@class": "appear",
      "in": "#16:29",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:27",
      "@version": 1,
      "@class": "appear",
      "in": "#16:32",
      "out": "#14:18",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:28",
      "@version": 1,
      "@class": "appear",
      "in": "#16:33",
      "out": "#14:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:29",
      "@version": 1,
      "@class": "appear",
      "in": "#16:34",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:30",
      "@version": 1,
      "@class": "appear",
      "in": "#16:35",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:31",
      "@version": 1,
      "@class": "appear",
      "in": "#16:36",
      "out": "#14:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:32",
      "@version": 1,
      "@class": "appear",
      "in": "#16:37",
      "out": "#14:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:33",
      "@version": 1,
      "@class": "appear",
      "in": "#16:38",
      "out": "#13:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:34",
      "@version": 1,
      "@class": "appear",
      "in": "#16:39",
      "out": "#13:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:35",
      "@version": 1,
      "@class": "appear",
      "in": "#16:40",
      "out": "#14:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:36",
      "@version": 1,
      "@class": "appear",
      "in": "#16:41",
      "out": "#14:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:37",
      "@version": 1,
      "@class": "appear",
      "in": "#16:43",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:38",
      "@version": 1,
      "@class": "appear",
      "in": "#16:42",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:41",
      "@version": 1,
      "@class": "appear",
      "in": "#16:44",
      "out": "#13:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:43",
      "@version": 1,
      "@class": "appear",
      "in": "#16:18",
      "out": "#13:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:47",
      "@version": 1,
      "@class": "appear",
      "in": "#16:46",
      "out": "#13:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:48",
      "@version": 1,
      "@class": "appear",
      "in": "#16:45",
      "out": "#13:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:49",
      "@version": 1,
      "@class": "appear",
      "in": "#16:47",
      "out": "#13:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:50",
      "@version": 1,
      "@class": "appear",
      "in": "#16:48",
      "out": "#13:38",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:51",
      "@version": 1,
      "@class": "appear",
      "in": "#16:49",
      "out": "#13:38",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:52",
      "@version": 1,
      "@class": "appear",
      "in": "#16:50",
      "out": "#13:39",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:53",
      "@version": 1,
      "@class": "appear",
      "in": "#16:51",
      "out": "#14:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:54",
      "@version": 1,
      "@class": "appear",
      "in": "#16:52",
      "out": "#13:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:55",
      "@version": 1,
      "@class": "appear",
      "in": "#16:53",
      "out": "#13:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:56",
      "@version": 1,
      "@class": "appear",
      "in": "#16:54",
      "out": "#13:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:57",
      "@version": 1,
      "@class": "appear",
      "in": "#16:55",
      "out": "#14:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:58",
      "@version": 1,
      "@class": "appear",
      "in": "#16:56",
      "out": "#14:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:59",
      "@version": 1,
      "@class": "appear",
      "in": "#16:58",
      "out": "#14:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:60",
      "@version": 1,
      "@class": "appear",
      "in": "#16:59",
      "out": "#14:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:61",
      "@version": 1,
      "@class": "appear",
      "in": "#16:60",
      "out": "#14:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:62",
      "@version": 1,
      "@class": "appear",
      "in": "#16:61",
      "out": "#14:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:63",
      "@version": 1,
      "@class": "appear",
      "in": "#16:62",
      "out": "#14:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:64",
      "@version": 1,
      "@class": "appear",
      "in": "#16:63",
      "out": "#14:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:65",
      "@version": 1,
      "@class": "appear",
      "in": "#16:64",
      "out": "#14:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:66",
      "@version": 1,
      "@class": "appear",
      "in": "#16:65",
      "out": "#13:45",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:67",
      "@version": 1,
      "@class": "appear",
      "in": "#16:66",
      "out": "#14:38",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:68",
      "@version": 1,
      "@class": "appear",
      "in": "#16:67",
      "out": "#13:46",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:69",
      "@version": 1,
      "@class": "appear",
      "in": "#16:69",
      "out": "#13:46",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:70",
      "@version": 1,
      "@class": "appear",
      "in": "#16:68",
      "out": "#13:46",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:71",
      "@version": 1,
      "@class": "appear",
      "in": "#16:70",
      "out": "#13:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:72",
      "@version": 1,
      "@class": "appear",
      "in": "#16:71",
      "out": "#13:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:73",
      "@version": 1,
      "@class": "appear",
      "in": "#16:72",
      "out": "#13:48",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:74",
      "@version": 1,
      "@class": "appear",
      "in": "#16:73",
      "out": "#13:48",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:75",
      "@version": 1,
      "@class": "appear",
      "in": "#16:74",
      "out": "#14:40",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:76",
      "@version": 1,
      "@class": "appear",
      "in": "#16:76",
      "out": "#14:40",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:77",
      "@version": 1,
      "@class": "appear",
      "in": "#16:75",
      "out": "#14:40",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:78",
      "@version": 1,
      "@class": "appear",
      "in": "#16:78",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:79",
      "@version": 1,
      "@class": "appear",
      "in": "#16:79",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:80",
      "@version": 1,
      "@class": "appear",
      "in": "#16:77",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:81",
      "@version": 1,
      "@class": "appear",
      "in": "#16:80",
      "out": "#13:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:82",
      "@version": 1,
      "@class": "appear",
      "in": "#16:81",
      "out": "#14:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:83",
      "@version": 1,
      "@class": "appear",
      "in": "#16:12",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:84",
      "@version": 1,
      "@class": "appear",
      "in": "#16:82",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:85",
      "@version": 1,
      "@class": "appear",
      "in": "#16:83",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:86",
      "@version": 1,
      "@class": "appear",
      "in": "#16:84",
      "out": "#25:73",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:87",
      "@version": 1,
      "@class": "appear",
      "in": "#16:85",
      "out": "#14:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:88",
      "@version": 1,
      "@class": "appear",
      "in": "#16:86",
      "out": "#14:48",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:90",
      "@version": 1,
      "@class": "appear",
      "in": "#16:89",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:91",
      "@version": 1,
      "@class": "appear",
      "in": "#16:88",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:92",
      "@version": 1,
      "@class": "appear",
      "in": "#16:90",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:94",
      "@version": 1,
      "@class": "appear",
      "in": "#16:5",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:95",
      "@version": 1,
      "@class": "appear",
      "in": "#16:4",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:96",
      "@version": 1,
      "@class": "appear",
      "in": "#16:6",
      "out": "#13:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:97",
      "@version": 1,
      "@class": "appear",
      "in": "#16:3",
      "out": "#13:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:98",
      "@version": 1,
      "@class": "appear",
      "in": "#16:92",
      "out": "#13:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:99",
      "@version": 1,
      "@class": "appear",
      "in": "#16:93",
      "out": "#13:62",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:100",
      "@version": 1,
      "@class": "appear",
      "in": "#16:96",
      "out": "#13:63",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:101",
      "@version": 1,
      "@class": "appear",
      "in": "#16:95",
      "out": "#13:63",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:102",
      "@version": 1,
      "@class": "appear",
      "in": "#16:94",
      "out": "#13:63",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:103",
      "@version": 1,
      "@class": "appear",
      "in": "#16:97",
      "out": "#13:64",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:104",
      "@version": 1,
      "@class": "appear",
      "in": "#16:99",
      "out": "#14:49",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:105",
      "@version": 1,
      "@class": "appear",
      "in": "#16:98",
      "out": "#14:49",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:106",
      "@version": 1,
      "@class": "appear",
      "in": "#16:100",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:107",
      "@version": 1,
      "@class": "appear",
      "in": "#16:101",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:108",
      "@version": 1,
      "@class": "appear",
      "in": "#16:102",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:109",
      "@version": 1,
      "@class": "appear",
      "in": "#16:103",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:111",
      "@version": 1,
      "@class": "appear",
      "in": "#16:105",
      "out": "#14:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:112",
      "@version": 1,
      "@class": "appear",
      "in": "#16:106",
      "out": "#14:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:113",
      "@version": 1,
      "@class": "appear",
      "in": "#16:107",
      "out": "#13:69",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:116",
      "@version": 1,
      "@class": "appear",
      "in": "#16:110",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:117",
      "@version": 1,
      "@class": "appear",
      "in": "#16:111",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:118",
      "@version": 1,
      "@class": "appear",
      "in": "#16:112",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:119",
      "@version": 1,
      "@class": "appear",
      "in": "#16:113",
      "out": "#14:53",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:120",
      "@version": 1,
      "@class": "appear",
      "in": "#16:114",
      "out": "#14:53",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:121",
      "@version": 1,
      "@class": "appear",
      "in": "#16:115",
      "out": "#14:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:122",
      "@version": 1,
      "@class": "appear",
      "in": "#16:116",
      "out": "#14:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:123",
      "@version": 1,
      "@class": "appear",
      "in": "#16:117",
      "out": "#14:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:124",
      "@version": 1,
      "@class": "appear",
      "in": "#16:118",
      "out": "#14:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:125",
      "@version": 1,
      "@class": "appear",
      "in": "#16:119",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:126",
      "@version": 1,
      "@class": "appear",
      "in": "#16:120",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:127",
      "@version": 1,
      "@class": "appear",
      "in": "#16:121",
      "out": "#14:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:128",
      "@version": 1,
      "@class": "appear",
      "in": "#16:122",
      "out": "#14:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:129",
      "@version": 1,
      "@class": "appear",
      "in": "#16:123",
      "out": "#13:73",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:130",
      "@version": 1,
      "@class": "appear",
      "in": "#16:124",
      "out": "#13:73",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:131",
      "@version": 1,
      "@class": "appear",
      "in": "#16:125",
      "out": "#13:73",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:132",
      "@version": 1,
      "@class": "appear",
      "in": "#16:126",
      "out": "#13:74",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:133",
      "@version": 1,
      "@class": "appear",
      "in": "#16:23",
      "out": "#14:62",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:134",
      "@version": 1,
      "@class": "appear",
      "in": "#16:15",
      "out": "#14:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:135",
      "@version": 1,
      "@class": "appear",
      "in": "#16:127",
      "out": "#14:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:136",
      "@version": 1,
      "@class": "appear",
      "in": "#16:15",
      "out": "#14:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:137",
      "@version": 1,
      "@class": "appear",
      "in": "#16:7",
      "out": "#14:60",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:138",
      "@version": 1,
      "@class": "appear",
      "in": "#16:128",
      "out": "#13:78",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:139",
      "@version": 1,
      "@class": "appear",
      "in": "#16:129",
      "out": "#13:80",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:140",
      "@version": 1,
      "@class": "appear",
      "in": "#16:130",
      "out": "#13:88",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:141",
      "@version": 1,
      "@class": "appear",
      "in": "#16:131",
      "out": "#13:95",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:142",
      "@version": 1,
      "@class": "appear",
      "in": "#16:132",
      "out": "#13:97",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:143",
      "@version": 1,
      "@class": "appear",
      "in": "#16:133",
      "out": "#25:133",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:145",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:100",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:146",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:101",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:147",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:102",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:148",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:103",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:149",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:104",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:150",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:105",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:151",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:106",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:152",
      "@version": 1,
      "@class": "appear",
      "in": "#16:137",
      "out": "#13:106",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:153",
      "@version": 1,
      "@class": "appear",
      "in": "#16:138",
      "out": "#13:107",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:154",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:107",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:155",
      "@version": 1,
      "@class": "appear",
      "in": "#16:135",
      "out": "#13:108",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:156",
      "@version": 1,
      "@class": "appear",
      "in": "#16:139",
      "out": "#13:68",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:157",
      "@version": 1,
      "@class": "appear",
      "in": "#16:140",
      "out": "#13:66",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:158",
      "@version": 1,
      "@class": "appear",
      "in": "#16:141",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:159",
      "@version": 1,
      "@class": "appear",
      "in": "#16:142",
      "out": "#13:112",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:160",
      "@version": 1,
      "@class": "appear",
      "in": "#16:143",
      "out": "#14:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:161",
      "@version": 1,
      "@class": "appear",
      "in": "#16:145",
      "out": "#14:66",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:162",
      "@version": 1,
      "@class": "appear",
      "in": "#16:144",
      "out": "#14:66",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:163",
      "@version": 1,
      "@class": "appear",
      "in": "#16:146",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:164",
      "@version": 1,
      "@class": "appear",
      "in": "#16:147",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:165",
      "@version": 1,
      "@class": "appear",
      "in": "#16:148",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:166",
      "@version": 1,
      "@class": "appear",
      "in": "#16:149",
      "out": "#14:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:167",
      "@version": 1,
      "@class": "appear",
      "in": "#16:150",
      "out": "#14:67",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:168",
      "@version": 1,
      "@class": "appear",
      "in": "#16:151",
      "out": "#14:68",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:169",
      "@version": 1,
      "@class": "appear",
      "in": "#16:108",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:170",
      "@version": 1,
      "@class": "appear",
      "in": "#16:109",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:171",
      "@version": 1,
      "@class": "appear",
      "in": "#16:152",
      "out": "#13:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:172",
      "@version": 1,
      "@class": "appear",
      "in": "#16:154",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:173",
      "@version": 1,
      "@class": "appear",
      "in": "#16:155",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:174",
      "@version": 1,
      "@class": "appear",
      "in": "#16:156",
      "out": "#13:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:175",
      "@version": 1,
      "@class": "appear",
      "in": "#16:157",
      "out": "#13:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:176",
      "@version": 1,
      "@class": "appear",
      "in": "#16:158",
      "out": "#14:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:177",
      "@version": 1,
      "@class": "appear",
      "in": "#16:159",
      "out": "#14:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:178",
      "@version": 1,
      "@class": "appear",
      "in": "#16:160",
      "out": "#14:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:179",
      "@version": 1,
      "@class": "appear",
      "in": "#16:161",
      "out": "#14:46",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:180",
      "@version": 1,
      "@class": "appear",
      "in": "#16:162",
      "out": "#14:45",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:181",
      "@version": 1,
      "@class": "appear",
      "in": "#16:163",
      "out": "#14:44",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:182",
      "@version": 1,
      "@class": "appear",
      "in": "#16:164",
      "out": "#13:73",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:183",
      "@version": 1,
      "@class": "appear",
      "in": "#16:165",
      "out": "#14:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:184",
      "@version": 1,
      "@class": "appear",
      "in": "#16:166",
      "out": "#13:62",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:185",
      "@version": 1,
      "@class": "appear",
      "in": "#16:167",
      "out": "#13:62",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:186",
      "@version": 1,
      "@class": "appear",
      "in": "#16:168",
      "out": "#13:112",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:187",
      "@version": 1,
      "@class": "appear",
      "in": "#16:169",
      "out": "#14:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:188",
      "@version": 1,
      "@class": "appear",
      "in": "#16:170",
      "out": "#14:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:189",
      "@version": 1,
      "@class": "appear",
      "in": "#16:171",
      "out": "#14:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:190",
      "@version": 1,
      "@class": "appear",
      "in": "#16:172",
      "out": "#14:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:191",
      "@version": 1,
      "@class": "appear",
      "in": "#16:173",
      "out": "#14:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:192",
      "@version": 1,
      "@class": "appear",
      "in": "#16:174",
      "out": "#34:2",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:193",
      "@version": 1,
      "@class": "appear",
      "in": "#16:19",
      "out": "#13:21",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:194",
      "@version": 1,
      "@class": "appear",
      "in": "#16:17",
      "out": "#13:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:195",
      "@version": 1,
      "@class": "appear",
      "in": "#16:17",
      "out": "#13:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:196",
      "@version": 1,
      "@class": "appear",
      "in": "#16:17",
      "out": "#13:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:197",
      "@version": 1,
      "@class": "appear",
      "in": "#16:175",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:198",
      "@version": 1,
      "@class": "appear",
      "in": "#16:176",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    { "@type": "d", "@rid": "#27:199", "@version": 2, "@class": "appear" },
    {
      "@type": "d",
      "@rid": "#27:200",
      "@version": 1,
      "@class": "appear",
      "in": "#13:122",
      "out": "#16:177",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:201",
      "@version": 1,
      "@class": "appear",
      "in": "#16:178",
      "out": "#13:122",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:202",
      "@version": 1,
      "@class": "appear",
      "in": "#16:179",
      "out": "#13:123",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:203",
      "@version": 1,
      "@class": "appear",
      "in": "#16:180",
      "out": "#25:200",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:204",
      "@version": 1,
      "@class": "appear",
      "in": "#16:181",
      "out": "#25:201",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:205",
      "@version": 1,
      "@class": "appear",
      "in": "#16:180",
      "out": "#13:143",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:207",
      "@version": 1,
      "@class": "appear",
      "in": "#16:182",
      "out": "#13:112",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:208",
      "@version": 1,
      "@class": "appear",
      "in": "#16:183",
      "out": "#14:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:209",
      "@version": 1,
      "@class": "appear",
      "in": "#16:184",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:210",
      "@version": 1,
      "@class": "appear",
      "in": "#16:185",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:211",
      "@version": 1,
      "@class": "appear",
      "in": "#16:186",
      "out": "#14:40",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:212",
      "@version": 1,
      "@class": "appear",
      "in": "#16:181",
      "out": "#13:144",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#27:213",
      "@version": 1,
      "@class": "appear",
      "in": "#16:187",
      "out": "#13:243",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#28:3",
      "@version": 11,
      "@class": "Entity",
      "out_contain": [
        "#19:151",
        "#19:152",
        "#19:153",
        "#19:198",
        "#19:217",
        "#19:253"
      ],
      "Label": "Java",
      "@fieldTypes": "out_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#28:4",
      "@version": 10,
      "@class": "Entity",
      "out_contain": ["#19:192", "#19:193", "#19:331", "#19:339"],
      "Label": "Python",
      "@fieldTypes": "out_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#28:8",
      "@version": 4,
      "@class": "Entity",
      "out_contain": ["#19:295", "#19:296", "#19:298"],
      "Label": "Design",
      "@fieldTypes": "out_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#28:11",
      "@version": 12,
      "@class": "Entity",
      "out_contain": ["#19:385", "#19:455", "#19:462", "#19:497", "#19:541"],
      "in_contain": [],
      "Label": "Microeconomics",
      "@fieldTypes": "out_contain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#29:0",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:33",
      "out": "#13:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:1",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:36",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:2",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:35",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:3",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:37",
      "out": "#13:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:4",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:38",
      "out": "#13:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:5",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:3",
      "out": "#14:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:6",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:4",
      "out": "#13:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:8",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:11",
      "out": "#13:14",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:9",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:10",
      "out": "#13:14",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:12",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:32",
      "out": "#14:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:13",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:30",
      "out": "#14:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:14",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:31",
      "out": "#13:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:15",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:27",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:20",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:83",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:21",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:84",
      "out": "#14:44",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:23",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:86",
      "out": "#14:48",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:24",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:87",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:25",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:88",
      "out": "#14:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:26",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:89",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:27",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:5",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:28",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:7",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:29",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:9",
      "out": "#13:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:32",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:90",
      "out": "#13:62",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:33",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:91",
      "out": "#13:63",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:34",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:92",
      "out": "#14:49",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:35",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:93",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:37",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:95",
      "out": "#14:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:39",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:97",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:40",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:98",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:41",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:99",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:42",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:100",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:44",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:101",
      "out": "#14:52",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:45",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:102",
      "out": "#14:53",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:46",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:103",
      "out": "#14:53",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:47",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:104",
      "out": "#14:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:48",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:105",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:49",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:106",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:51",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:107",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:52",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:108",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:55",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:109",
      "out": "#13:73",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:56",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:110",
      "out": "#13:74",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:57",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:111",
      "out": "#13:75",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:58",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:112",
      "out": "#13:76",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:59",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:113",
      "out": "#13:77",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:61",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:119",
      "out": "#13:98",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:62",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:122",
      "out": "#13:102",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:63",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:121",
      "out": "#13:100",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:64",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:124",
      "out": "#13:105",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:65",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:115",
      "out": "#13:78",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:66",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:116",
      "out": "#13:89",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:67",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:117",
      "out": "#13:92",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:68",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:118",
      "out": "#13:96",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:69",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:44",
      "out": "#13:39",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:71",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:125",
      "out": "#13:111",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:72",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:126",
      "out": "#13:69",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:73",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:127",
      "out": "#14:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:74",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:128",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:75",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:129",
      "out": "#14:46",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:76",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:130",
      "out": "#13:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:78",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:131",
      "out": "#14:18",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:79",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:132",
      "out": "#14:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:80",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:133",
      "out": "#13:107",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:81",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:134",
      "out": "#13:101",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:82",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:135",
      "out": "#13:104",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:83",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:136",
      "out": "#13:105",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:84",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:137",
      "out": "#13:103",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:85",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:138",
      "out": "#13:108",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:86",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:139",
      "out": "#14:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:87",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:96",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:88",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:144",
      "out": "#13:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:89",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:146",
      "out": "#14:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:90",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:147",
      "out": "#14:45",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:91",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:148",
      "out": "#14:7",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:92",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:149",
      "out": "#14:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:93",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:151",
      "out": "#14:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:94",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:153",
      "out": "#14:61",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:95",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:155",
      "out": "#14:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:96",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:156",
      "out": "#14:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:97",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:159",
      "out": "#14:60",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:98",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:160",
      "out": "#14:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:99",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:162",
      "out": "#14:64",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:100",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:164",
      "out": "#13:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:102",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:165",
      "out": "#13:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:103",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:166",
      "out": "#14:18",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:104",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:167",
      "out": "#14:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:105",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:168",
      "out": "#13:112",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:106",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:175",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:107",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:178",
      "out": "#14:18",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:108",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:179",
      "out": "#14:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:109",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:180",
      "out": "#13:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:110",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:181",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#29:111",
      "@version": 1,
      "@class": "CSExample",
      "in": "#17:185",
      "out": "#13:112",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:0",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:18",
      "out": "#13:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:2",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:21",
      "out": "#14:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:3",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:20",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:4",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:0",
      "out": "#13:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:5",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:1",
      "out": "#13:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:6",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:2",
      "out": "#14:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:11",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:15",
      "out": "#14:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:12",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:34",
      "out": "#14:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:13",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:14",
      "out": "#14:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:14",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:22",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:15",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:23",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:16",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:25",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:17",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:28",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:18",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:26",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:25",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:81",
      "out": "#13:37",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:26",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:82",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:27",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:13",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:28",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:12",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:29",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:6",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:30",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:8",
      "out": "#13:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:31",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:19",
      "out": "#13:60",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:32",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:29",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:33",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:145",
      "out": "#14:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:34",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:176",
      "out": "#14:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:35",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:177",
      "out": "#14:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:36",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:188",
      "out": "#13:186",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#30:37",
      "@version": 1,
      "@class": "CoreExample",
      "in": "#17:189",
      "out": "#13:199",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:1",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:39",
      "out": "#13:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:2",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:41",
      "out": "#13:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:3",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:40",
      "out": "#13:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:4",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:42",
      "out": "#13:37",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:5",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:43",
      "out": "#13:37",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:7",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:45",
      "out": "#14:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:8",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:47",
      "out": "#14:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:10",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:48",
      "out": "#13:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:11",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:49",
      "out": "#13:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:12",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:51",
      "out": "#14:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:13",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:52",
      "out": "#14:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:14",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:53",
      "out": "#14:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:15",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:54",
      "out": "#14:30",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:16",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:55",
      "out": "#14:30",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:17",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:56",
      "out": "#14:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:20",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:57",
      "out": "#14:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:21",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:58",
      "out": "#14:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:22",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:59",
      "out": "#14:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:23",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:60",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:24",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:61",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:25",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:62",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:26",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:63",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:27",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:64",
      "out": "#13:44",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:28",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:65",
      "out": "#13:44",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:30",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:66",
      "out": "#14:36",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:31",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:67",
      "out": "#13:45",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:32",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:68",
      "out": "#13:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:34",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:69",
      "out": "#14:39",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:35",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:70",
      "out": "#14:39",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:36",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:71",
      "out": "#14:39",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:37",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:72",
      "out": "#14:40",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:39",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:74",
      "out": "#14:41",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:40",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:75",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:41",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:76",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:42",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:77",
      "out": "#14:42",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:43",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:78",
      "out": "#13:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:45",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:79",
      "out": "#14:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:46",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:80",
      "out": "#14:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:48",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:140",
      "out": "#14:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:49",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:141",
      "out": "#14:67",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:50",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:142",
      "out": "#14:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:51",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:143",
      "out": "#14:69",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:52",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:169",
      "out": "#14:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:53",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:171",
      "out": "#14:35",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:54",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:173",
      "out": "#14:68",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:56",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:183",
      "out": "#13:154",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:57",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:184",
      "out": "#13:145",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:58",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:186",
      "out": "#14:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#31:59",
      "@version": 1,
      "@class": "MTExample",
      "in": "#17:187",
      "out": "#13:160",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:6",
      "@version": 1,
      "@class": "Related",
      "in": "#13:27",
      "out": "#13:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:7",
      "@version": 1,
      "@class": "Related",
      "in": "#13:27",
      "out": "#13:25",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:8",
      "@version": 1,
      "@class": "Related",
      "in": "#14:16",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:9",
      "@version": 1,
      "@class": "Related",
      "in": "#13:111",
      "out": "#14:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:11",
      "@version": 1,
      "@class": "Related",
      "in": "#13:34",
      "out": "#13:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:12",
      "@version": 1,
      "@class": "Related",
      "in": "#13:33",
      "out": "#13:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:13",
      "@version": 1,
      "@class": "Related",
      "in": "#13:32",
      "out": "#13:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:14",
      "@version": 1,
      "@class": "Related",
      "in": "#13:33",
      "out": "#13:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:15",
      "@version": 1,
      "@class": "Related",
      "in": "#13:32",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:16",
      "@version": 1,
      "@class": "Related",
      "in": "#13:71",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:17",
      "@version": 1,
      "@class": "Related",
      "in": "#13:71",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:18",
      "@version": 1,
      "@class": "Related",
      "in": "#13:70",
      "out": "#13:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:19",
      "@version": 1,
      "@class": "Related",
      "in": "#14:54",
      "out": "#13:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:20",
      "@version": 1,
      "@class": "Related",
      "in": "#13:31",
      "out": "#14:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:21",
      "@version": 1,
      "@class": "Related",
      "in": "#14:28",
      "out": "#13:48",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:22",
      "@version": 1,
      "@class": "Related",
      "in": "#13:48",
      "out": "#14:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#33:23",
      "@version": 1,
      "@class": "Related",
      "in": "#13:78",
      "out": "#13:21",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#34:2",
      "@version": 11,
      "@class": "Theme",
      "out_contain": ["#19:200", "#19:201", "#19:202", "#19:203", "#19:265"],
      "out_explain": ["#24:259"],
      "in_contain": ["#19:151"],
      "out_appear": ["#27:192"],
      "Name": "Control Structures",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#34:3",
      "@version": 14,
      "@class": "Theme",
      "out_contain": ["#19:148", "#19:209", "#19:210", "#19:235"],
      "in_Number": ["#12:5"],
      "out_explain": ["#24:261"],
      "in_contain": ["#19:152"],
      "Name": "Data Structures",
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:4",
      "@version": 15,
      "@class": "Theme",
      "out_contain": [
        "#19:244",
        "#19:245",
        "#19:246",
        "#19:270",
        "#19:272",
        "#19:281"
      ],
      "out_explain": ["#24:262"],
      "in_contain": ["#19:153"],
      "Name": "Program Structure",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:5",
      "@version": 14,
      "@class": "Theme",
      "out_contain": ["#19:345", "#19:346", "#19:347", "#19:348"],
      "out_explain": ["#24:270"],
      "in_contain": ["#19:193"],
      "Name": "Program Structure",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:6",
      "@version": 6,
      "@class": "Theme",
      "out_contain": ["#19:187", "#19:188"],
      "out_explain": ["#24:268"],
      "in_contain": ["#19:192"],
      "Name": "Data",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:8",
      "@version": 9,
      "@class": "Theme",
      "out_contain": ["#19:204", "#19:205", "#19:207"],
      "out_explain": ["#24:263"],
      "in_contain": ["#19:198"],
      "Name": "Object Oriented Programming",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:9",
      "@version": 13,
      "@class": "Theme",
      "out_contain": [
        "#19:248",
        "#19:249",
        "#19:250",
        "#19:252",
        "#19:262",
        "#19:263"
      ],
      "out_explain": ["#24:264"],
      "in_contain": ["#19:217"],
      "Name": "Code Quality",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:11",
      "@version": 20,
      "@class": "Theme",
      "out_contain": ["#19:254", "#19:373", "#19:430"],
      "in_Number": ["#12:54"],
      "out_explain": ["#24:260"],
      "in_contain": ["#19:253"],
      "Name": "External Data Storage",
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:12",
      "@version": 12,
      "@class": "Theme",
      "out_contain": [
        "#19:297",
        "#19:302",
        "#19:304",
        "#19:305",
        "#19:309",
        "#19:312",
        "#19:313",
        "#19:317",
        "#19:330"
      ],
      "in_contain": ["#19:295"],
      "Name": "Program Designing",
      "@fieldTypes": "out_contain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:13",
      "@version": 22,
      "@class": "Theme",
      "out_contain": [
        "#19:318",
        "#19:321",
        "#19:322",
        "#19:323",
        "#19:324",
        "#19:325",
        "#19:326",
        "#19:327",
        "#19:328",
        "#19:329"
      ],
      "in_Number": ["#12:68", "#12:69"],
      "out_explain": [],
      "in_contain": ["#19:296"],
      "out_DesignExample": [],
      "out_appear": [],
      "Name": "UML",
      "@fieldTypes": "out_contain=g,in_Number=g,out_explain=g,in_contain=g,out_DesignExample=g,out_appear=g"
    },
    {
      "@type": "d",
      "@rid": "#34:14",
      "@version": 6,
      "@class": "Theme",
      "out_contain": ["#19:299", "#19:358"],
      "in_contain": ["#19:298"],
      "Name": "Program Correctness",
      "@fieldTypes": "out_contain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:15",
      "@version": 6,
      "@class": "Theme",
      "out_contain": ["#19:332", "#19:333", "#19:336"],
      "out_explain": ["#24:271"],
      "in_contain": ["#19:331"],
      "Name": "Control Structures",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:16",
      "@version": 8,
      "@class": "Theme",
      "out_contain": ["#19:340", "#19:341", "#19:342", "#19:343", "#19:344"],
      "out_explain": ["#24:269"],
      "in_contain": ["#19:339"],
      "Name": "Maintainability",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:22",
      "@version": 20,
      "@class": "Theme",
      "out_contain": ["#19:389", "#19:411", "#19:431", "#19:437", "#19:442"],
      "out_explain": ["#24:312"],
      "in_contain": ["#19:385"],
      "Name": "Demand and Supply",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:24",
      "@version": 7,
      "@class": "Theme",
      "out_contain": ["#19:456", "#19:478", "#19:479", "#19:480", "#19:481"],
      "in_contain": ["#19:455"],
      "Name": "Consumer Choice",
      "@fieldTypes": "out_contain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:25",
      "@version": 5,
      "@class": "Theme",
      "out_contain": ["#19:463", "#19:482"],
      "out_explain": ["#24:347"],
      "in_contain": ["#19:462"],
      "Name": "Production",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:26",
      "@version": 10,
      "@class": "Theme",
      "out_contain": ["#19:498", "#19:512", "#19:526", "#19:527", "#19:535"],
      "out_explain": ["#24:378"],
      "in_contain": ["#19:497"],
      "Name": "Market Structures",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#34:27",
      "@version": 10,
      "@class": "Theme",
      "out_contain": [
        "#19:542",
        "#19:543",
        "#19:544",
        "#19:545",
        "#19:546",
        "#19:547",
        "#19:548"
      ],
      "out_explain": ["#24:419"],
      "in_contain": ["#19:541"],
      "Name": "Game Theory",
      "@fieldTypes": "out_contain=g,out_explain=g,in_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#35:0",
      "@version": 11,
      "@class": "Module",
      "out_contain": [
        "#19:219",
        "#19:220",
        "#19:221",
        "#19:222",
        "#19:223",
        "#19:224",
        "#19:225",
        "#19:226",
        "#19:227",
        "#19:228"
      ],
      "ModuleCode": "CS1002",
      "@fieldTypes": "out_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#35:1",
      "@version": 7,
      "@class": "Module",
      "out_contain": [
        "#19:229",
        "#19:230",
        "#19:231",
        "#19:232",
        "#19:233",
        "#19:234"
      ],
      "ModuleCode": "MT2xxx",
      "@fieldTypes": "out_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#35:3",
      "@version": 11,
      "@class": "Module",
      "out_contain": [
        "#19:275",
        "#19:276",
        "#19:277",
        "#19:278",
        "#19:279",
        "#19:280",
        "#19:349",
        "#19:350",
        "#19:351",
        "#19:352"
      ],
      "ModuleCode": "CS1003",
      "@fieldTypes": "out_contain=g"
    },
    {
      "@type": "d",
      "@rid": "#36:0",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:2",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:1",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:1",
      "out": "#13:14",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:2",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:17",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:3",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:16",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:4",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:18",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:5",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:5",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:6",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:15",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:7",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:4",
      "out": "#14:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:8",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:3",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:9",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:7",
      "out": "#13:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:10",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:0",
      "out": "#13:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:11",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:19",
      "out": "#13:111",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:12",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:20",
      "out": "#13:60",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:15",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:21",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:16",
      "@version": 1,
      "@class": "CSError",
      "in": "#17:94",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:17",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:22",
      "out": "#14:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:18",
      "@version": 1,
      "@class": "CSError",
      "in": "#17:150",
      "out": "#14:53",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:19",
      "@version": 1,
      "@class": "CSError",
      "in": "#17:152",
      "out": "#14:62",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:20",
      "@version": 1,
      "@class": "CSError",
      "in": "#17:154",
      "out": "#14:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:21",
      "@version": 1,
      "@class": "CSError",
      "in": "#17:157",
      "out": "#14:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:22",
      "@version": 1,
      "@class": "CSError",
      "in": "#17:158",
      "out": "#14:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:23",
      "@version": 1,
      "@class": "CSError",
      "in": "#17:161",
      "out": "#14:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:24",
      "@version": 1,
      "@class": "CSError",
      "in": "#17:163",
      "out": "#14:3",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:25",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:23",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:26",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:24",
      "out": "#14:20",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:27",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:25",
      "out": "#14:22",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:28",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:26",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:29",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:27",
      "out": "#13:66",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#36:30",
      "@version": 1,
      "@class": "CSError",
      "in": "#15:31",
      "out": "#13:74",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:0",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:8",
      "out": "#14:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:1",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:9",
      "out": "#14:30",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:2",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:13",
      "out": "#13:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:3",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:11",
      "out": "#14:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:4",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:10",
      "out": "#14:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:5",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:12",
      "out": "#13:44",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:6",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:14",
      "out": "#13:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:7",
      "@version": 1,
      "@class": "MTError",
      "in": "#17:170",
      "out": "#14:26",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:8",
      "@version": 1,
      "@class": "MTError",
      "in": "#17:172",
      "out": "#14:35",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:9",
      "@version": 1,
      "@class": "MTError",
      "in": "#17:174",
      "out": "#14:68",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:10",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:28",
      "out": "#13:128",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:11",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:29",
      "out": "#13:134",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#37:12",
      "@version": 1,
      "@class": "MTError",
      "in": "#15:30",
      "out": "#13:147",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#38:0",
      "@version": 1,
      "@class": "CoreError",
      "in": "#15:32",
      "out": "#13:196",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#38:1",
      "@version": 1,
      "@class": "CoreError",
      "in": "#15:33",
      "out": "#13:202",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#39:0",
      "@version": 1,
      "@class": "exRelated",
      "in": "#13:80",
      "out": "#13:28",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#39:1",
      "@version": 1,
      "@class": "exRelated",
      "in": "#13:82",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#39:2",
      "@version": 1,
      "@class": "exRelated",
      "in": "#13:82",
      "out": "#13:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#40:0",
      "@version": 3,
      "@class": "FullExample",
      "Class1": "public class IterationExample {\u000a\u000a    public static int[] numbers = {0, 1, 4, 6, 8, 3, 7, 5, -5, 18, 6, 54, -3, -5};\u000a\u000a    /* Result:\u000a     * \"0 1 4 6 8 3 7 5\"\u000a     * Try varying the numbers array to see how the output differs.\u000a     *\u000a     * Notice that despite, for n = 0, numbers[0] <= 0 it still repeats the loop.\u000a     * This is because the check happens at the end. After the addition.\u000a     *\u000a     * Also try moving the n++ (line 21) to before the print statement to see the results.\u000a     */\u000a    public static void main(String[] args){\u000a        int n = 0;\u000a        do{\u000a            System.out.print(numbers[n] + \" \");\u000a            n++;\u000a        }while(numbers[n] > 0);\u000a\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:0"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:1",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class IterationExample {\u000a\u000a    public static int[] numbers = {0, 1, 4, 6, 8, 3, 7, 5, -5, 18, 6, 54, -3, -5};\u000a\u000a    /* Result:\u000a     * \"0 1 4 6 8 3 7 5 -5 18 6 54 -3 -5\u000a     *  0 4 8 7 -5 6 -3\"\u000a     * Try varying the numbers array to see how the output differs.\u000a     */\u000a    public static void main(String[] args){\u000a\u000a        for(int n: numbers){\u000a            System.out.print(n + \" \");\u000a        }\u000a\u000a        System.out.println(\"\"); //Separator\u000a\u000a        for(int i = 0; i < numbers.length; i += 2){\u000a            System.out.print(numbers[i] + \" \");\u000a        }\u000a\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:1"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:2",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class IterationExample {\u000a\u000a    public static int[] numbers = {0, 1, 4, 6, 8, 3, 7, 5, -5, 18, 6, 54, -3, -5};\u000a\u000a    /* Result:\u000a     * \" \"\u000a     * Try varying the numbers array to see how the output differs.\u000a     *\u000a     * NB: This is suppose to be empty.\u000a     * This is because the check happens at the start.\u000a     *\u000a     * Additionally try changing our default value of n to see what happens. \u000a     */\u000a    public static void main(String[] args){\u000a        int n = 0;\u000a        while(numbers[n] > 0){\u000a            System.out.print(numbers[n] + \" \");\u000a            n++;\u000a        }\u000a\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:2"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:3",
      "@version": 3,
      "@class": "FullExample",
      "Class1": "public class Oscar {\u000a    public final String name;\u000a    public final int year;\u000a\u000a    public Oscar(String name, int year) {\u000a        this.name = name;\u000a        this.year = year;\u000a    }\u000a\u000a\u000a    /*\u000a     * Prints:\u000a     * \"Moonlight\u000a     * Spotlight\u000a     * Birdman\u000a     * 12 Years a Slave\u000a     * Argo\"\u000a     *\u000a     * This is an incredibly superfluous way to iterate over a list, but it does demonstrate a lot of the\u000a     * inner workings inside iterators. In general you do not ever need to implement your own.\u000a     * There are **far** easier ways we could have done this. \u000a     */\u000a    public static void main(String[] args) {\u000a        //Best picture winners from: https://en.wikipedia.org/wiki/Academy_Award_for_Best_Picture#2010s\u000a        //Apparently the Academy does not publish their own list\u000a        OscarWinner bestPicture = new OscarWinner();\u000a        bestPicture.add(\"Moonlight\", 2016);\u000a        bestPicture.add(\"Spotlight\", 2015);\u000a        bestPicture.add(\"Birdman\", 2014);\u000a        bestPicture.add(\"12 Years a Slave\", 2013);\u000a        bestPicture.add(\"Argo\", 2012);\u000a\u000a        for (Oscar winner: bestPicture){\u000a            System.out.println(winner.name);\u000a        }\u000a    }\u000a}",
      "Class2": "import java.util.ArrayList;\u000aimport java.util.Iterator;\u000a\u000a\u000apublic class OscarWinner implements Iterable<Oscar> {\u000a    private ArrayList<Oscar> winners;\u000a\u000a    public OscarWinner() {\u000a        winners = new ArrayList<>();\u000a    }\u000a\u000a    public OscarWinner(ArrayList<Oscar> winners) {\u000a        this.winners = winners;\u000a    }\u000a\u000a    public void add(Oscar o) {\u000a        winners.add(o);\u000a    }\u000a\u000a    public void add(String name, int year) {\u000a        winners.add(new Oscar(name, year));\u000a    }\u000a\u000a    @Override\u000a    public Iterator<Oscar> iterator() {\u000a        return new OscarIterator(winners.toArray(new Oscar[winners.size()]));\u000a    }\u000a\u000a}",
      "in_HasCode": ["#41:3", "#41:34"],
      "Class3": "import java.util.Iterator;\u000aimport java.util.NoSuchElementException;\u000aimport java.util.function.Consumer;\u000a\u000apublic class OscarIterator implements Iterator<Oscar> {\u000a\u000a    private final Oscar[] oscars;\u000a    private int position = 0;\u000a\u000a    public OscarIterator(Oscar[] oscars) {\u000a        this.oscars = oscars;\u000a    }\u000a\u000a    @Override\u000a    public boolean hasNext() {\u000a        return position < oscars.length;\u000a    }\u000a\u000a    @Override\u000a    public Oscar next() throws NoSuchElementException {\u000a        if (!hasNext()) throw new NoSuchElementException();\u000a\u000a        position++;\u000a        return oscars[position - 1];\u000a    }\u000a\u000a    //NB: Both remove() and forEachRemaining() have default implementations.\u000a    //These are sufficient.\u000a}",
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:5",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class ExceptionExample {\u000a\u000a\u000a    /*\u000a     * If we run this our output is: \"Please log in\"\u000a     *\u000a     * To experiment try:\u000a     * Deleting the comment start (the '//') on line 14.\u000a     * Re-adding the comment on line 14, and delete the comment start ('//') on line 15.\u000a     * Try running the program (in its original state with both comments) without the try catch block.\u000a     */\u000a    public static void main(String[] args){\u000a        Account q = new Account(\"Q\", \"SpectreWasAnAccident\");\u000a        try {\u000a            //q.login(\"Q\", \"SpectreWasAnAccident\");\u000a            //q.login(\"B\", \"SkyfallWasBetter\");\u000a            System.out.println(q.getSecretData());\u000a            //Here we catch the exception. It is the outermost layer and is exposed directly to user input\u000a            //If we use args to pass in the username and password\u000a        }catch(NotLoggedInException e){\u000a            System.out.println(\"Please log in\");\u000a        }\u000a    }\u000a}",
      "Class2": "public class Account {\u000a\u000a    private String username;\u000a    private String password; //PLEASE DO NOT EVER STORE UNENCRYPTED PASSWORDS. THIS IS AN EXAMPLE.\u000a    private boolean loggedIn = false;\u000a    private final String secretData = \"The double agent is Andrews\"; //This is literally the dumbest way ever to transmit secret data.\u000a\u000a    public Account(String username, String password) {\u000a        this.username = username;\u000a        this.password = password;\u000a    }\u000a\u000a    public boolean login(String user, String pwd){\u000a        if (username.equals(user) && password.equals(pwd)) { //PLEASE NEVER ACTUALLY DO THIS.\u000a            loggedIn = true;\u000a            return true;\u000a        }\u000a        return false;\u000a    }\u000a\u000a    //Notice that in here we throw the exception. Realistically we should not handle the exception here. It\u000a    //would cause poor separation of functionality if we did handle it here.\u000a    public String getSecretData() throws NotLoggedInException{\u000a        if (loggedIn) return secretData;\u000a        throw new NotLoggedInException();\u000a    }\u000a}",
      "Class3": "public class NotLoggedInException extends Exception {\u000a}",
      "in_HasCode": ["#41:5"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:6",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class FlowControlExample {\u000a\u000a    public static String method3(){\u000a        return \"Method 3 invoked\";\u000a    }\u000a\u000a    /*\u000a     * This main method is always output first no matter what!\u000a     * The program outputs:\u000a       \"Invoking main\u000a        Invoking method 1\u000a        Method 2 part 1 invoked\u000a        Method 3 invoked\u000a        Method 2 part 2 invoked!\u000a        Method 3 invoked\u000a        Method 2 part 2 invoked!\u000a        Method 3 invoked\u000a        Method 2 part 1 invoked\u000a        Method 3 invoked\u000a        Method 2 part 2 invoked!\u000a        Method 3 invoked\u000a        Ending main\"\u000a     *\u000a     * Notice that the order of the methods is not important within the file. Try changing where each method is\u000a     * in this file to demonstrate that.\u000a     *\u000a     */\u000a    public static void main(String args[]){\u000a        System.out.println(\"Invoking main\");\u000a        method1();\u000a        System.out.println(\"Ending main\");\u000a    }\u000a\u000a    public static void method1(){\u000a        System.out.println(\"Invoking method 1\");\u000a        for (int i = 0; i <= 9; i++){\u000a            if (i % 2 == 0){\u000a                System.out.println(method2(i));\u000a            }else{\u000a                System.out.println(method3());\u000a            }\u000a        }\u000a    }\u000a\u000a    /*\u000a     * Notice that we do not need an else statement when we have a return inside an if.\u000a     * Why?\u000a     */\u000a    public static String method2(int n){\u000a       if (n % 3 == 0){\u000a           return \"Method 2 part 1 invoked\";\u000a       }\u000a       return \"Method 2 part 2 invoked!\";\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:6"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:7",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class LogicExample{\u000a\u000a    public static boolean booleanVar = true;\u000a    public static int intVar = 150;\u000a\u000a    public static boolean booleanMethod(){\u000a        return false;\u000a    }\u000a\u000a\u000a    /*\u000a     * Outputs:\u000a     \"Conditional 1\u000a      Conditional 3\u000a      Conditional 4\u000a     \"\u000a     * Try varying the result of the method and the values of the variables to see what happens.\u000a     */\u000a    public static void main(String... args){\u000a        int testNumber = 79;\u000a        if(testNumber > intVar || booleanVar){\u000a            System.out.println(\"Conditional 1\");\u000a        }else if(testNumber < intVar){\u000a            System.out.println(\"Conditional 2\");\u000a        }\u000a\u000a        testNumber += 71;\u000a\u000a        if (testNumber >= intVar && !booleanMethod()){\u000a            System.out.println(\"Conditional 3\");\u000a        }\u000a\u000a        if (booleanVar  != booleanMethod()){\u000a            System.out.println(\"Conditional 4\");\u000a        }\u000a\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:7"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:8",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class ArthOperatorsExample {\u000a\u000a    public static void main(String[] args) {\u000a        System.out.println(\"3 + 2: \" + (3 + 2));\u000a        System.out.println(\"3 - 2: \" + (3 - 2));\u000a        System.out.println(\"3 * 2: \" + (3 * 2));\u000a        System.out.println(\"3 / 2: \" + (3 / 2));\u000a        System.out.println(\"3 % 2: \" + (3 % 2));\u000a        System.out.println(\"\");\u000a        System.out.println(\"1.75 + 3.01: \" + (1.75 + 3.01));\u000a        System.out.println(\"1.75 - 3.01: \" + (1.75 - 3.01));\u000a        System.out.println(\"1.75 * 3.01: \" + (1.75 * 3.01));\u000a        System.out.println(\"1.75 / 3.01: \" + (1.75 / 3.01));\u000a        System.out.println(\"1.75 % 3.01: \" + (1.75 % 3.01));\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:8"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:9",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class PrimitiveTypeExample {\u000a    public static final byte a = 31;\u000a    public static short b = 415;\u000a    public int c = 9265358;\u000a    private final long d = 979323846;\u000a    protected float e = 2.7182f;\u000a\u000a    public static void main(String[] args) {\u000a        double f = 264.3383279;\u000a        boolean g = true;\u000a        final char h = 'a';\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:9"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:10",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "import java.util.ArrayList;\u000aimport java.util.LinkedList;\u000aimport java.util.List;\u000aimport java.util.Vector;\u000a\u000apublic class JavaCollectionExample {\u000a\u000a    public static void main(String[] args) {\u000a        Person a = new Person(\"Ville Virtanen\", 41);\u000a        Person b = new Person(\"Don Walsh\", 85);\u000a        Person c = new Person(\"Lee Sang-hyeok\", 21);\u000a\u000a        //Try uncommenting line 15 or 16 and have the rest commented.\u000a        //Notice that our code still works?\u000a        ArrayList<Person> people = new ArrayList<>();\u000a        //LinkedList<Person> people = new LinkedList<>();\u000a        //Vector<Person> people = new Vector<Person>();\u000a        people.add(a);\u000a        people.add(b);\u000a        people.add(c);\u000a\u000a        sortPeople(people);\u000a    }\u000a\u000a    public static void sortPeople(List<Person> p){\u000a        //Lambda expressions!\u000a        //Try changing the minus to a plus.\u000a        //Even try making it a multiplication sign.\u000a        //Try changing the order of p1 and p2.\u000a        p.sort((p1, p2) -> p1.age - p2.age);\u000a        p.forEach((p1) -> System.out.println(p1.name));\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:10"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:11",
      "@version": 3,
      "@class": "FullExample",
      "Class1": "import java.util.ArrayList;\u000aimport java.util.LinkedList;\u000aimport java.util.List;\u000aimport java.util.Vector;\u000a\u000apublic class JavaCollectionExample {\u000a\u000a    public static void main(String[] args) {\u000a        Person a = new Person(\"Ville Virtanen\", 41);\u000a        Person b = new Person(\"Don Walsh\", 85);\u000a        Person c = new Person(\"Lee Sang-hyeok\", 21);\u000a\u000a        //Try uncommenting line 15 or 16 and have the rest commented.\u000a        //Notice that our code still works?\u000a        ArrayList<Person> people = new ArrayList<>();\u000a        //LinkedList<Person> people = new LinkedList<>();\u000a        //Vector<Person> people = new Vector<Person>();\u000a        people.add(a);\u000a        people.add(b);\u000a        people.add(c);\u000a\u000a        System.out.println(\"List at the start\");\u000a        printPeople(people);\u000a\u000a        System.out.println(\"\\nSorted list\");\u000a        sortPeople(people);\u000a        printPeople(people);\u000a\u000a        System.out.println(\"\\nIncrementing all ages\");\u000a        updateYear(people);\u000a        printPeople(people);\u000a\u000a        System.out.println(\"\\nThe problem using mutable data types\");\u000a        b.age = 17;\u000a        printPeople(people);\u000a        System.out.println(\"Our order is not guaranteed!\");\u000a\u000a        System.out.println(\"\\nBut we can't outright replace people by assignment\");\u000a        Person d = new Person(\"Ingrid Kosar\", 69);\u000a        a = d;\u000a        printPeople(people);\u000a    }\u000a\u000a    public static void sortPeople(List<Person> p){\u000a        //Lambda expressions!\u000a        //Try changing the minus to a plus.\u000a        //Even try making it a multiplication sign.\u000a        //Try changing the order of p1 and p2.\u000a        p.sort((p1, p2) -> p1.age - p2.age);\u000a    }\u000a\u000a    public static void printPeople(List<Person> p){\u000a        p.forEach((p1) -> System.out.println(p1.name +\": \" + p1.age));\u000a    }\u000a\u000a    public static void updateYear(List<Person> p ){\u000a        p.forEach((p1) -> p1.age++);\u000a    }\u000a}",
      "Class2": "public class Person {\u000a    public String name;\u000a    public int age;\u000a\u000a    public Person(String name, int age) {\u000a        this.name = name;\u000a        this.age = age;\u000a    }\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:11"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:12",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "import java.util.*;\u000a\u000apublic class JavaCollectionExample {\u000a\u000a    public static void main(String[] args) {\u000a        Person a = new Person(\"Bob Graham\", 1894);\u000a        Person b = new Person(\"Bertha Benz\", 1849);\u000a        Person c = new Person(\"Bob Graham\", 1894); //A different one born in the same year\u000a\u000a        Person d = new Person(\"Ericia Graham\", 1901);\u000a        Person f = new Person(\"Karl Benz\", 1844);\u000a        Person g = new Person(\"Walter White\", 1899);\u000a\u000a        Map<Person, Person> marriages = new HashMap<>();\u000a        marriages.put(a, d);\u000a        marriages.put(b, f);\u000a\u000a        System.out.println(\"Let's see our progress after adding two couples\");\u000a        viewMarriages(marriages);\u000a\u000a        System.out.println(\"\\nLet's try adding the different Bob Graham!\");\u000a        marriages.put(c, g);\u000a\u000a        System.out.println(\"\\nHow did that change anything?\");\u000a        viewMarriages(marriages);\u000a\u000a        System.out.println(\"\\nOh no! Walter White wants a divorce and this Bob Graham wants to marry his deceased son's girlfriend\");\u000a        Person h = new Person(\"Alicia Andrews\", 1909);\u000a        marriages.replace(a, h);\u000a\u000a        System.out.println(\"\\nCan we look up just that marriage?\");\u000a        System.out.println(a.name + \" remarried \" + marriages.get(a).name);\u000a    }\u000a\u000a    public static void viewMarriages(Map<Person, Person> marriages){\u000a        marriages.forEach((k, v) -> System.out.println(k.name + \" married \" + v.name));\u000a    }\u000a}",
      "Class2": "public class Person {\u000a    public final String name;\u000a    public final int yearOfBirth;\u000a\u000a    public Person(String name, int yearOfBirth) {\u000a        this.name = name;\u000a        this.yearOfBirth = yearOfBirth;\u000a    }\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:12"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:13",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "import java.util.HashSet;\u000a\u000apublic class SetExample {\u000a\u000a    public static void main(String[] args) {\u000a        GroupElement e0 = new GroupElement(0, 3);\u000a        GroupElement e1 = new GroupElement(1, 3);\u000a        GroupElement e2 = new GroupElement(2, 3);\u000a\u000a        HashSet<GroupElement> group = new HashSet<>();\u000a        group.add(e0);\u000a        group.add(e1);\u000a        group.add(e2);\u000a\u000a        System.out.println(\"Let's find out some properties\");\u000a        System.out.println(\"Adding e0 again: \"+ group.add(e0));\u000a        System.out.println(\"Adding equivalent to e0: \"+ group.add(new GroupElement(0, 3)));\u000a        System.out.println(\"Adding a different equivalent to e0: \"+group.add(new GroupElement(3, 3)));\u000a        System.out.println(\"Cardinality (size) of group: \"+ group.size());\u000a        System.out.println(\"Removing e0: \" + group.remove(e0));\u000a        System.out.println(\"Cardinality (size) of group: \"+ group.size());\u000a        System.out.println(\"Readding e0: \"+ group.add(e0));\u000a        System.out.println(\"Removing equivalent to e0: \" + group.remove(new GroupElement(0, 3)));\u000a    }\u000a}",
      "Class2": "public class GroupElement {\u000a    public final int value;\u000a    private final int mod;\u000a\u000a    public GroupElement(int value, int mod) {\u000a        this.value = value % mod;\u000a        this.mod = mod;\u000a    }\u000a\u000a    public int add(GroupElement e){\u000a        assert(e.mod == mod);\u000a        return (e.value + value) % mod;\u000a    }\u000a\u000a    public int subtract(GroupElement e){\u000a        assert(e.mod == mod);\u000a        return (e.value - value) % mod;\u000a    }\u000a\u000a    public int multiply(GroupElement e){\u000a        assert(e.mod == mod);\u000a        int res = value;\u000a        for(int i = 0; i < e.value; i++){\u000a            res = add(e);\u000a        }\u000a        return res;\u000a    }\u000a\u000a    /*\u000a     * We have to override equals and hashcode because of Java's \"contract\" between the two.\u000a     * If two objects are equal then they should have the same hashcode.\u000a     */\u000a    @Override\u000a    public boolean equals(Object o){\u000a        System.out.println(\"Invoking equality\");\u000a        if (!(o instanceof GroupElement)) return false;\u000a        GroupElement e = (GroupElement)o;\u000a        return (e.value == value && e.mod == mod);\u000a    }\u000a\u000a    @Override\u000a    public int hashCode(){\u000a        return new Integer(Integer.toString(value)  + Integer.toString(mod));\u000a    }\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:13"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:14",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "import java.util.LinkedList;\u000a\u000apublic class LinkedListExample {\u000a\u000a    public static void main(String[] args) {\u000a        Person p0 = new Person(\"Sterling Archer\");\u000a        Person p1 = new Person(\"Malory Archer\");\u000a        Person p2 = new Person(\"Cyril Figgis\");\u000a        Person p3 = new Person(\"Pamela Poovey\");\u000a\u000a        LinkedList<Person> queue = new LinkedList<Person>(){{\u000a                                                        add(p0);\u000a                                                        add(p1);\u000a                                                        add(p2);\u000a                                                        }};\u000a\u000a\u000a        System.out.println(\"Notice the order of output compared to the order of addition\");\u000a        for (Person p: queue){\u000a            System.out.println(p.name);\u000a        }\u000a        System.out.println(\"\\nLet's pop the top from the queue and then add someone new to the start\");\u000a        queue.pop();\u000a        queue.addFirst(p3);\u000a        for (Person p: queue){\u000a            System.out.println(p.name);\u000a        }\u000a\u000a    }\u000a}",
      "Class2": "public class Person {\u000a    public final String name;\u000a\u000a    public Person(String name) {\u000a        this.name = name;\u000a    }\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:14"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:15",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class OperationsExample {\u000a\u000a    public static void main(String[] args) {\u000a        int x = 5;\u000a        System.out.println(\"x is: \" + x);\u000a        if(true){\u000a            x = 8;\u000a            System.out.println(\"Inside the if x is: \" + x);\u000a        }\u000a        System.out.println(\"Outside the if x is: \" + x);\u000a\u000a        //Try changing x to a String and see what happens\u000a        //String x = \"5\";\u000a        System.out.println(\"But we cannot change its type: \" + x);\u000a    }\u000a\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:15"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:16",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Animal {\u000a    protected String name;\u000a    protected int age;\u000a\u000a    public Animal(String name, int age) {\u000a        this.name = name;\u000a        this.age = age;\u000a    }\u000a\u000a    @Override\u000a    public String toString(){\u000a        return \"This animal is called \" + name + \" is \" + age + \" years old\";\u000a    }\u000a\u000a    public String getName(){\u000a        return name;\u000a    }\u000a\u000a    public static void main(String[] args) {\u000a        Person p = new Person(\"Harold\", 53, 172);\u000a        System.out.println(p);\u000a\u000a        Dolphin d = new Dolphin(\"Fin\", 3, 150);\u000a        System.out.println(d);\u000a\u000a        Animal a = new Animal(\"John\", 37);\u000a        System.out.println(a);\u000a\u000a        //Cast p to an animal\u000a        Animal p2 = (Animal)p;\u000a        //Notice the toString method it uses\u000a        System.out.println(p2);\u000a        //Uncomment the line below and notice how we are not allowed to use\u000a        //The getAGe() method that only exists in Person and not in Animal\u000a        //System.out.println(p2.getAge());\u000a\u000a        //Yet we can use getName()\u000a        System.out.println(p2.getName());\u000a\u000a        //We can perform an explicit cast to make our int age become a double\u000a        double doubleAge = p2.age;\u000a        System.out.println(doubleAge);\u000a\u000a        doubleAge += 0.8;\u000a        System.out.println(doubleAge);\u000a\u000a        //But has to be explicit in the other direction because we may lose information\u000a        int realAge = (int)doubleAge;\u000a        System.out.println(realAge);\u000a    }\u000a}",
      "Class2": "public class Person extends Animal{\u000a    protected int height;\u000a\u000a    public Person(String name, int age, int height) {\u000a        super(name, age);\u000a        this.height = height;\u000a    }\u000a\u000a    @Override\u000a    public String toString(){\u000a        return name + \" is \" + height + \"cm tall and \" + age + \" years old\";\u000a    }\u000a\u000a    public int getAge(){\u000a        return age;\u000a    }\u000a}",
      "Class3": "public class Dolphin extends Animal{\u000a    protected int length;\u000a\u000a    public Dolphin(String name, int age, int length) {\u000a        super(name, age);\u000a        this.length = length;\u000a    }\u000a\u000a    @Override\u000a    public String toString(){\u000a        return \"This dolphin is \" + length + \"cm long at age \" + age;\u000a    }\u000a}",
      "in_HasCode": ["#41:16"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:17",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class DataAccessExample {\u000a\u000a    public static int f(int x){\u000a        return x + 3;\u000a    }\u000a\u000a    public static void main(String[] args) {\u000a        System.out.println(f(5));\u000a        System.out.println(f(-2));\u000a        System.out.println(f(10));\u000a        System.out.println(f(0));\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:17"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:18",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class VariableExample {\u000a\u000a    private static final int x = 5;\u000a    protected static String y = \"Hello\";\u000a    public int z = 9;\u000a    double u = 3.7;\u000a\u000a    public int f(final int x){\u000a        return x - 3;\u000a    }\u000a\u000a    public static void main(String[] args) {\u000a        System.out.println(x);\u000a        System.out.println(y);\u000a        VariableExample v = new VariableExample();\u000a        System.out.println(v.z);\u000a        System.out.println(v.u);\u000a        System.out.println(v.f(x));\u000a    }\u000a\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:18"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:19",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u000a\u0009public static void main(String[] args) {\u000a\u0009\u0009int x = 3;\u000a\u0009\u0009System.out.println(x);\u000a\u0009\u0009//Update x\u000a\u0009\u0009x = 17;\u000a\u0009\u0009System.out.println(x);\u000a\u0009}\u000a\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:19"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:20",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Movie laLaLand = new Movie(\"La La Land\", 2016, 443.9);\u000a\u0009\u0009System.out.println(\"Gross sales: \" + laLaLand.getGross());\u000a\u0009\u0009//Update sales\u000a\u0009\u0009incrementSales(laLaLand, 1.3);\u000a\u0009\u0009System.out.println(\"Updates gross sales: \" + laLaLand.getGross());\u000a\u0009}\u000a\u0009\u000a\u0009public static void incrementSales(Movie m, double amount){\u000a\u0009\u0009m.incrementGross(amount);\u000a\u0009}\u000a\u000a}",
      "Class2": "public class Movie {\u000a\u0009public final String name;\u000a\u0009public final int year;\u000a\u0009private double gross;\u000a\u0009\u000a\u0009public Movie(String name, int year, double gross) {\u000a\u0009\u0009super();\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009\u0009this.gross = gross;\u000a\u0009}\u000a\u000a\u0009public double getGross() {\u000a\u0009\u0009return gross;\u000a\u0009}\u000a\u000a\u0009public void incrementGross(double increase) {\u000a\u0009\u0009this.gross += increase;\u000a\u0009}\u000a\u0009\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:20"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:21",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Movie[] emmaStoneFilms = new Movie[5];\u000a\u0009\u0009emmaStoneFilms[0] = new Movie(\"La La Land\", 2016, 443.9);\u000a\u0009\u0009emmaStoneFilms[1] = new Movie(\"Birdman\", 2014, 103.2);\u000a\u0009\u0009emmaStoneFilms[2] = new Movie(\"Zombieland\", 2009, 102.4);\u000a\u0009\u0009emmaStoneFilms[3] = new Movie(\"Superbad\", 2007, 169.9);\u000a\u0009\u0009emmaStoneFilms[4] = new Movie(\"Movie 43\", 2013, 32.4);\u000a\u0009\u0009\u000a\u0009\u0009for(Movie m: emmaStoneFilms){\u000a\u0009\u0009\u0009System.out.println(m);\u000a\u0009\u0009}\u000a\u000a\u0009}\u000a\u000a}",
      "Class2": "public class Movie {\u000a\u0009public final String name;\u000a\u0009public final int year;\u000a\u0009private double gross;\u000a\u0009\u000a\u0009public Movie(String name, int year, double gross) {\u000a\u0009\u0009super();\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009\u0009this.gross = gross;\u000a\u0009}\u000a\u000a\u0009public double getGross() {\u000a\u0009\u0009return gross;\u000a\u0009}\u000a\u000a\u0009public void incrementGross(double increase) {\u000a\u0009\u0009this.gross += increase;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return name + \"(\" + year + \") grossed $\" + gross +\" million\";  \u000a\u0009}\u000a\u0009\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:21"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:22",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Movie[][] oscarWinners = new Movie[2][];\u000a\u0009\u0009oscarWinners[0] = new Movie[3];\u000a\u0009\u0009oscarWinners[0][0] = new Movie(\"Moonlight\", 2016, 65);\u000a\u0009\u0009oscarWinners[0][1] = new Movie(\"Manchester By the Sea\", 2016, 74.6);\u000a\u0009\u0009oscarWinners[0][2] = new Movie(\"Hacksaw Ridge\", 2016, 175.3);\u000a\u0009\u0009oscarWinners[1] = new Movie[4];\u000a\u0009\u0009oscarWinners[1][0] = new Movie(\"Spotlight\", 2015, 92.2);\u000a\u0009\u0009oscarWinners[1][1] = new Movie(\"Spotlight\", 2015, 92.2);\u000a\u0009\u0009oscarWinners[1][2] = new Movie(\"Mad Max: Fury Road\", 2015, 378.9);\u000a\u0009\u0009oscarWinners[1][3] = new Movie(\"Room\", 2015, 36.3);\u000a\u0009\u0009\u000a\u0009\u0009//Notice the data type\u000a\u0009\u0009for (Movie[] year: oscarWinners){\u000a\u0009\u0009\u0009System.out.println(year);\u000a\u0009\u0009\u0009for(Movie m: year){\u000a\u0009\u0009\u0009\u0009System.out.println(m);\u000a\u0009\u0009\u0009}\u000a\u0009\u0009\u0009System.out.println(\"--\");\u000a\u0009\u0009}\u000a\u0009\u0009\u000a\u0009}\u000a\u000a}",
      "Class2": "public class Movie {\u000a\u0009public final String name;\u000a\u0009public final int year;\u000a\u0009private double gross;\u000a\u0009\u000a\u0009public Movie(String name, int year, double gross) {\u000a\u0009\u0009super();\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009\u0009this.gross = gross;\u000a\u0009}\u000a\u000a\u0009public double getGross() {\u000a\u0009\u0009return gross;\u000a\u0009}\u000a\u000a\u0009public void incrementGross(double increase) {\u000a\u0009\u0009this.gross += increase;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return name + \"(\" + year + \") grossed $\" + gross +\" million\";  \u000a\u0009}\u000a\u0009\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:22"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:23",
      "@version": 3,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Movie m1 = new Movie(\"The Grand Budapest Hotel\", 2014, 174.8);\u000a\u0009\u0009Movie m2 = new Movie(\"Ocean's Eleven\", 2001, 450.7);\u000a\u0009\u0009Movie m3 = new Movie(\"Ocean's 11\", 1960, 5);\u000a\u0009\u0009Movie m4 = new Movie(\"The Grand Budapest Hotel\", 2014, 174.8);\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(\"Does m1 == m4? - \" + (m1 == m4));\u000a\u0009\u0009System.out.println(\"Does m1 equal m4? - \" + (m1.equals(m4)));\u000a\u0009\u0009System.out.println(\"Does m1 == m2? - \" + (m1 == m2));\u000a\u0009\u0009System.out.println(\"Does m2 equal m3? - \" + (m2.equals(m3)));\u000a\u0009\u0009\u000a\u0009}\u000a\u000a}",
      "Class2": "public class Movie {\u000a\u0009public final String name;\u000a\u0009public final int year;\u000a\u0009private double gross;\u000a\u0009\u000a\u0009public Movie(String name, int year, double gross) {\u000a\u0009\u0009super();\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009\u0009this.gross = gross;\u000a\u0009}\u000a\u000a\u0009public double getGross() {\u000a\u0009\u0009return gross;\u000a\u0009}\u000a\u000a\u0009public void incrementGross(double increase) {\u000a\u0009\u0009this.gross += increase;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return name + \"(\" + year + \") grossed $\" + gross +\" million\";  \u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public boolean equals(Object o){\u000a\u0009\u0009if (!(o instanceof Movie)) return false;\u000a\u0009\u0009Movie m = (Movie)o;\u000a\u0009\u0009return m.name == name && m.year == year && m.gross == gross;\u000a\u0009}\u000a\u0009\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:23"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:24",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Movie m1 = null;\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(\"Can we de-reference nulls?\");\u000a\u0009\u0009try{\u000a\u0009\u0009\u0009m1.getGross();\u000a\u0009\u0009}catch(NullPointerException e){\u000a\u0009\u0009\u0009System.out.println(\"Nope\");\u000a\u0009\u0009}\u000a\u0009\u0009\u000a\u0009}\u000a\u000a}",
      "Class2": "public class Movie {\u000a\u0009public final String name;\u000a\u0009public final int year;\u000a\u0009private double gross;\u000a\u0009\u000a\u0009public Movie(String name, int year, double gross) {\u000a\u0009\u0009super();\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009\u0009this.gross = gross;\u000a\u0009}\u000a\u000a\u0009public double getGross() {\u000a\u0009\u0009return gross;\u000a\u0009}\u000a\u000a\u0009public void incrementGross(double increase) {\u000a\u0009\u0009this.gross += increase;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return name + \"(\" + year + \") grossed $\" + gross +\" million\";  \u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public boolean equals(Object o){\u000a\u0009\u0009if (!(o instanceof Movie)) return false;\u000a\u0009\u0009Movie m = (Movie)o;\u000a\u0009\u0009return m.name == name && m.year == year && m.gross == gross;\u000a\u0009}\u000a\u0009\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:24"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:25",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009String s = \"This is a string!\";\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(s);\u000a\u0009\u0009\u000a\u0009}\u000a\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:25"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:26",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009StringBuilder sb = new StringBuilder((int)('z'-'a')); //There are many constructors to choose from\u000a\u0009\u0009for (char i='a'; i<='z'; i++){\u000a\u0009\u0009\u0009sb.append(i);\u000a\u0009\u0009}\u000a\u0009\u0009System.out.println((sb.reverse()).toString());\u0009\u000a\u0009}\u000a\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:26"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:27",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Node<Integer> n1 = new Node<>(null, null, 5);\u000a\u0009\u0009Node<Integer> n2 = new Node<>(null, null, 8);\u000a\u0009\u0009Node<Integer> n3 = new Node<>(n1, n2, 6); //root node\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(n3.getValue());\u000a\u0009\u0009\u000a\u0009\u0009//Let's change the type\u000a\u0009\u0009Node<Double> n4 = new Node<>(null, null, 3.14);\u000a\u0009\u0009Node<Double> n5 = new Node<>(null, null, 2.71);\u000a\u0009\u0009Node<Double> n6 = new Node<>(n4, n5, 1.41);\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(n6.getValue());\u000a\u0009\u0009\u000a\u0009\u0009//What would happen if we replace n4 with n1 when we define n6?\u000a\u0009}\u000a\u000a}",
      "Class2": "public class Node<T> {\u000a\u0009public Node<T> left;\u000a\u0009public Node<T> right;\u000a\u0009private final T value;\u000a\u0009\u000a\u0009public Node(Node<T> left, Node<T> right, T value) {\u000a\u0009\u0009this.left = left;\u000a\u0009\u0009this.right = right;\u000a\u0009\u0009this.value = value;\u000a\u0009}\u000a\u000a\u0009public T getValue() {\u000a\u0009\u0009return value;\u000a\u0009}\u000a\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:27"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:28",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Coffee origin = Coffee.YIRGACHEFFEE;\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(origin);\u000a\u0009}\u000a\u000a}",
      "Class2": "public enum Coffee{\u000a    YIRGACHEFFEE, JAVA, COLOMBIA\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:28"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:29",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Animal a1 = new Animal(\"Cara\", 4);\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(a1);\u000a\u0009\u0009\u000a\u0009\u0009//Let's try updating using our update functions\u000a\u0009\u0009a1.update(\"Davey\");\u000a\u0009\u0009a1.update(5);\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(a1);\u000a\u0009}\u000a\u000a}",
      "Class2": "public class Animal {\u000a\u0009private String name;\u000a\u0009private int age;\u000a\u0009\u000a\u0009\u000a\u0009/**\u000a\u0009 * @param name\u000a\u0009 * @param age\u000a\u0009 */\u000a\u0009public Animal(String name, int age) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.age = age;\u000a\u0009}\u000a\u0009\u000a\u0009public void update(String name){\u000a\u0009\u0009this.name = name;\u000a\u0009}\u000a\u0009\u000a\u0009public void update(int age){\u000a\u0009\u0009this.age = age;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return \"This animal is \" + age + \"years old and called \" + name; \u000a\u0009}\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:29"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:30",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009System.out.println(\"I am always executed first no matter what\");\u000a\u0009}\u000a\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:30"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:31",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009System.out.println(product(1.0, 2.5, 3.1));\u000a\u0009\u0009System.out.println(product(-1.0, -2.5, 6.3, 5.1)); //This **MAY** give an unexpected result\u000a\u0009\u0009System.out.println(product());\u000a\u0009}\u000a\u0009\u000a\u0009public static double product(double... numbers){\u000a\u0009\u0009double sum = 0;\u000a\u0009\u0009for (double n: numbers){\u000a\u0009\u0009\u0009sum += n;\u000a\u0009\u0009}\u000a\u0009\u0009return sum;\u000a\u0009}\u000a\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:31"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:32",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Animal p1 = new Person(\"Emily\", 37, 66.5, 170); //We cannot cannot create an 'Animal' but can its subtype\u000a\u0009\u0009//Try removing the comments to see what happens\u000a\u0009\u0009//Animal p2 = new Animal(\"Fredrick\", 1);\u000a\u0009}\u000a}",
      "Class2": "public abstract class Animal {\u000a\u0009private String name;\u000a\u0009private int age;\u000a\u0009\u000a\u0009\u000a\u0009/**\u000a\u0009 * @param name\u000a\u0009 * @param age\u000a\u0009 */\u000a\u0009public Animal(String name, int age) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.age = age;\u000a\u0009}\u000a\u0009\u000a\u0009public void update(String name){\u000a\u0009\u0009this.name = name;\u000a\u0009}\u000a\u0009\u000a\u0009public void update(int age){\u000a\u0009\u0009this.age = age;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return \"This animal is \" + age + \"years old and called \" + name; \u000a\u0009}\u000a}",
      "Class3": "public class Person extends Animal {\u000a\u0009public double weight;\u000a\u0009public int height;\u000a\u000a\u0009//If a Person is defined without weight and height then we assign these default values implicitly\u000a\u0009public Person(String name, int age) {\u000a\u0009\u0009super(name, age);\u000a\u0009}\u000a\u0009\u000a\u0009public Person(String name, int age, double weight, int height){\u000a\u0009\u0009super(name, age);\u000a\u0009\u0009this.weight = weight;\u000a\u0009\u0009this.height = height;\u000a\u0009}\u000a\u0009\u000a}",
      "in_HasCode": ["#41:32"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:33",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public interface Ageable {\u000a\u0009void birthday();\u000a\u0009\u000a\u0009default boolean isAgeable(){\u000a\u0009\u0009return true;\u000a\u0009}\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009Person p1 = new Person(\"Gemma\", 3, 10.2, 70);\u000a\u0009\u0009System.out.println(\"Can we age this Person?\" + p1.isAgeable());\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(\"This person is this number of years old: \" + p1.age);\u000a\u0009\u0009\u000a\u0009\u0009p1.birthday();\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(\"After their birthday they are now: \" + p1.age);\u000a\u0009}\u000a}",
      "Class2": "public class Person extends Animal {\u000a\u0009public double weight;\u000a\u0009public int height;\u000a\u000a\u0009//If a Person is defined without weight and height then we assign these default values implicitly\u000a\u0009public Person(String name, int age) {\u000a\u0009\u0009super(name, age);\u000a\u0009}\u000a\u0009\u000a\u0009public Person(String name, int age, double weight, int height){\u000a\u0009\u0009super(name, age);\u000a\u0009\u0009this.weight = weight;\u000a\u0009\u0009this.height = height;\u000a\u0009}\u000a\u000a\u0009//Notice that we do not need to override a method with the default keyword\u000a\u0009//Further notice that we do not need to say we implement the interface in the child class\u000a\u0009@Override\u000a\u0009public void birthday() {\u000a\u0009\u0009age++;\u000a\u0009}\u000a\u0009\u000a}",
      "Class3": "public abstract class Animal implements Ageable{\u000a\u0009private String name;\u000a\u0009protected int age;\u000a\u0009\u000a\u0009public Animal(String name, int age) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.age = age;\u000a\u0009}\u000a\u0009\u000a\u0009public void update(String name){\u000a\u0009\u0009this.name = name;\u000a\u0009}\u000a\u0009\u000a\u0009public void update(int age){\u000a\u0009\u0009this.age = age;\u000a\u0009}\u000a\u0009\u000a\u0009public int getAge(){\u000a\u0009\u0009return age;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return \"This animal is \" + age + \"years old and called \" + name; \u000a\u0009}\u000a\u0009\u000a\u0009//Notice that we do not have to define the interface methods within an abstract class\u000a\u0009//This is because interface methods are implicitly abstract\u000a}",
      "in_HasCode": ["#41:33"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:34",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Example {\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009SprintRunner sr1 = new SprintRunner(10.32);\u000a\u0009\u0009SprintRunner sr2 = new SprintRunner(10.01);\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(\"How does sr1 compare to sr2? \" + sr1.compareTo(sr2));\u000a\u0009}\u000a}",
      "Class2": "public class SprintRunner implements Comparable<SprintRunner>{\u000a\u0009public double bestTime;\u000a\u0009\u000a\u0009public SprintRunner(double bestTime){\u000a\u0009\u0009this.bestTime = bestTime;\u000a\u0009}\u000a\u000a\u0009@Override\u000a\u0009public int compareTo(SprintRunner o) {\u000a\u0009\u0009if (bestTime == o.bestTime) return 0;\u000a\u0009\u0009if (bestTime > o.bestTime) return 1;\u000a\u0009\u0009return -1;\u000a\u0009}\u000a\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:35"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:35",
      "@version": 4,
      "@class": "FullExample",
      "Class1": "public class Movie {\u000a\u0009public String name;\u000a\u0009public int year;\u000a\u0009\u000a\u0009public String getInformation(){\u000a\u0009\u0009return name + \"(\" + year + \")\";\u000a\u0009}\u000a\u000a\u0009public Movie(String name, int year) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009}\u000a\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009DramaMovie d = new DramaMovie(\"Hidden Figures\", 2016, Rating.PG);\u000a\u0009\u0009Movie m = d;\u000a\u0009\u0009\u000a\u0009\u0009//In both cases we get the 'DramaMovie' method invoked despite the types.  We can only do this because getINformation() is inthe superclass - this means it is guaranteed to exist. \u000a\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(m.getInformation());\u000a\u0009\u0009\u000a\u0009\u0009Movie m2 = new DramaMovie(\"Hidden Figures\", 2016, Rating.PG);\u000a\u0009\u0009System.out.println(m2.getInformation());\u000a\u0009}\u000a}",
      "Class2": "public class DramaMovie extends Movie {\u000a\u0009public Rating rating;\u000a\u000a\u0009public DramaMovie(String name, int year, Rating rating) {\u000a\u0009\u0009super(name, year);\u000a\u0009\u0009this.rating = rating;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String getInformation(){\u000a\u0009\u0009return name + \"(\" + year + \"). Rated \" + rating;\u000a\u0009}\u000a\u000a}",
      "Class3": "public enum Rating {\u000a\u0009U, PG, TWELVE, FIFTEEN, EIGHTEEN\u000a\u0009\u000a}",
      "in_HasCode": ["#41:36"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:36",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Movie {\u000a\u0009public String name;\u000a\u0009public int year;\u000a\u0009\u000a\u0009public String getInformation(){\u000a\u0009\u0009return name + \"(\" + year + \")\";\u000a\u0009}\u000a\u000a\u0009public Movie(String name, int year) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009}\u000a\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009DramaMovie d = new DramaMovie(\"Hidden Figures\", 2016, Rating.PG);\u000a\u0009\u0009Object m = d; //Implicit cast\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(\"Does d equal m? \" + d.equals(m));\u000a\u0009\u0009System.out.println(\"Does m equal d? \" + m.equals(d));\u000a\u0009}\u000a}",
      "Class2": "public class DramaMovie extends Movie {\u000a\u0009public Rating rating;\u000a\u000a\u0009public DramaMovie(String name, int year, Rating rating) {\u000a\u0009\u0009super(name, year);\u000a\u0009\u0009this.rating = rating;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String getInformation(){\u000a\u0009\u0009return name + \"(\" + year + \"). Rated \" + rating;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public boolean equals(Object o){\u000a\u0009\u0009System.out.println(\"Using the equals method in DramaMovie.\");\u000a\u0009\u0009if (!(o instanceof DramaMovie)) return false;\u000a\u0009\u0009DramaMovie m = (DramaMovie)o; //Explicit cast. Safe because of the line above. \u000a\u0009\u0009return m.name == name && m.year == year && m.rating == rating;\u000a\u0009}\u000a\u000a}",
      "Class3": "public enum Rating {\u000a\u0009U, PG, TWELVE, FIFTEEN, EIGHTEEN\u000a\u0009\u000a}",
      "in_HasCode": ["#41:37"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:37",
      "@version": 3,
      "@class": "FullExample",
      "Class1": "public class Movie {\u000a\u0009public String name;\u000a\u0009public int year;\u000a\u0009\u000a\u0009public String getInformation(){\u000a\u0009\u0009return name + \"(\" + year + \")\";\u000a\u0009}\u000a\u000a\u0009public Movie(String name, int year) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009}\u000a\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009DramaMovie d = new DramaMovie(\"Hidden Figures\", 2016, Rating.PG);\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(d.getInformation());\u000a\u0009\u0009System.out.println(d);\u000a\u0009}\u000a}",
      "Class2": "public class DramaMovie extends Movie {\u000a\u0009public Rating rating;\u000a\u000a\u0009public DramaMovie(String name, int year, Rating rating) {\u000a\u0009\u0009super(name, year);\u000a\u0009\u0009this.rating = rating;\u000a\u0009}\u000a\u0009\u000a\u0009\u000a\u0009//Notice that this method also exists in Movie\u000a\u0009//We could commonly use toString for this purpose. It exists in Object.\u000a\u0009@Override\u000a\u0009public String getInformation(){\u000a\u0009\u0009return name + \"(\" + year + \"). Rated \" + rating;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return getInformation();\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public boolean equals(Object o){\u000a\u0009\u0009System.out.println(\"Using the equals method in DramaMovie.\");\u000a\u0009\u0009if (!(o instanceof DramaMovie)) return false;\u000a\u0009\u0009DramaMovie m = (DramaMovie)o; //Explicit cast. Safe because of the line above. \u000a\u0009\u0009return m.name == name && m.year == year && m.rating == rating;\u000a\u0009}\u000a\u000a}",
      "in_HasCode": ["#41:38", "#41:42"],
      "Class3": "public enum Rating {\u000a\u0009U, PG, TWELVE, FIFTEEN, EIGHTEEN\u000a\u0009\u000a}",
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:38",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public abstract class Movie { //This is an abstract class. We cannot create objects of this type.\u000a\u0009public String name;\u000a\u0009public int year;\u000a\u0009\u000a\u0009public String getInformation(){\u000a\u0009\u0009return name + \"(\" + year + \")\";\u000a\u0009}\u000a\u000a\u0009public Movie(String name, int year) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.year = year;\u000a\u0009}\u000a\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009//When we have Movie = non-Movie type we are guaranteeing it has all methods in Movie but nothing else. \u000a\u0009\u0009//Thanks to Late Binding it will invoke the correct method. \u000a\u0009\u0009Movie d = new DramaMovie(\"Hidden Figures\", 2016, Rating.PG);\u000a\u0009\u0009\u000a\u0009\u0009System.out.println(d.getInformation());\u000a\u0009\u0009System.out.println(d);\u000a\u0009}\u000a}",
      "Class2": "public class DramaMovie extends Movie { //This is a class. We can create objects of this type.\u000a\u0009public Rating rating;\u000a\u000a\u0009public DramaMovie(String name, int year, Rating rating) {\u000a\u0009\u0009super(name, year);\u000a\u0009\u0009this.rating = rating;\u000a\u0009}\u000a\u0009\u000a\u0009\u000a\u0009//Notice that this method also exists in Movie\u000a\u0009//We could commonly use toString for this purpose. It exists in Object.\u000a\u0009@Override\u000a\u0009public String getInformation(){\u000a\u0009\u0009return name + \"(\" + year + \"). Rated \" + rating;\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return getInformation();\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public boolean equals(Object o){\u000a\u0009\u0009System.out.println(\"Using the equals method in DramaMovie.\");\u000a\u0009\u0009if (!(o instanceof DramaMovie)) return false;\u000a\u0009\u0009DramaMovie m = (DramaMovie)o; //Explicit cast. Safe because of the line above. \u000a\u0009\u0009return m.name == name && m.year == year && m.rating == rating;\u000a\u0009}\u000a\u000a}",
      "Class3": "public enum Rating {\u000a\u0009U, PG, TWELVE, FIFTEEN, EIGHTEEN\u000a\u0009\u000a}",
      "in_HasCode": ["#41:39"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:39",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public interface ReadableInterface {\u000a\u0009public void read();\u000a\u0009\u000a\u0009//Default allows us to create a default implementation of a method in an interface\u000a\u0009public default boolean readable(){\u000a\u0009\u0009return true;\u000a\u0009}\u000a\u0009\u000a\u0009public static void main(String[] args){\u000a\u0009\u0009System.out.println(\"So far we have: \" + Book.getNumberOfBooks() + \" books so far\");\u000a\u0009\u0009Novel b = new Novel(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925, 180);\u000a\u0009\u0009\u000a\u0009\u0009//After creating a book\u000a\u0009\u0009System.out.println(\"So far we have: \" + Book.getNumberOfBooks() + \" books so far\");\u000a\u0009\u0009\u000a\u0009\u0009//Let's see what the default information is.\u000a\u0009\u0009System.out.println(b.novelInformation());\u000a\u0009\u0009\u000a\u0009\u0009//Let's read some pages\u000a\u0009\u0009b.read();\u000a\u0009\u0009b.read();\u000a\u0009\u0009b.read();\u000a\u0009\u0009\u000a\u0009\u0009//Has the information updated?\u000a\u0009\u0009System.out.println(b.novelInformation());\u000a\u0009\u0009\u000a\u0009\u0009//Can we update the author? Try deleting the comment start below.\u000a\u0009\u0009//Book.books++;\u000a\u0009\u0009\u000a\u0009\u0009//Try changing the settings to see what happens. \u000a\u0009}\u000a}",
      "Class2": "public class Novel extends Book{ //Notice we do not need the interface here if it is in the superclass. It is implicit. \u000a\u0009int page = 0; //We can assign default values here. No modifier means it can be accessed by anything in the same package. \u000a\u0009private final int pages; //Private means we can only access it within this class.\u000a\u0009\u000a\u0009\u000a\u0009public Novel(String name, String author, int year, int pages) {\u000a\u0009\u0009super(name, author, year);\u000a\u0009\u0009this.pages = pages;\u000a\u0009}\u000a\u000a\u0009@Override\u000a\u0009public void read() {\u000a\u0009\u0009if (page < pages){\u000a\u0009\u0009\u0009page++;\u000a\u0009\u0009}else{\u000a\u0009\u0009\u0009page = 0;\u000a\u0009\u0009}\u000a\u0009}\u000a\u0009\u000a\u0009@Override\u000a\u0009public String toString(){\u000a\u0009\u0009return name + \"(\" + getYear() + \") is \" + pages + \" and written by \" + author;\u000a\u0009}\u000a\u0009\u000a\u0009public String novelInformation(){\u000a\u0009\u0009return toString() + \"\\nYou are on page \" + page;\u000a\u0009}\u000a\u000a}",
      "Class3": "public abstract class Book implements ReadableInterface{ //Abstract means we cannot create this type (ie we cannot do new Book()). \u000a\u0009protected String name;\u000a\u0009protected String author; //Protected means it can only be accessed by this class and its subclasses (and within this package).\u000a\u0009private final int year; //Final means it cannot be changed once it is set. Private methods are not inherited.\u000a\u0009private static int books = 0;\u000a\u000a\u0009// We can have constructors in abstract classes too.\u000a\u0009public Book(String name, String author, int year) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.author = author;\u000a\u0009\u0009this.year = year;\u000a\u0009\u0009books++;\u000a\u0009}\u000a\u0009\u000a\u0009//Protected is inherited. \u000a\u0009protected int getYear(){\u000a\u0009\u0009return year;\u000a\u0009}\u000a\u0009\u000a\u0009public static int getNumberOfBooks(){\u000a\u0009\u0009return books;\u000a\u0009}\u000a}",
      "in_HasCode": ["#41:40"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:40",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "public class Book { \u000a\u0009private String name;\u000a\u0009private String author; \u000a\u0009private final int year;\u000a\u0009\u000a\u0009public Book(String name, String author, int year) {\u000a\u0009\u0009this.name = name;\u000a\u0009\u0009this.author = author;\u000a\u0009\u0009this.year = year;\u000a\u0009}\u000a\u0009\u000a\u0009public String getName() {\u000a\u0009\u0009return name;\u000a\u0009}\u000a\u0009public void setName(String name) {\u000a\u0009\u0009this.name = name;\u000a\u0009}\u000a\u0009public String getAuthor() {\u000a\u0009\u0009return author;\u000a\u0009}\u000a\u0009public void setAuthor(String author) {\u000a\u0009\u0009this.author = author;\u000a\u0009}\u000a\u0009public int getYear() {\u000a\u0009\u0009return year;\u000a\u0009} \u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:41"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:41",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "import java.util.Scanner;\u000a\u000apublic class Main {\u000a\u000a    public static void main(String[] args) {\u000a        //System.in is our input; it is the command line\u000a        Scanner input = new Scanner(System.in);\u000a        System.out.println(\"What is your name?\");\u000a        String name = input.next();\u000a        System.out.println(\"Hello \" + name);\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:43"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:42",
      "@version": 3,
      "@class": "FullExample",
      "Class1": "//Try running this with and without a file.txt in the root directory\u000aimport java.io.FileNotFoundException;\u000aimport java.io.PrintWriter;\u000a\u000apublic class Main {\u000a\u000a    public static void main(String[] args) {\u000a        String fileName = \"file.txt\";\u000a        try {\u000a            PrintWriter writer = new PrintWriter(fileName);\u000a            writer.println(\"Don't forget your towel!\");\u000a        }catch(FileNotFoundException e){\u000a            System.out.println(\"File does not exist!\");\u000a        }\u000a    }\u000a}",
      "Class2": "import java.io.BufferedReader;\u000aimport java.io.FileNotFoundException;\u000aimport java.io.FileReader;\u000aimport java.io.IOException;\u000a\u000apublic class Main {\u000a\u000a    public static void main(String[] args){\u000a        String fileName = \"memes/hot_memes_2k18.txt\";\u000a        try {\u000a            FileReader r = new FileReader(fileName);\u000a            BufferedReader file = new BufferedReader(r); //Notice r and not our filename\u000a            System.out.println(file.readLine()); //Returns the first line (up to '\\n')\u000a        }catch(FileNotFoundException e){\u000a            System.out.println(\"Try creating some data in memes/hot_memes_2k18.txt file and see what happens\");\u000a        }catch(IOException e){\u000a            System.out.println(\"You broke it :(\");\u000a        }\u000a    }\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:44"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:43",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "/**\u000a * This class contains a representation of a Penguin animal\u000a * This is a demonstration of readable code\u000a */\u000apublic class Penguin {\u000a    //The penguin's name cannot be changed because that could be confusing for it\u000a    private final String name;\u000a    private int age;\u000a\u000a    /*\u000a     * Initalise a penguin\u000a     * @param name the penguin's name\u000a     * @param age the current age of the penguin\u000a     */\u000a    public Penguin(String name, int age){\u000a        this.name = name;\u000a        this.age = age;\u000a    }\u000a\u000a    /*\u000a     * Returns whether two penguins will be friends if introduced to each other\u000a     * This is deterministic and penguin ordering is not important\u000a     * @param a the first penguin\u000a     * @param b the second penguin\u000a     *\u000a     * @return true if the penguins will become friends, false otherwise\u000a     */\u000a    public static boolean willBefriend(Penguin a, Penguin b){\u000a        return Math.abs(a.age - b.age) < 3;\u000a    }\u000a}",
      "Class2": "public class Penguin {\u000a    private String n;\u000a    public int A;\u000a\u000a    public Penguin(String q, int R){\u000a        this.n = q;\u000a        this.A = R;\u000a    }\u000a\u000a    public static boolean FRIEndly(Penguin a, Penguin B){\u000a        if (a.A - B.A >= 3){\u000a            return false;\u000a        }else if (B.A - a.A >= 3){\u000a            return false;\u000a        }\u000a        return true;\u000a    }\u000a}",
      "Class3": null,
      "in_HasCode": ["#41:45"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:44",
      "@version": 4,
      "@class": "FullExample",
      "Class1": "/**\u000a * Create the newest Bugatti car\u000a */\u000apublic class BugattiFactory {\u000a\u000a    public static Bugatti createNewCar(String owner, String plate){\u000a        return new Chiron(owner, plate);\u000a    }\u000a}",
      "Class2": "/**\u000a * Represents the newly minted Bugatti Chiron\u000a * https://www.bugatti.com/chiron/\u000a * NB: We are not in any way affiliated or sponsored by Bugatti (yet?)\u000a */\u000apublic class Chiron extends Bugatti {\u000a    private String owner;\u000a    private String plate;\u000a\u000a    public Chiron(String owner, String plate){\u000a        this.owner = owner;\u000a        this.plate = plate;\u000a    }\u000a}",
      "in_HasCode": ["#41:47"],
      "Class3": "public abstract class Bugatti {\u000a    /*\u000a     * If I was more original there would be code here\u000a     * Perhaps such as the other cars or a complex example demonstrating the worth of the factory design pattern\u000a     * Alas I limited myself to three classes per example a long time ago, so you'll just have to pretend\u000a     * this demonstrates the full utility of FDP.\u000a     */\u000a}",
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:45",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "/**\u000a * Example JavaDoc\u000a * @author Pepe Silvia\u000a */\u000apublic class Main {\u000a\u000a    /*\u000a     * Example multiline comment usually used to describe or explain something about how the method works or runs,\u000a     * perhaps to comment on any assumptions made or to describe the reason for its return type\u000a     */\u000a    public static void main(String[] args) {\u000a        double start_pos = 3.0; //comment used to describe why start_pos is 3\u000a        int x = 5; //x = 5 is a bad comment. EXPLAIN why. Any one can see that x = 5. This DOES NOT HELP.\u000a    }\u000a}",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:48"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:46",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "# This is for Python version 2.x\u000a# You can check your version by typing 'python --version' into the command line\u000a# This demonstrates a while loop being used like a for loop\u000a# Whilst this is possible to do it is generally not recommended\u000ax = 0\u000awhile x < 3:\u000a    print \"This value of x is: {}\".format(x)\u000a    x = x + 1\u000a\u000aprint \"\\n\"\u000a\u000a# Try changes these values to see what happens\u000aa = 145\u000ab = 15\u000awhile b:\u000a    a, b = b, a%b\u000aprint \"The GCD of {}\".format(a)\u000aprint \"\\n\"\u000a\u000a# This is an object. You can read more about them if you don't understand how\u000a# or why we would use them.\u000aclass Person:\u000a\u000a    def __init__(self, pets):\u000a        self.pets = pets\u000a        self._count = 0\u000a\u000a    def get_pet(self):\u000a        pet = self.pets[self._count]\u000a        self._count = self._count + 1\u000a        return pet\u000a\u000a    def has_pet(self):\u000a        return len(self.pets) > self._count\u000a\u000a# Try adding or removing names from the list\u000aleo = Person(['Alice', 'Billy', 'Cate'])\u000awhile leo.has_pet():\u000a    print \"Leo has a pet called: {}\".format(leo.get_pet())",
      "Class2": "# This is for Python version 3.x\u000a# You can check your version by typing 'python --version' into the command line\u000a# This demonstrates a while loop being used like a for loop\u000a# Whilst this is possible to do it is generally not recommended\u000ax = 0\u000awhile x < 3:\u000a    print(\"This value of x is: {}\".format(x))\u000a    x = x + 1\u000a\u000aprint(\"\\n\")\u000a\u000a# Try changes these values to see what happens\u000aa = 145\u000ab = 15\u000awhile b:\u000a    a, b = b, a%b\u000aprint(\"The GCD of {}\".format(a))\u000aprint(\"\\n\")\u000a\u000a# This is an object. You can read more about them if you don't understand how\u000a# or why we would use them.\u000aclass Person:\u000a\u000a    def __init__(self, pets):\u000a        self.pets = pets\u000a        self._count = 0\u000a\u000a    def get_pet(self):\u000a        pet = self.pets[self._count]\u000a        self._count = self._count + 1\u000a        return pet\u000a\u000a    def has_pet(self):\u000a        return len(self.pets) > self._count\u000a\u000a# Try adding or removing names from the list\u000aleo = Person(['Alice', 'Billy', 'Cate'])\u000awhile leo.has_pet():\u000a    print(\"Leo has a pet called: {}\".format(leo.get_pet()))",
      "Class3": null,
      "in_HasCode": ["#41:49"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:47",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "# This is for Python version 2.x\u000a# You can check your version by typing 'python --version' into the command line\u000aimport timeit\u000aMAX = 500 #Try turning this up larger to really see the values diverge\u000agen = xrange(MAX) #THis creates a generator\u000alst = range(MAX) #This actually stores in memory all values 0 .. MAX\u000a\u000a# Loop version (Java/C style)\u000adef c_style_loop(lst):\u000a    for i in range(len(lst)):\u000a        lst[i] /= 1\u000a\u000a# Generator Style (Pythonic)\u000adef gen_style(gen):\u000a    for g in gen:\u000a        g /= 1 #Notice we cannot update the actually list here\u000a\u000a# Enumerate Style (Pythonic)\u000adef enumerate_style(lst):\u000a    for g, i in enumerate(lst):\u000a        lst[i] /= 1\u000a\u000a# This will take a few minutes to run and demonstrate why we write Pythonic\u000a# code in Python instead of what we might want to do\u000aprint \"For C-style loop a list of {} took: {}\" \\\u000a            .format(MAX, timeit.timeit(\"c_style_loop(lst)\", \\\u000a                            setup=\"from __main__ import c_style_loop, lst\"))\u000a\u000aprint \"For a generator style loop it took: {}\".format( timeit.timeit(\\\u000a            \"gen_style(gen)\", setup = \"from __main__ import gen_style, gen\"))\u000a\u000aprint \"For an enumerated style loop it took: {}\".format( timeit.timeit(\\\u000a            \"enumerate_style(lst)\", setup = \"from __main__ import enumerate_style, lst\"))",
      "Class2": "# This is for Python version 3.x\u000a# You can check your version by typing 'python --version' into the command line\u000a# This doesn't work as well in Python 3 because xrange became range\u000aimport timeit\u000aMAX = 500 #Try turning this up larger to really see the values diverge\u000agen = [x for x in range(MAX)] #Go read about generators they are amazing\u000a\u000a# Loop version (Java/C style)\u000adef c_style_loop(gen):\u000a    for i in range(len(gen)):\u000a        gen[i] /= 1\u000a\u000a# Generator Style (Pythonic)\u000adef gen_style(gen):\u000a    for g in gen:\u000a        g /= 1 #Notice we cannot actually update the list in here\u000a\u000a# Enumerate Style (Pythonic)\u000adef enumerate_style(gen):\u000a    for i, g in enumerate(gen):\u000a        gen[i] /= 1\u000a\u000a# This will take a few minutes to run and demonstrate why we write Pythonic\u000a# code in Python instead of what we might want to do\u000aprint(\"For C-style loop a list of {} took: {}\" \\\u000a            .format(MAX, timeit.timeit(\"c_style_loop(gen)\", \\\u000a                            setup=\"from __main__ import c_style_loop, gen\")))\u000a\u000aprint(\"For a generator style loop it took: {}\".format( timeit.timeit(\\\u000a            \"gen_style(gen)\", setup = \"from __main__ import gen_style, gen\")))\u000a\u000aprint(\"For a generator style loop it took: {}\".format( timeit.timeit(\\\u000a            \"enumerate_style(gen)\", setup = \"from __main__ import enumerate_style, gen\")))",
      "Class3": null,
      "in_HasCode": ["#41:50"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:48",
      "@version": 3,
      "@class": "FullExample",
      "Class1": "from __future__ import print_function #This code will work on Python 2 and 3.\u000a\u000a\u000a# Try changing these values to see what happens\u000ax = 0\u000ay = 5\u000az = 0\u000aa = \"Hello\"\u000ab = \"World\"\u000ac = \"Hello\"\u000al1 = (x for x in range(100))\u000al2 = (x for x in range(100))\u000a\u000a\u000a# NOTE: The 'is' keyword is nuanced. I would strongly suggest reading more\u000a# about it before using it. There are some examples here.\u000a\u000aif (x > y):\u000a    print(\"{} is greater than {}\".format(x, y))\u000aelse:\u000a    print(\"{} is not greater than {}\".format(x, y))\u000a\u000aif (x == z):\u000a    print(\"{} is numerically equal to {}\".format(x, z))\u000a\u000aif (x != y):\u000a    print(\"{} and {} are not equal\".format(x, y))\u000a\u000aif (x is z):\u000a    print(\"{} is {}\".format(x, z))\u000a\u000ax = z\u000a\u000aif (x is z):\u000a    print(\"{} is {} when assigned together\".format(x, z))\u000a\u000aif (a == c):\u000a    print(\"{} and {} are equal\".format(a, c))\u000a\u000aif (a is c):\u000a    print(\"{} is {}\".format(a, c))\u000a\u000aa = c\u000a\u000aif (a is c):\u000a    print(\"{} is {} after assignment\".format(a, c))\u000a\u000aif (list(l1) < list(l2)):\u000a    print(\"l1 is < l2\")\u000a\u000aif (list(l2) > list(l1)):\u000a    print(\"l2 is < l1\")\u000a\u000aif (l1 == l2):\u000a    print(\"l1 and l2 are equal\")\u000a\u000aif (l1 is l2):\u000a    print(\"l1 is l2\")\u000a\u000al1 = l2\u000a\u000aif (l1 is l2):\u000a    print(\"l1 is l2 after assignment\")",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:51"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:49",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "from __future__ import print_function #This code will work on Python 2 and 3.\u000a\u000a# Try changing these values to see what happens\u000ax = 0\u000alst = []\u000a\u000a# An example of an IF\u000aif x == 0:\u000a    lst.append(\"Hello\");\u000a\u000a# AN example of an IF-Else\u000aif len(lst) == 0:\u000a    print(\"List is empty!\")\u000aelse:\u000a    print(\"List is not empty!\")\u000a\u000a# We can add if statements to generators and list comprehension\u000aeven_numbers = [n for n in range(100) if n % 2 == 0]\u000aprint(\"even_numbers is: {}\".format(even_numbers))",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:52"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:50",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "from __future__ import print_function #This code will work on Python 2 and 3.\u000a\u000a# Try changing these values to see what happens\u000ax = 0\u000alst = []\u000a\u000a# An example of an IF\u000aif x == 0:\u000a    lst.append(\"Hello\");\u000aelif x < 1:\u000a    lst.append(\"World!\")\u000a\u000a#Notice how the if matches and it then ignores the elif.\u000aprint(\"lst is: {}\".format(lst))\u000a\u000a# AN example of an IF-Else\u000aif len(lst) == 0:\u000a    print(\"List is empty!\")\u000aelif len(lst) == 1:\u000a    print(\"List has one item!\")\u000a\u000a# We can add if statements to generators and list comprehension\u000aeven_numbers = [n  if n % 2 == 0 else -1 for n in range(100)]\u000aprint(\"even_numbers is: {}\".format(even_numbers))",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:53"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:51",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "from __future__ import print_function #This code will work on Python 2 and 3.\u000a\u000aevens = set((x for x in range(100) if x % 2 == 0))\u000aothers = set((1, 2, 3, 4, 5, 10, 101, 1487, 7, -5))\u000asmall_evens = set((x for x in range(25) if x % 2 == 0))\u000a\u000a# We can then do cool things such as\u000a# Test if an element is in a set\u000aprint(\"5 in evens? {}\".format(5 in evens))\u000aprint(\"What about others? {}\".format(5 in others))\u000a\u000a# Test for proper subsets\u000aprint(\"small_evens a proper subset of evens? {} \".format(small_evens < evens))\u000a\u000a# Or regular subsets\u000aprint(\"small_evens is a subset of evens? {}\".format(small_evens <= evens))\u000a\u000a# What about unions?\u000aprint(\"small_evens U others: {}\".format(small_evens | others))\u000a\u000a# Or intersections?\u000aprint(\"evens intersect others: \".format(evens & others))\u000a\u000a# And **MANY** more https://docs.python.org/2/library/stdtypes.html#set",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:54"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#40:52",
      "@version": 2,
      "@class": "FullExample",
      "Class1": "from __future__ import print_function #This code will work on Python 2 and 3.\u000a\u000aclasses = {\u000a\u0009'MT2501': 'Linear Algebra',\u000a\u0009'MT2502': 'Analysis',\u000a\u0009'MT2503': 'Multivariate Calculus'\u000a\u0009}\u000a\u000aprint(classes)\u000a\u000aprint(classes['MT2502'])\u000a\u000a# We can also do dictionary comprehension\u000asquared = {x: x**2 for x in range(20)}\u000aprint(squared)\u000aprint(squared[10])",
      "Class2": null,
      "Class3": null,
      "in_HasCode": ["#41:55"],
      "@fieldTypes": "in_HasCode=g"
    },
    {
      "@type": "d",
      "@rid": "#41:0",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:0",
      "out": "#14:19",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:1",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:1",
      "out": "#14:17",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:2",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:2",
      "out": "#14:18",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:3",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:3",
      "out": "#14:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:5",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:5",
      "out": "#13:70",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:6",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:6",
      "out": "#13:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:7",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:7",
      "out": "#13:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:8",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:8",
      "out": "#13:66",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:9",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:9",
      "out": "#13:56",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:10",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:10",
      "out": "#13:58",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:11",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:11",
      "out": "#14:44",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:12",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:12",
      "out": "#14:46",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:13",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:13",
      "out": "#14:47",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:14",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:14",
      "out": "#14:45",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:15",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:15",
      "out": "#13:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:16",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:16",
      "out": "#13:32",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:17",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:17",
      "out": "#13:75",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:18",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:18",
      "out": "#13:76",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:19",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:19",
      "out": "#13:77",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:20",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:20",
      "out": "#13:57",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:21",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:21",
      "out": "#14:11",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:22",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:22",
      "out": "#14:48",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:23",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:23",
      "out": "#13:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:24",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:24",
      "out": "#14:24",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:25",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:25",
      "out": "#14:12",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:26",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:26",
      "out": "#14:50",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:27",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:27",
      "out": "#13:71",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:28",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:28",
      "out": "#13:74",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:29",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:29",
      "out": "#13:111",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:30",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:30",
      "out": "#14:8",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:31",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:31",
      "out": "#14:53",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:32",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:32",
      "out": "#13:15",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:33",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:33",
      "out": "#13:59",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:34",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:3",
      "out": "#14:55",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:35",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:34",
      "out": "#14:54",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:36",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:35",
      "out": "#13:33",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:37",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:36",
      "out": "#13:34",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:38",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:37",
      "out": "#14:16",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:39",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:38",
      "out": "#13:10",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:40",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:39",
      "out": "#13:114",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:41",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:40",
      "out": "#14:4",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:42",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:37",
      "out": "#13:23",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:43",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:41",
      "out": "#13:112",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:44",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:42",
      "out": "#13:65",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:45",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:43",
      "out": "#13:21",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:47",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:44",
      "out": "#13:69",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:48",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:45",
      "out": "#13:60",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:49",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:46",
      "out": "#14:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:50",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:47",
      "out": "#14:29",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:51",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:48",
      "out": "#13:43",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:52",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:49",
      "out": "#14:31",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:53",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:50",
      "out": "#14:27",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:54",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:51",
      "out": "#14:68",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:55",
      "@version": 1,
      "@class": "HasCode",
      "in": "#40:52",
      "out": "#14:67",
      "@fieldTypes": "in=x,out=x"
    },
    {
      "@type": "d",
      "@rid": "#41:56",
      "@version": 1,
      "@class": "HasCode",
      "in": "#26:9",
      "out": "#13:59",
      "@fieldTypes": "in=x,out=x"
    }
  ],
  "brokenRids": [],
  "indexes": [
    {
      "name": "Concept.Label",
      "type": "FULLTEXT",
      "algorithm": "LUCENE",
      "clustersToIndex": [
        "data",
        "resource",
        "concept",
        "construct",
        "discussion",
        "error",
        "example"
      ],
      "definition": {
        "defClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
        "stream": {
          "@type": "d",
          "@version": 0,
          "collate": "default",
          "field": "Label",
          "nullValuesIgnored": false,
          "className": "Concept",
          "keyType": "STRING"
        }
      },
      "metadata": {
        "@type": "d",
        "@version": 0,
        "allowLeadingWildcard": true,
        "Label_index_stopwords": ["/"],
        "analyzer": "org.apache.lucene.analysis.en.EnglishAnalyzer",
        "minWordLength": 2,
        "analyzer_stopwords": ["/"]
      }
    },
    {
      "name": "OFunction.name",
      "type": "UNIQUE_HASH_INDEX",
      "algorithm": "HASH_INDEX",
      "clustersToIndex": ["ofunction"],
      "definition": {
        "defClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
        "stream": {
          "@type": "d",
          "@version": 0,
          "collate": "default",
          "field": "name",
          "nullValuesIgnored": false,
          "className": "OFunction",
          "keyType": "STRING"
        }
      }
    },
    {
      "name": "dictionary",
      "type": "DICTIONARY",
      "algorithm": "SBTREE",
      "definition": {
        "defClass": "com.orientechnologies.orient.core.index.OSimpleKeyIndexDefinition",
        "stream": {
          "@type": "d",
          "@version": 0,
          "collate": "default",
          "nullValuesIgnored": false,
          "keyTypes": ["STRING"]
        }
      },
      "metadata": {
        "@type": "d",
        "@version": 0,
        "trackMode": "FULL",
        "durableInNonTxMode": true
      }
    },
    {
      "name": "Theme.Name",
      "type": "FULLTEXT",
      "algorithm": "LUCENE",
      "clustersToIndex": ["theme"],
      "definition": {
        "defClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
        "stream": {
          "@type": "d",
          "@version": 0,
          "collate": "default",
          "field": "Name",
          "nullValuesIgnored": false,
          "className": "Theme",
          "keyType": "STRING"
        }
      },
      "metadata": {
        "@type": "d",
        "@version": 0,
        "analyzer": "org.apache.lucene.analysis.standard.StandardAnalyzer"
      }
    },
    {
      "name": "ORole.name",
      "type": "UNIQUE",
      "algorithm": "SBTREE",
      "clustersToIndex": ["orole"],
      "definition": {
        "defClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
        "stream": {
          "@type": "d",
          "@version": 0,
          "collate": "ci",
          "field": "name",
          "nullValuesIgnored": false,
          "className": "ORole",
          "keyType": "STRING"
        }
      }
    },
    {
      "name": "OUser.name",
      "type": "UNIQUE",
      "algorithm": "SBTREE",
      "clustersToIndex": ["ouser"],
      "definition": {
        "defClass": "com.orientechnologies.orient.core.index.OPropertyIndexDefinition",
        "stream": {
          "@type": "d",
          "@version": 0,
          "collate": "ci",
          "field": "name",
          "nullValuesIgnored": false,
          "className": "OUser",
          "keyType": "STRING"
        }
      }
    }
  ],
  "manualIndexes": [{ "name": "dictionary", "content": [] }]
}
