<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <graph id="G" edgedefault="directed">
    <node id="#13:10" labels=":Concept"><data key="labels">:Concept</data><data key="Label">OOP Paradigm</data></node>
    <node id="#13:11" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Encapsulation</data></node>
    <node id="#13:12" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Scoping</data></node>
    <node id="#13:14" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Package</data></node>
    <node id="#13:15" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Class</data></node>
    <node id="#13:16" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Operations</data></node>
    <node id="#13:19" labels=":Concept"><data key="labels">:Concept</data><data key="Label">JavaDocs</data></node>
    <node id="#13:21" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Readability</data></node>
    <node id="#13:22" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Compilation and JVM</data></node>
    <node id="#13:23" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Inheritance</data></node>
    <node id="#13:25" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Iteration</data></node>
    <node id="#13:26" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Conditionals</data></node>
    <node id="#13:27" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Flow Control</data></node>
    <node id="#13:28" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Testing</data></node>
    <node id="#13:29" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Logical Operators</data></node>
    <node id="#13:31" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Object Comparison</data></node>
    <node id="#13:32" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Type Coercion</data></node>
    <node id="#13:33" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Late Binding</data></node>
    <node id="#13:34" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Polymorphism</data></node>
    <node id="#13:35" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Libraries</data></node>
    <node id="#13:36" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Arguments</data></node>
    <node id="#13:37" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Commenting</data></node>
    <node id="#13:38" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Conventions</data></node>
    <node id="#13:39" labels=":Concept"><data key="labels">:Concept</data><data key="Label">DRY Principle</data></node>
    <node id="#13:41" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Iteration</data></node>
    <node id="#13:42" labels=":Concept"><data key="labels">:Concept</data><data key="Label">File I/O</data></node>
    <node id="#13:43" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Logical Operators</data></node>
    <node id="#13:44" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Manifest Variables</data></node>
    <node id="#13:45" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Object Oriented Programming</data></node>
    <node id="#13:46" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Python language</data></node>
    <node id="#13:47" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Recursion</data></node>
    <node id="#13:48" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Testing</data></node>
    <node id="#13:50" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Variable Scope</data></node>
    <node id="#13:54" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Data Structures</data></node>
    <node id="#13:55" labels=":Concept"><data key="labels">:Concept</data><data key="Label">I/O</data></node>
    <node id="#13:56" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Primitive Types</data></node>
    <node id="#13:57" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Reference Types</data></node>
    <node id="#13:58" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Java Collections</data></node>
    <node id="#13:59" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Interface</data></node>
    <node id="#13:60" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Commenting</data></node>
    <node id="#13:61" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Database Storage</data></node>
    <node id="#13:62" labels=":Concept"><data key="labels">:Concept</data><data key="Label">JPA</data></node>
    <node id="#13:63" labels=":Concept"><data key="labels">:Concept</data><data key="Label">JDBC</data></node>
    <node id="#13:64" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Hibernate</data></node>
    <node id="#13:65" labels=":Concept"><data key="labels">:Concept</data><data key="Label">File I/O</data></node>
    <node id="#13:66" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Arthimetic Operators</data></node>
    <node id="#13:68" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Coding Conventions</data></node>
    <node id="#13:69" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Factory Design Pattern</data></node>
    <node id="#13:70" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Exceptions</data></node>
    <node id="#13:71" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Generics</data></node>
    <node id="#13:72" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Execution</data></node>
    <node id="#13:73" labels=":Concept"><data key="labels">:Concept</data><data key="Label">MapReduce</data></node>
    <node id="#13:74" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Enumerations</data></node>
    <node id="#13:75" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Accessing Data</data></node>
    <node id="#13:76" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Declaration and Initalisation</data></node>
    <node id="#13:77" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Updating</data></node>
    <node id="#13:78" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Abstraction</data></node>
    <node id="#13:80" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Testing</data></node>
    <node id="#13:81" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Continuous and Regression Testing</data></node>
    <node id="#13:82" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Data Formats</data></node>
    <node id="#13:83" labels=":Concept"><data key="labels">:Concept</data><data key="Label">CSV</data></node>
    <node id="#13:84" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Data Interfaces</data></node>
    <node id="#13:85" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Why plan?</data></node>
    <node id="#13:86" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Entity Relationship Model</data></node>
    <node id="#13:87" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Exhaustive Testing</data></node>
    <node id="#13:88" labels=":Concept"><data key="labels">:Concept</data><data key="Label">JSON</data></node>
    <node id="#13:89" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Method prototype</data></node>
    <node id="#13:90" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Object</data></node>
    <node id="#13:91" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Object Relational Model</data></node>
    <node id="#13:92" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Pseudocode</data></node>
    <node id="#13:93" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Streaming</data></node>
    <node id="#13:94" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Systems Testing</data></node>
    <node id="#13:95" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Test Driven Development</data></node>
    <node id="#13:96" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Top Down Development</data></node>
    <node id="#13:97" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Unified Modelling Language</data></node>
    <node id="#13:98" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Unit Testing</data></node>
    <node id="#13:99" labels=":Concept"><data key="labels">:Concept</data><data key="Label">XML</data></node>
    <node id="#13:100" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Abstract</data></node>
    <node id="#13:101" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Access Control</data></node>
    <node id="#13:102" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Attributes</data></node>
    <node id="#13:103" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Inheritance</data></node>
    <node id="#13:104" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Interface</data></node>
    <node id="#13:105" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Methods</data></node>
    <node id="#13:106" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Modifiers</data></node>
    <node id="#13:107" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Objects</data></node>
    <node id="#13:108" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Relationships</data></node>
    <node id="#13:110" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Conditionals</data></node>
    <node id="#13:111" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Method Overloading</data></node>
    <node id="#13:112" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Console I/O</data></node>
    <node id="#13:113" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Debugging</data></node>
    <node id="#13:114" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Modifiers</data></node>
    <node id="#13:115" labels=":Concept"><data key="labels">:Concept</data><data key="Label">I/O</data></node>
    <node id="#13:116" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Data Formats</data></node>
    <node id="#13:119" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Consumer Demand</data></node>
    <node id="#13:120" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Own Price</data></node>
    <node id="#13:122" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Demand Equation</data></node>
    <node id="#13:123" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Inverse Demand Equation</data></node>
    <node id="#13:124" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Demand Choke Price</data></node>
    <node id="#13:125" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Income and Substitution Effects</data></node>
    <node id="#13:126" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Income Effect</data></node>
    <node id="#13:127" labels=":Concept"><data key="labels">:Concept</data><data key="Label">The Substitution Effect</data></node>
    <node id="#13:128" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Elasticity of Demand</data></node>
    <node id="#13:129" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Inelastic Demand</data></node>
    <node id="#13:130" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Elastic Demand</data></node>
    <node id="#13:131" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Total Expenditure</data></node>
    <node id="#13:133" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Income</data></node>
    <node id="#13:134" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Normal Goods</data></node>
    <node id="#13:135" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Inferior Goods</data></node>
    <node id="#13:136" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Income Elasticity of Demand</data></node>
    <node id="#13:137" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Prices of Other Goods</data></node>
    <node id="#13:138" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Complements</data></node>
    <node id="#13:139" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Substitutes</data></node>
    <node id="#13:140" labels=":Concept"><data key="labels">:Concept</data><data key="Label">The Cross Price Elasticity of Demand</data></node>
    <node id="#13:141" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Producer Supply</data></node>
    <node id="#13:142" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price</data></node>
    <node id="#13:143" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Supply Equation</data></node>
    <node id="#13:144" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Inverse Supply Equation</data></node>
    <node id="#13:145" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Supply Choke Price</data></node>
    <node id="#13:146" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Law of Supply</data></node>
    <node id="#13:147" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Elasticity of Supply</data></node>
    <node id="#13:148" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Input Costs</data></node>
    <node id="#13:149" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Advances in Technology</data></node>
    <node id="#13:150" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Number of Sellers</data></node>
    <node id="#13:151" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Sellers&apos; Outside Options</data></node>
    <node id="#13:152" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Variation in Supply Elasticity</data></node>
    <node id="#13:153" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Unit Elastic Supply</data></node>
    <node id="#13:154" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Elastic Supply</data></node>
    <node id="#13:155" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Elastic Choke Price</data></node>
    <node id="#13:156" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Inelastic Supply</data></node>
    <node id="#13:157" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Inelastic Choke Price</data></node>
    <node id="#13:158" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Short and Long run</data></node>
    <node id="#13:159" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Market Equilibrium</data></node>
    <node id="#13:160" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Solving for the Equilibrium</data></node>
    <node id="#13:162" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Excess Supply</data></node>
    <node id="#13:163" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Excess Demand</data></node>
    <node id="#13:164" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Market Disequilibrium</data></node>
    <node id="#13:165" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Excess Supply</data></node>
    <node id="#13:166" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Excess Demand</data></node>
    <node id="#13:167" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Economic Welfare</data></node>
    <node id="#13:168" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Consumer Surplus</data></node>
    <node id="#13:169" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Producer Surplus</data></node>
    <node id="#13:170" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Total Surplus</data></node>
    <node id="#13:171" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Ceiling</data></node>
    <node id="#13:172" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Floor</data></node>
    <node id="#13:173" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Quota</data></node>
    <node id="#13:174" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Sales Tax</data></node>
    <node id="#13:175" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Tax Incidence/Tax Burden</data></node>
    <node id="#13:176" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Sales Taxes and Elasticities</data></node>
    <node id="#13:177" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Deadweight Loss</data></node>
    <node id="#13:178" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Deadweight Loss and Elasticities</data></node>
    <node id="#13:179" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Indifference Curves</data></node>
    <node id="#13:180" labels=":Concept"><data key="labels">:Concept</data><data key="Label">High substitutability</data></node>
    <node id="#13:181" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Perfect substitutes</data></node>
    <node id="#13:182" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Low substitutability</data></node>
    <node id="#13:183" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Perfect Complements</data></node>
    <node id="#13:184" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Production Function</data></node>
    <node id="#13:185" labels=":Concept"><data key="labels">:Concept</data><data key="Label">The Short Run</data></node>
    <node id="#13:186" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Marginal Product of Labour</data></node>
    <node id="#13:187" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Average Product of Labour</data></node>
    <node id="#13:188" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Marginals and Averages</data></node>
    <node id="#13:189" labels=":Concept"><data key="labels">:Concept</data><data key="Label">The Long Run</data></node>
    <node id="#13:190" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Marginal Product of Capital</data></node>
    <node id="#13:191" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Isoquant</data></node>
    <node id="#13:192" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Marginal Rate of Technical Substitution</data></node>
    <node id="#13:193" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Substitutability in Production</data></node>
    <node id="#13:194" labels=":Concept"><data key="labels">:Concept</data><data key="Label">MRTS and Marginal Products</data></node>
    <node id="#13:195" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Isocost Lines</data></node>
    <node id="#13:196" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Cost Minimization</data></node>
    <node id="#13:197" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Returns to Scale</data></node>
    <node id="#13:198" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Technical Progress</data></node>
    <node id="#13:199" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Marginal Utility</data></node>
    <node id="#13:200" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Budget Constraints</data></node>
    <node id="#13:201" labels=":Concept"><data key="labels">:Concept</data><data key="Label">The Consumers Optimal Choice</data></node>
    <node id="#13:202" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Income and Substitution Effects of a Price Change</data></node>
    <node id="#13:203" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Production Costs</data></node>
    <node id="#13:204" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Fixed Costs</data></node>
    <node id="#13:205" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Avoidable Costs</data></node>
    <node id="#13:206" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Sunk Costs</data></node>
    <node id="#13:207" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Sunk Cost Fallacy</data></node>
    <node id="#13:208" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Variable Costs</data></node>
    <node id="#13:209" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Total Costs</data></node>
    <node id="#13:210" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Average Costs</data></node>
    <node id="#13:211" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Marginal Cost</data></node>
    <node id="#13:212" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Marginals and Averages</data></node>
    <node id="#13:213" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Economies of Scale</data></node>
    <node id="#13:214" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Perfect Competition</data></node>
    <node id="#13:216" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Profit</data></node>
    <node id="#13:217" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Firm Demand</data></node>
    <node id="#13:218" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Profit Maximisation</data></node>
    <node id="#13:219" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Shutdown Price</data></node>
    <node id="#13:220" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Firm&apos;s Short Run Supply</data></node>
    <node id="#13:221" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Industry Short Run  Supply</data></node>
    <node id="#13:222" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Producer Surplus</data></node>
    <node id="#13:223" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Producer Surplus and Profit</data></node>
    <node id="#13:224" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Perfect Competition in the Long Run</data></node>
    <node id="#13:225" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Entry</data></node>
    <node id="#13:226" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Exit</data></node>
    <node id="#13:227" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Economic Welfare</data></node>
    <node id="#13:228" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Monopoly</data></node>
    <node id="#13:229" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Barriers to Entry</data></node>
    <node id="#13:230" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Natural Monopoly</data></node>
    <node id="#13:231" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Switching Costs</data></node>
    <node id="#13:232" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Brand Loyalty</data></node>
    <node id="#13:233" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Absolute Cost Advantages and Control of Key Inputs</data></node>
    <node id="#13:234" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Patents</data></node>
    <node id="#13:235" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Algebra of Monopoly</data></node>
    <node id="#13:236" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Market Power and Welfare</data></node>
    <node id="#13:237" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Market Power and Government Regulation</data></node>
    <node id="#13:238" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Direct Price Regulation</data></node>
    <node id="#13:239" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Antitrust Legislation</data></node>
    <node id="#13:240" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Imperfect Competition</data></node>
    <node id="#13:241" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Oligopoly</data></node>
    <node id="#13:242" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Imperfect Competition</data></node>
    <node id="#13:243" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Collusion</data></node>
    <node id="#13:244" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Cournot Oligopoly</data></node>
    <node id="#13:245" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Other types of oligopoly</data></node>
    <node id="#13:246" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Bertrand competition</data></node>
    <node id="#13:247" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Stackelberg competition</data></node>
    <node id="#13:248" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Monopolistic competition</data></node>
    <node id="#13:249" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Pricing Strategies</data></node>
    <node id="#13:250" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Price Discrimination</data></node>
    <node id="#13:251" labels=":Concept"><data key="labels">:Concept</data><data key="Label">First-degree Price Discrimination</data></node>
    <node id="#13:252" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Third-degree Price Discrimination</data></node>
    <node id="#13:253" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Second-degree Price Discrimination</data></node>
    <node id="#13:254" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Two-part Tarrifs</data></node>
    <node id="#13:255" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Players</data></node>
    <node id="#13:256" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Strategies and Payoffs</data></node>
    <node id="#13:257" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Dominant and Dominated Strategies</data></node>
    <node id="#13:258" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Mixed Strategies</data></node>
    <node id="#13:259" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Zero-sum Games</data></node>
    <node id="#13:260" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Prisoner’s Dilemma</data></node>
    <node id="#13:261" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Multiple Equilibria</data></node>
    <node id="#13:262" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Pure Coordination Game</data></node>
    <node id="#13:263" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Assurance Game</data></node>
    <node id="#13:264" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Chicken</data></node>
    <node id="#13:265" labels=":Concept"><data key="labels">:Concept</data><data key="Label">Battle of the Sexes</data></node>
    <node id="#14:3" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Access Control</data></node>
    <node id="#14:4" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Getters &amp; Setters</data></node>
    <node id="#14:7" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Methods</data></node>
    <node id="#14:8" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Main method</data></node>
    <node id="#14:11" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Arrays</data></node>
    <node id="#14:12" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Strings</data></node>
    <node id="#14:15" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Constructors</data></node>
    <node id="#14:16" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Overriding</data></node>
    <node id="#14:17" labels=":Construct"><data key="labels">:Construct</data><data key="out_"></data><data key="Label">For loop</data></node>
    <node id="#14:18" labels=":Construct"><data key="labels">:Construct</data><data key="Label">While loop</data></node>
    <node id="#14:19" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Do While loop</data></node>
    <node id="#14:20" labels=":Construct"><data key="labels">:Construct</data><data key="Label">If-else statement</data></node>
    <node id="#14:22" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Switch-case statement</data></node>
    <node id="#14:23" labels=":Construct"><data key="labels">:Construct</data><data key="Label">JUnit</data></node>
    <node id="#14:24" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Null</data></node>
    <node id="#14:25" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Arithmetic Operators</data></node>
    <node id="#14:26" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Boolean</data></node>
    <node id="#14:27" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Elif</data></node>
    <node id="#14:28" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Exceptions</data></node>
    <node id="#14:29" labels=":Construct"><data key="labels">:Construct</data><data key="Label">For loop</data></node>
    <node id="#14:30" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Functions</data></node>
    <node id="#14:31" labels=":Construct"><data key="labels">:Construct</data><data key="Label">If statement</data></node>
    <node id="#14:32" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Import</data></node>
    <node id="#14:33" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Lists</data></node>
    <node id="#14:34" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Matplotlib</data></node>
    <node id="#14:35" labels=":Construct"><data key="labels">:Construct</data><data key="Label">None</data></node>
    <node id="#14:36" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Numpy</data></node>
    <node id="#14:38" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Print statement</data></node>
    <node id="#14:39" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Return keyword</data></node>
    <node id="#14:40" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Tuples</data></node>
    <node id="#14:41" labels=":Construct"><data key="labels">:Construct</data><data key="Label">User I/O</data></node>
    <node id="#14:42" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Variables</data></node>
    <node id="#14:43" labels=":Construct"><data key="labels">:Construct</data><data key="Label">While Loop</data></node>
    <node id="#14:44" labels=":Construct"><data key="labels">:Construct</data><data key="Label">ArrayLists</data></node>
    <node id="#14:45" labels=":Construct"><data key="labels">:Construct</data><data key="Label">LinkedLists</data></node>
    <node id="#14:46" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Map</data></node>
    <node id="#14:47" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Set</data></node>
    <node id="#14:48" labels=":Construct"><data key="labels">:Construct</data><data key="Label">n-dimension arrays</data></node>
    <node id="#14:49" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Prepared Statements (Dynamic Queries)</data></node>
    <node id="#14:50" labels=":Construct"><data key="labels">:Construct</data><data key="Label">StringBuilder</data></node>
    <node id="#14:52" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Ternary Operator</data></node>
    <node id="#14:53" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Varags</data></node>
    <node id="#14:54" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Comparable Interface</data></node>
    <node id="#14:55" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Iterable Interface</data></node>
    <node id="#14:56" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Iterators</data></node>
    <node id="#14:57" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Static</data></node>
    <node id="#14:58" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Final</data></node>
    <node id="#14:59" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Abstract</data></node>
    <node id="#14:60" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Default</data></node>
    <node id="#14:61" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Public</data></node>
    <node id="#14:62" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Private</data></node>
    <node id="#14:64" labels=":Construct"><data key="labels">:Construct</data><data key="Label">None</data></node>
    <node id="#14:65" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Protected</data></node>
    <node id="#14:66" labels=":Construct"><data key="labels">:Construct</data><data key="Label">SciPy</data></node>
    <node id="#14:67" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Dictionaries</data></node>
    <node id="#14:68" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Set</data></node>
    <node id="#14:69" labels=":Construct"><data key="labels">:Construct</data><data key="Label">Type Coercion</data></node>
    <node id="#14:70" labels=":Construct"><data key="labels">:Construct</data><data key="Label">JSON</data></node>
    <node id="#15:0" labels=":Error"><data key="labels">:Error</data><data key="Explanation">In this example the variable i stops existing and then we try to use it. This will thrown an error.</data><data key="Label">null</data><data key="Body">for(int i = 0 ; i&lt;10; i++){
 doStuff(i); //still exists
}
System.out.println(i); //error: i is no longer in scope</data></node>
    <node id="#15:1" labels=":Error"><data key="labels">:Error</data><data key="Explanation">We import relative to the current working directory. In this case we would just do: import Person.*;
Which will import all (excluding packages) from Person folder.
The exception to this is the built in Java libraries which use the: java.&lt;library&gt; notation</data><data key="Label">null</data><data key="Body">import home/Documents/myPackage/src/Person</data></node>
    <node id="#15:2" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This will print out &quot;Cat&quot;. What is happening is that s1 and s2 point to the same object, not that s1 and s2 hold copies of the same object. 
We would have to perform a deep copy to make s1 and s2 hold identical objects.</data><data key="Label">null</data><data key="Body">String s1 = &quot;Hello World&quot;;
String s2 =  s1;
s2 = &quot;Cat&quot;;
System.out.println(s1);</data></node>
    <node id="#15:3" labels=":Error"><data key="labels">:Error</data><data key="Explanation">We are only allowed to extend one class at most! (But recall we can chain them).</data><data key="Label">null</data><data key="Body">public class Student extends Person, Human{
 //Class body here
}</data></node>
    <node id="#15:4" labels=":Error"><data key="labels">:Error</data><data key="Explanation">A method declared &apos;final&apos; may not be overridden.</data><data key="Label">null</data><data key="Body">public class Person{
  public final void method(){//method}
}
public class Student extends Person{
  public final void method(){//different stuff}
}</data></node>
    <node id="#15:5" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This snippet has two problems:
1. This will be an infinite loop because i will always be less than 100
2. On line 4 it attempts to access a variable that is not in scope: variable defined in a for loop can only be accessed from within the for loop (but this would never be executed because of the infinite loop).</data><data key="Label">null</data><data key="Body">for (int i = 5; i&lt;100; i--){
	System.out.println(i);
}
System.out.println(i);</data></node>
    <node id="#15:7" labels=":Error"><data key="labels">:Error</data><data key="Explanation">We should not cast a more general type to a more precise type, ie we should not cast a superclass to a subclass. In this example we are trying to cast an Object (which could be ANY object) to a Student which will cause problems.</data><data key="Label">null</data><data key="Body">Student s = new Student();
Object o = (Object)s;
Student newStudent = o;</data></node>
    <node id="#15:8" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This will generate us the following output on our screen:
&quot;Traceback (most recent call last):                                                                                                                       
  File &quot;main.py&quot;, line 2, in &lt;module&gt;                                                                                                                    
    message/3                                                                                                                                            TypeError: unsupported operand type(s) for /: &apos;str&apos; and &apos;int&apos;&quot;

This is because an error is occurring and we are doing nothing about it.</data><data key="Label">null</data><data key="Body">message = &quot;Hello World&quot;
message/3</data></node>
    <node id="#15:9" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This will not do anything. We define our function after we have tried to invoke it which means the interpreter wont know that the function exists and will crash.</data><data key="Label">null</data><data key="Body">print_weather(&quot;Sun!&quot;)

def print_weather(weather):
	print &quot;The weather today is:&quot;,weather #probably rain</data></node>
    <node id="#15:10" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This example will not work. Each side of an AND can be consider &quot;self-contained&quot; so this should be read as: if (x is not 3) and 6 which does not make sense. It should be if x is not 3 and x is not 6.</data><data key="Label">null</data><data key="Body">if x != 3 and 6:
	#code</data></node>
    <node id="#15:11" labels=":Error"><data key="labels">:Error</data><data key="Explanation">In this case y is &quot;out of scope&quot; meaning that at that outer level of indentation the variable has never been declared, y can only be accessed from within that for loop.</data><data key="Label">null</data><data key="Body">x = &quot;Hello&quot;
if x == &quot;Hello&quot;:
	y = 3
print y</data></node>
    <node id="#15:12" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This is completely unnecessary. Whilst 5 is repeated twice the two &quot;meanings&quot; of the values are completely different and the two methods are not related at all. When the method is called multiplyBy5 and you changed FIVE = 6 then suddenly the function makes no sense anymore.</data><data key="Label">null</data><data key="Body">FIVE = 5
def multiplyBy5(x):
	return FIVE*x
def add5(x):
	return x + FIVE</data></node>
    <node id="#15:13" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This recursion will go on forever and will crash Python when the recursive stack becomes too deep. You require a base case.</data><data key="Label">null</data><data key="Body">def f(x):
	return f(x+1)</data></node>
    <node id="#15:14" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This will not work when we try to run this program because local_variable is only in scope when method1 is being executed.
We are able to &apos;pass&apos; local_variable from method1 to method2 if method1 invokes method2, this is covered in arguments.</data><data key="Label">null</data><data key="Body">def method1():
  local_variable = &quot;Hello&quot;
def method2()
  print local_variable

method1()
method2()</data></node>
    <node id="#15:15" labels=":Error"><data key="labels">:Error</data><data key="Explanation">Do not catch &quot;Exception&quot; - be more precise. Also note that whilst Stack Traces are great for programmers they are awful for users.
&lt;a href=&quot;http://i.imgur.com/0amsRAB.jpg&quot; target=&quot;_blank&quot;&gt;Wont someone PLEASE think about the users&lt;/a&gt;.</data><data key="Label">null</data><data key="Body">try {
	methodMayThrowError();
}catch(Exception e){
	e.printStackTrace();
}</data></node>
    <node id="#15:16" labels=":Error"><data key="labels">:Error</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">List&amp;lt;String&amp;gt; myList;
myList.add(new Integer(5)); //Type exception will be thrown here</data></node>
    <node id="#15:17" labels=":Error"><data key="labels">:Error</data><data key="Explanation">Whilst String is a subtype of Object List&lt;String\&gt; IS NOT a subtype of List&lt;Object\&gt;. This means you cannot add a String to an Object List without casting it to an Object. You will then get Objects back.</data><data key="Label">null</data><data key="Body">List&amp;lt;Object&amp;gt;objList = new ArrayList&amp;lt;String&amp;gt;();</data></node>
    <node id="#15:18" labels=":Error"><data key="labels">:Error</data><data key="Explanation">At compile time generic information is removed, which means that the compiler sees:
public void method1(Map, String) and public void method2(Map, String) which means this is not allowed.</data><data key="Label">null</data><data key="Body">public void method1(Map&lt;String, Integer&gt; words, String source){}
public void method2(Map&lt;String, Person&gt; names, String source(){}</data></node>
    <node id="#15:19" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This will not work. At compile time generics are removed thus making the signatures the same.
They must not have the same parameters.</data><data key="Label">null</data><data key="Body">public void displayList(List&amp;lt;String&amp;gt; list){
	//Display list here
}

public void displayList(List&amp;lt;Integer&amp;gt; list){
	//Do stuff
}</data></node>
    <node id="#15:20" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This is a bad comment. It is obvious (probably even to non-programmers) that x is being set to 5. But why is x being set to 5?</data><data key="Label">null</data><data key="Body">int x = 5; //sets x to 5</data></node>
    <node id="#15:21" labels=":Error"><data key="labels">:Error</data><data key="Explanation">&lt;code&gt;int getAge&lt;/code&gt; does not exist in the Object class and cannot be invoked. This might seem strange, but in the successful examples we can guarantee that a method at least exists but with this example we cannot guarantee a method exists and will throw an compile time error because of that.</data><data key="Label">null</data><data key="Body">Person p = new Person(&quot;name&quot;,42);
Object o = p;
System.out.println(o.getAge());</data></node>
    <node id="#15:22" labels=":Error"><data key="labels">:Error</data><data key="Explanation">Two things can go wrong here: Firstly we do not know is Person is null, and when we try to invoke getName() on a null value our program will throw a NullPointerException and secondly we do not know if the name returned will be null or not and if it is null we will then output &quot;Name: null&quot; which doesn&apos;t always make sense.</data><data key="Label">null</data><data key="Body">public static void printName(Person p){
    System.out.println(&quot;Name: &quot; + p.getName());
}</data></node>
    <node id="#15:23" labels=":Error"><data key="labels">:Error</data><data key="Explanation">This is going to print &apos;Buzz&apos; because indentation is not important to the Java compiler. The else statement attaches to the second if statement and is never executed. The first if statement resolves to false (hence why &apos;Fizz&apos; is not output) but the second if statement is not inside the first hence why &apos;Buzz&apos; is output. 
This is why curly braces are important - they make the scope clear.</data><data key="Label">null</data><data key="Body">int x = 10;
        if (x &gt; 12)
            System.out.println(&quot;Fizz&quot;);
            if (x &lt; 5) System.out.println(&quot;Buzz&quot;);
            else System.out.println(&quot;.&quot;);</data></node>
    <node id="#15:24" labels=":Error"><data key="labels">:Error</data><data key="Explanation">The curly braces create a new scope which y is in. You cannot access y from outside the curly braces it was created in.</data><data key="Label">null</data><data key="Body">int x = 3;
if (x &lt; 5){
    int y = 5;
}
System.out.println(y);</data></node>
    <node id="#15:25" labels=":Error"><data key="labels">:Error</data><data key="Explanation">We cannot use ranges. Only exact values.</data><data key="Label">null</data><data key="Body">int x = 3;
switch(x){
    case x &gt; 1 &amp;&amp; x &lt; 3: System.out.println(&quot;Bacon&quot;);
}</data></node>
    <node id="#15:26" labels=":Error"><data key="labels">:Error</data><data key="Explanation">We cannot invoke methods on primitive types.</data><data key="Label">null</data><data key="Body">long number = 0x11010234;
number.double();</data></node>
    <node id="#15:27" labels=":Error"><data key="labels">:Error</data><data key="Explanation">Java does not support the &apos;**&apos; operator (unlike Python).</data><data key="Label">null</data><data key="Body">long expon = 3 ** 2;</data></node>
    <node id="#15:28" labels=":Error"><data key="labels">:Error</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">a) Students sometimes attempt to try and the find the arc elasticity between two prices even when only provided with information about a single price.  This might appear to be a natural approach given the initial definition of a price elasticity using percentage changes. Indeed, it is often taught this way in High School Economics.  However, professional economists ignore arc elasticities and always calculate point elasticities at a single price.
&lt;br&gt;
b) Arithmetical errors often arise in choice of slope.  Be careful to use the right slope in the right place (that is, b or d)
&lt;br&gt;
c) If you are confused over how to find the slope of any linear equation then there is not much hope of correctly calculating an elasticity. Have a look at this simple video tutorial from the Khan Academy: &lt;href&gt;https://youtu.be/IL3UCuXrUzE&lt;/href&gt;</data></node>
    <node id="#15:29" labels=":Error"><data key="labels">:Error</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">It is a frequent error to define a normal good as one which satisfies the law of demand such that when price increases, demand declines.  But normality has nothing to do with price and everything to do with the relationship between income and demand.</data></node>
    <node id="#15:30" labels=":Error"><data key="labels">:Error</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">a) Students sometimes attempt to try and the find the arc elasticity between two prices even when only provided with information about a single price.  This might appear to be a natural approach given the initial definition of a price elasticity using percentage changes. Indeed, it is often taught this way in High School Economics.  However, professional economists ignore arc elasticities and always calculate point elasticities at a single price.
&lt;br&gt;
&lt;br&gt;
b) Arithmetical errors often arise in choice of slope.  Be careful to use the right slope in the right place (that is, b or d)
&lt;br&gt;
&lt;br&gt;
c) If you are confused over how to find the slope of any linear equation then this can lead to errors in correctly calculating an elasticity. Have a look at this simple video tutorial from the Khan Academy:  &lt;a href=&quot;https://youtu.be/IL3UCuXrUzE&quot; target=&quot;_blank&quot;&gt; https://youtu.be/IL3UCuXrUzE&lt;/a&gt;</data></node>
    <node id="#15:31" labels=":Error"><data key="labels">:Error</data><data key="Explanation">Enumerations cannot contain numbers</data><data key="Label">null</data><data key="Body">public enum Rating {
	U, PG, 12A
}</data></node>
    <node id="#15:32" labels=":Error"><data key="labels">:Error</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">Returns to scale and diminishing marginal returns are easily confused.  Remember that in the case of returns to scale, we are changing all inputs simultaneously by the same proportionate amount. But in the case of diminishing marginal returns, one of the inputs is held constant and the other input is increased.</data></node>
    <node id="#15:33" labels=":Error"><data key="labels">:Error</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">Whether goods are normal or inferior depends only on the sign of the income effect.  It would be a serious mistake to say that a good is normal simply because consumption increases following a fall in prices.  It is perfectly possible even in the case of an inferior good for consumption to increase following the fall in price of a good.  This will happen when the substitution effect (increasing consumption) outweighs the income effect (reducing consumption) for an inferior good such that the total price effect results in consumption of the good rising overall.</data></node>
    <node id="#16:0" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://people.cs.aau.dk/~torp/Teaching/E04/OOP/handouts/introduction.pdf</data></node>
    <node id="#16:1" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/java_encapsulation.htm</data></node>
    <node id="#16:2" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html</data></node>
    <node id="#16:3" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.cs.umd.edu/~clin/MoreJava/Objects/local.html</data></node>
    <node id="#16:4" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/concepts/class.html</data></node>
    <node id="#16:5" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html</data></node>
    <node id="#16:6" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/IandI/interfaceDef.html</data></node>
    <node id="#16:7" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html</data></node>
    <node id="#16:8" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/146576/why-is-the-java-main-method-static</data></node>
    <node id="#16:9" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/26522205/why-interface-in-java-8-allowed-to-have-the-main-method</data></node>
    <node id="#16:10" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/index.html</data></node>
    <node id="#16:11" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://javarevisited.blogspot.com/2011/09/variable-argument-in-java5-varargs.html</data></node>
    <node id="#16:12" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html</data></node>
    <node id="#16:13" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html</data></node>
    <node id="#16:15" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/413898/what-does-the-static-keyword-do-in-a-class</data></node>
    <node id="#16:16" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/essential/concurrency/atomic.html</data></node>
    <node id="#16:17" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.oracle.com/technetwork/articles/java/index-137868.html</data></node>
    <node id="#16:18" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://google.github.io/styleguide/javaguide.html#s7-javadoc</data></node>
    <node id="#16:19" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://joostdevblog.blogspot.co.uk/2015/01/what-most-young-programmers-need-to.html</data></node>
    <node id="#16:20" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/index.html</data></node>
    <node id="#16:21" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html</data></node>
    <node id="#16:22" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/260666/can-an-abstract-class-have-a-constructor</data></node>
    <node id="#16:23" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/2816123/can-a-constructor-in-java-be-private</data></node>
    <node id="#16:24" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/concepts/inheritance.html</data></node>
    <node id="#16:25" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://beginnersbook.com/2014/01/exception-handling-in-method-overriding-with-example/</data></node>
    <node id="#16:26" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html</data></node>
    <node id="#16:27" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/java_overriding.htm</data></node>
    <node id="#16:28" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://beginnersbook.com/2014/01/exception-handling-in-method-overriding-with-example/</data></node>
    <node id="#16:29" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html</data></node>
    <node id="#16:30" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.cis.upenn.edu/~matuszek/General/JavaSyntax/enhanced-for-loops.html</data></node>
    <node id="#16:32" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/java_loop_control.htm</data></node>
    <node id="#16:33" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/java_loop_control.htm</data></node>
    <node id="#16:34" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/if_statement_in_java.htm</data></node>
    <node id="#16:35" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/java_decision_making.htm</data></node>
    <node id="#16:36" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html</data></node>
    <node id="#16:37" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://junit.org/junit4/javadoc/latest/</data></node>
    <node id="#16:38" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://users.drew.edu/bburd/JavaForDummies4/ShortCircuitEval.pdf</data></node>
    <node id="#16:39" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html</data></node>
    <node id="#16:40" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://math.hws.edu/javanotes/c7/s5.html</data></node>
    <node id="#16:41" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html</data></node>
    <node id="#16:42" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/java_polymorphism.htm</data></node>
    <node id="#16:43" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.javatpoint.com/static-binding-and-dynamic-binding</data></node>
    <node id="#16:44" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/java_polymorphism.htm</data></node>
    <node id="#16:45" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/python/python_functions.htm</data></node>
    <node id="#16:46" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/2/tutorial/controlflow.html#arbitrary-argument-lists</data></node>
    <node id="#16:47" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://alb.host.cs.st-andrews.ac.uk/cole/</data></node>
    <node id="#16:48" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.python.org/dev/peps/pep-0008/</data></node>
    <node id="#16:49" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://joostdevblog.blogspot.co.uk/2015/01/what-most-young-programmers-need-to.html</data></node>
    <node id="#16:50" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://introtopython.org/introducing_functions.html</data></node>
    <node id="#16:51" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.python-course.eu/exception_handling.php</data></node>
    <node id="#16:52" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/2/tutorial/inputoutput.html</data></node>
    <node id="#16:53" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/2/library/functions.html#open</data></node>
    <node id="#16:54" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://preshing.com/20110920/the-python-with-statement-by-example/</data></node>
    <node id="#16:55" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.youtube.com/watch?v=OSGv2VnC0go</data></node>
    <node id="#16:56" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/2/tutorial/datastructures.html#looping-techniques</data></node>
    <node id="#16:57" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.openbookproject.net/books/bpp4awd/ch04.html</data></node>
    <node id="#16:58" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator</data></node>
    <node id="#16:59" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://en.wikibooks.org/wiki/A_Beginner%27s_Python_Tutorial/Importing_Modules</data></node>
    <node id="#16:60" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/2/tutorial/datastructures.html</data></node>
    <node id="#16:61" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://effbot.org/zone/python-list.htm</data></node>
    <node id="#16:62" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/2.3/whatsnew/section-slices.html</data></node>
    <node id="#16:63" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://matplotlib.org/examples/</data></node>
    <node id="#16:64" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.scipy.org/doc/numpy/reference/index.html</data></node>
    <node id="#16:65" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/python/python_classes_objects.htm</data></node>
    <node id="#16:66" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://learnpythonthehardway.org/book/ex5.html</data></node>
    <node id="#16:67" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.python.org/dev/peps/</data></node>
    <node id="#16:68" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.python.org/doc/essays/blurb/</data></node>
    <node id="#16:69" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.python.org/dev/peps/pep-0020/</data></node>
    <node id="#16:70" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator</data></node>
    <node id="#16:71" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.google.co.uk/search?q=define%3Arecursion&amp;oq=define%3Arecursion</data></node>
    <node id="#16:72" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://docs.python-guide.org/en/latest/writing/tests/
l</data></node>
    <node id="#16:73" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/2.7/library/unittest.htm</data></node>
    <node id="#16:74" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://openbookproject.net/thinkcs/python/english3e/tuples.html</data></node>
    <node id="#16:75" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://en.wikibooks.org/wiki/Python_Programming/Tuples#Packing_and_Unpacking</data></node>
    <node id="#16:76" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://en.wikipedia.org/wiki/John_von_Neumann</data></node>
    <node id="#16:77" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.davekuhlman.org/python_101.html#built-in-data-types</data></node>
    <node id="#16:78" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://en.wikibooks.org/wiki/Python_Programming/Variables_and_Strings</data></node>
    <node id="#16:79" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://openbookproject.net/thinkcs/python/english3e/tuples.html</data></node>
    <node id="#16:80" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://python-textbok.readthedocs.io/en/1.0/Variables_and_Scope.html</data></node>
    <node id="#16:81" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://learnpythonthehardway.org/book/ex33.html</data></node>
    <node id="#16:82" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html</data></node>
    <node id="#16:83" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/collections/</data></node>
    <node id="#16:84" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/Map.html</data></node>
    <node id="#16:85" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/Set.html</data></node>
    <node id="#16:86" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.cs.cmu.edu/~mrmiller/15-110/Handouts/arrays2D.pdf</data></node>
    <node id="#16:88" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/1958636/what-is-double-brace-initialization-in-java</data></node>
    <node id="#16:89" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html</data></node>
    <node id="#16:90" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://0.30000000000000004.com/</data></node>
    <node id="#16:92" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.java2s.com/Tutorial/Java/0020__Language/VariableScope.htm</data></node>
    <node id="#16:93" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/jpa/jpa_quick_guide.htm</data></node>
    <node id="#16:94" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/jdbc/basics/</data></node>
    <node id="#16:95" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html</data></node>
    <node id="#16:96" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/jdbc/jdbc-driver-types.htm</data></node>
    <node id="#16:97" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://hibernate.org/</data></node>
    <node id="#16:98" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html</data></node>
    <node id="#16:99" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://en.wikipedia.org/wiki/SQL_injection#Examples</data></node>
    <node id="#16:100" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html</data></node>
    <node id="#16:101" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/io/FileReader.html</data></node>
    <node id="#16:102" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html</data></node>
    <node id="#16:103" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/essential/io/</data></node>
    <node id="#16:105" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html</data></node>
    <node id="#16:106" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/java/lang/java_lang_stringbuilder.htm</data></node>
    <node id="#16:107" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/design_pattern/factory_pattern.htm</data></node>
    <node id="#16:108" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://blogs.oracle.com/CoreJavaTechTips/entry/using_enhanced_for_loops_with</data></node>
    <node id="#16:109" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work</data></node>
    <node id="#16:110" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/1754315/how-to-create-custom-exceptions-in-java</data></node>
    <node id="#16:111" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html</data></node>
    <node id="#16:112" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html</data></node>
    <node id="#16:113" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html#varargs</data></node>
    <node id="#16:114" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/766559/when-do-you-use-varargs-in-java</data></node>
    <node id="#16:115" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html</data></node>
    <node id="#16:116" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html</data></node>
    <node id="#16:117" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html</data></node>
    <node id="#16:118" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://blogs.oracle.com/CoreJavaTechTips/entry/using_enhanced_for_loops_with</data></node>
    <node id="#16:119" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/generics/</data></node>
    <node id="#16:120" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/generics/why.html</data></node>
    <node id="#16:121" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.cs.colostate.edu/~cs161/Summer16/slides/14_iterators.pdf</data></node>
    <node id="#16:122" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html</data></node>
    <node id="#16:123" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://en.wikipedia.org/wiki/MapReduce</data></node>
    <node id="#16:124" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://research.google.com/archive/mapreduce.html</data></node>
    <node id="#16:125" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www-01.ibm.com/software/data/infosphere/hadoop/mapreduce/</data></node>
    <node id="#16:126" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/enum.html</data></node>
    <node id="#16:127" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html</data></node>
    <node id="#16:128" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/21220155/what-does-abstraction-mean-in-programming</data></node>
    <node id="#16:129" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.ima.umn.edu/~arnold/disasters/ariane.html</data></node>
    <node id="#16:130" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.json.org/</data></node>
    <node id="#16:131" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://agiledata.org/essays/tdd.html</data></node>
    <node id="#16:132" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://xkcd.com/927/</data></node>
    <node id="#16:133" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://softwaretestingfundamentals.com/unit-testing/</data></node>
    <node id="#16:135" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/</data></node>
    <node id="#16:137" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://pages.cs.wisc.edu/~hasti/cs302/examples/UMLdiagram.html</data></node>
    <node id="#16:138" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.tutorialspoint.com/uml/uml_class_diagram.htm</data></node>
    <node id="#16:139" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://info.cs.st-andrews.ac.uk/student-handbook/learning-teaching/programming-style.html</data></node>
    <node id="#16:140" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html</data></node>
    <node id="#16:141" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://steve.hollasch.net/cgindex/coding/ieeefloat.html</data></node>
    <node id="#16:142" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/tutorial/essential/io/cl.html</data></node>
    <node id="#16:143" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.vogella.com/tutorials/JUnit/article.html#testorganization</data></node>
    <node id="#16:144" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.scipy.org/</data></node>
    <node id="#16:145" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://docs.scipy.org/doc/scipy/reference/</data></node>
    <node id="#16:146" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://stackoverflow.com/questions/1504717/why-does-comparing-strings-in-python-using-either-or-is-sometimes-produce</data></node>
    <node id="#16:147" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://stackoverflow.com/questions/2988017/string-comparison-in-python-is-vs</data></node>
    <node id="#16:148" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none</data></node>
    <node id="#16:149" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.secnetix.de/olli/Python/list_comprehensions.hawk</data></node>
    <node id="#16:150" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.pythonforbeginners.com/dictionary/how-to-use-dictionaries-in-python</data></node>
    <node id="#16:151" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset</data></node>
    <node id="#16:152" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#parseInt-java.lang.String-</data></node>
    <node id="#16:153" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html</data></node>
    <node id="#16:154" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html</data></node>
    <node id="#16:155" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#deepEquals-java.lang.Object-java.lang.Object-</data></node>
    <node id="#16:156" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#equals-java.lang.Object-java.lang.Object-</data></node>
    <node id="#16:157" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-</data></node>
    <node id="#16:158" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/lang/String.html</data></node>
    <node id="#16:159" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html</data></node>
    <node id="#16:160" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html</data></node>
    <node id="#16:161" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/Map.html</data></node>
    <node id="#16:162" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html</data></node>
    <node id="#16:163" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html</data></node>
    <node id="#16:164" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://hadoop.apache.org/docs/r1.2.1/mapred_tutorial.html</data></node>
    <node id="#16:165" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://junit.org/junit5/docs/current/user-guide/#writing-tests</data></node>
    <node id="#16:166" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.tutorialspoint.com/jpa/jpa_jpql.htm</data></node>
    <node id="#16:167" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://docs.oracle.com/html/E13946_04/ejb3_langref.html</data></node>
    <node id="#16:168" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html</data></node>
    <node id="#16:169" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://www.oracle.com/technetwork/articles/java/json-1973242.html</data></node>
    <node id="#16:170" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javame/8.0/api/json/api/com/oracle/json/JsonObject.html</data></node>
    <node id="#16:171" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javame/8.0/api/json/api/com/oracle/json/Json.html</data></node>
    <node id="#16:172" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">http://theoryapp.com/parse-json-in-java/</data></node>
    <node id="#16:173" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html</data></node>
    <node id="#16:174" labels=":Resource"><data key="labels">:Resource</data><data key="Label"></data><data key="Body">https://stackoverflow.com/questions/6863182/what-is-the-difference-between-iterator-and-iterable-and-how-to-use-them</data></node>
    <node id="#16:175" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/2504959/why-can-java-collections-not-directly-store-primitives-types</data></node>
    <node id="#16:176" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/21974361/what-java-collection-should-i-use</data></node>
    <node id="#16:177" labels=":Resource"><data key="labels">:Resource</data><data key="Label">Demand Equation</data><data key="Body">If you unsure how to find the slope of any linear equation then have a look at this simple video tutorial from the Khan Academy: https://youtu.be/IL3UCuXrUzE</data></node>
    <node id="#16:178" labels=":Resource"><data key="labels">:Resource</data><data key="Label">Demand Equation</data><data key="Body">https://youtu.be/IL3UCuXrUzE</data></node>
    <node id="#16:179" labels=":Resource"><data key="labels">:Resource</data><data key="Label">Inverse Demand Equation</data><data key="Body">https://youtu.be/IL3UCuXrUzE</data></node>
    <node id="#16:180" labels=":Resource"><data key="labels">:Resource</data><data key="Label">Supply equation</data><data key="Body">https://youtu.be/IL3UCuXrUzE</data></node>
    <node id="#16:181" labels=":Resource"><data key="labels">:Resource</data><data key="Label">inverse supply</data><data key="Body">https://youtu.be/IL3UCuXrUzE</data></node>
    <node id="#16:182" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://msdn.microsoft.com/en-us/library/ee798441(v=cs.20).aspx</data></node>
    <node id="#16:183" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/3611760/scoping-in-python-for-loops</data></node>
    <node id="#16:184" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types</data></node>
    <node id="#16:185" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://stackoverflow.com/questions/22885931/when-if-ever-to-use-the-is-keyword-in-python</data></node>
    <node id="#16:186" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://docs.python.org/3/library/collections.html#collections.namedtuple</data></node>
    <node id="#16:187" labels=":Resource"><data key="labels">:Resource</data><data key="Label">null</data><data key="Body">https://www.quora.com/Why-do-cartels-fail</data></node>
    <node id="#17:0" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This holds all the data and methods for that class, implemented by the &apos;class&apos; keyword.</data><data key="Label">null</data><data key="Body">public abstract class Person{ ... }</data></node>
    <node id="#17:1" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This shows relevant members and methods together within the same class.</data><data key="Label">null</data><data key="Body">public class Module {

    private String name;
    private double grade;

    /*
     * This is the maximum grade for a student at St Andrews
     * It can only be accessed internally, cannot be changed and only has 1 copy of it for all the Student objects.
     */
    private static final double MAX_RESULTS = 20.0;

    /*
     * All of the below methods can (and were) created by the IDE.
     */
    public String getName() {
        return name;
    }
... //other methods omitted for brevity.
}</data></node>
    <node id="#17:2" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">private String name;
protected String name;
private static final double MAX_RESULTS = 20.0;</data></node>
    <node id="#17:3" labels=":Example"><data key="labels">:Example</data><data key="Explanation">The private members now can only be accessed from within the class or through these methods that we provided.</data><data key="Label">null</data><data key="Body">private String name;
    private double grade;

    /*
     * All of the below methods can (and were) created by the IDE.
     */
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getGrade() {
        return grade;
    }

    public void setGrade(double grade) {
        this.grade = grade;
    }</data></node>
    <node id="#17:4" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">Object obj;

public method(){
  Object newObj = new Object();
  obj = newObj;
  ...//other stuff
}</data></node>
    <node id="#17:5" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This gives us a class which will create objects of type Cat which has a (private) name and a method to access that name. You may wish to refer to access modifiers.</data><data key="Label">null</data><data key="Body">public class Cat {
    private String name;
    public String getName() {
        return name;
    }
}</data></node>
    <node id="#17:6" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This class has additional requirements imposed on it. Firstly it is a subclass of Person so inherits from it, and it also agrees to implement an Interface making it examinable.</data><data key="Label">null</data><data key="Body">public class Student extends Person implements ExaminableInterface{
    //methods and data
}</data></node>
    <node id="#17:7" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">//This is an abstract class, thus we cannot have an object of type Person
public abstract class Person {
    //methods and data
}</data></node>
    <node id="#17:8" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Any class that &apos;extends&apos; this interface must implement the method&apos;s with the same signature as declared in the interface. In this case that class must contain a method called getModules which takes no parameters and returns an array of Modules.</data><data key="Label">null</data><data key="Body">public interface ExaminableInterface {
    /*
     * Whilst we are allowed to put constants here, we typically choose not to.
     * Interfaces should deal with the service an Object will provide and not
     * the data it contains.
     */

    /*
     * In interface it is unnecessary to have the methods with (non-static) modifiers,
     * this is because they are implicitly &apos;public abstract&apos;
     */
    /**
     * Will find all the module codes for the exams that an Object
     * has been scheduled to sit.
     * @return An array containing the module codes of the exams to be sat
     */
    Module[] getModules();

    /* This provides a default implementation which will be used if it is not overwritten */
    default int totalCredits(){
        return 240;
    }

    static String examInformation(){
        return &quot;https://www.st-andrews.ac.uk/students/academic/examinations/frequentlyaskedquestions-exams/&quot;;
    }

}</data></node>
    <node id="#17:9" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">public class Student extends Person implements ExaminableInterface{
    //methods
}</data></node>
    <node id="#17:10" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">package people;

import exception.NoArgumentsException;
import interfaces.ExaminableInterface;

import java.security.InvalidParameterException;</data></node>
    <node id="#17:11" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will import everything from java.util (a library built in to Java).</data><data key="Label">null</data><data key="Body">import java.util.*</data></node>
    <node id="#17:12" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">protected int matricNumber;</data></node>
    <node id="#17:13" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">for (int i =0; i&lt;100; i++){
    //Code
}</data></node>
    <node id="#17:14" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This creates an array of Modules called &apos;modules&apos;. Each index in the array will hold a reference to an object of type module.</data><data key="Label">null</data><data key="Body">private Module[] modules;</data></node>
    <node id="#17:15" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">String message = &quot;Hello World!&quot;;</data></node>
    <node id="#17:18" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">/**
 * The representation for a person.
 * @author Programmer
 * @date 18/3/2005
 */

 /**
  * Will find all the module codes for the exams that an Object has been scheduled to sit.
  * @return An array containing the module codes of the exams to be sat
  */
public module[] findExams(){}

/**
  * Finds the square root of the sum of two integers
  *
  * @param a the first integer
  * @param b the second integer
  *
  * @return the square root of the two integers summed together
  */
public double sumAndSquareRoot(int a, int b){
    return Math.sqrt(a+b);
}</data></node>
    <node id="#17:19" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">final int MAX_SIZE = 64; //Used for our arrays.</data></node>
    <node id="#17:20" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">public class Person{
    protected int age;
    
    public Person(int age){
        this.age = age;
    }

    public int getAge(){
        return age;
    }

    public String getAgeMessage(){
        return &quot;This person is &quot; + age + &quot; years old!&quot;;
    }
}

public class Student extends Person{
    protected yearOfStudy = 0;
    
    public Student(int age){
        super(age);
    }

    public Student(int age, int yearOfStudy){
        this(age);
        this.yearOfStudy = yearOfStudy;
    }

    public int getYearOfStudy(){
        return yearOfStudy;
    }

    @Override
    public String getAgeMessage(){
        return super() + &quot; and is in year&quot; + yearOfStudy +&quot; of their studies!&quot;;
    }

}

//Elsewhere
Student clint = new Student(17, 1);
//Will output: This person is 17 years old and is in year 1 of their studies!
System.out.println(clint.getAgeMessage);
//Will print 17
Systemout.println(clint.getAge);</data></node>
    <node id="#17:21" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This is from our Student class. When we do something like:

System.out.println(studentObjThatIsNotNull);

It will output for us:

The Student&apos;s name is (whatever the Student&apos;s name actually is)

Normally we would just get a seemingly random String (technically it is the Object reference). This is far more useful for us.
The &apos;@Override&apos; is an annotation, it provides the compiler with additional information but it is not required for the program to compile and run.</data><data key="Label">null</data><data key="Body">@Override
public String toString() {
    return &quot;The Student&apos;s name is: &quot; + getName();
}</data></node>
    <node id="#17:22" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This illustrates the basic use of the for loop. It will output:
Value: 0
Value: 1
Value: 2
Value: 3
Value: 4
Value: 5
Value: 6
Value: 7
Value: 8
Value: 9
The variable i is incremented by 1 after each time through the loop until the value of i is not below 10 when it exits the loop.</data><data key="Label">null</data><data key="Body">for (int i =0; i&lt;10; i++){
    System.out.println(&quot;Value: &quot;+i):
}</data></node>
    <node id="#17:23" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will output whatever numbers are at: 100,102,104,106,108,110 in the array numbers incremented by the current value of j. If the value of numbers[102] is 257 then this would output 257 + 1 = 258. i has the value of 100 at the beginning and j has the value 0. After one loop j is incremented by 1 to give it the value 1 and i is incremented by 2 to give it the value 102.</data><data key="Label">null</data><data key="Body">int MAX_SIZE = 110;
int[] numbers = getNumbers(MAX_SIZE);
int i = 100;
for (int j = 0; i&lt;=MAX_SIZE; i+=2, j++){
	System.out.println(numbers[i]+j);
}</data></node>
    <node id="#17:25" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">//This uses a normal for loop because we require to manipulate indexes.
for (int i =0; i&lt; names.length; i++){
//Sets the ith position of one array the name member of the object in the ith position of the other.
       names[i] = modules[i].getName();
}</data></node>
    <node id="#17:26" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">int x = 5;
if (x &lt; 5){
  //do something
}else {
  //do something else
}</data></node>
    <node id="#17:27" labels=":Example"><data key="labels">:Example</data><data key="Explanation">pwd.contain(&quot;Hello&quot;) will return true, but the not (&apos;!&apos;) will negate it and this will overall resolve to fals</data><data key="Label">null</data><data key="Body">String pwd = &quot;Hello World&quot;;
if (!(pwd.contains(&quot;Hello&quot;))){
  //do something
}</data></node>
    <node id="#17:28" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Brackets are not necessary for single line if-statements but these can cause dangling-if errors if used wrongly.</data><data key="Label">null</data><data key="Body">if (name == null) throw new InvalidParameterException();</data></node>
    <node id="#17:29" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">int x = 5;
if (x &lt; 5){
     //do something 
}else if (x == 5){
     //do something else
}</data></node>
    <node id="#17:30" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Please note that this is an example and not official university requirements. If you are unsure as to the credits you must achieve please ask your adviser or check the university&apos;s website (specifically undergraduate senate regulations).</data><data key="Label">null</data><data key="Body">String message = &quot;The student requires: &quot;;
switch (year) {
    case 1:
        System.out.println(message + &quot;at least a 7.0 in all modules across 120 credits&quot;);
        break; //this stops the follow through, and is required in switch statements
    case 2:
        //notice we split a long line into two lines for readability on small screens
        System.out.println(message + &quot;at least a 11.0 in on all Honours related courses and a 7.0&quot; +
                &quot; in all modules across 120 credits&quot;);
        break;
    //We reverse course here since we want all 3,4 and 5th year to get the same message
    case 5: //the lack of break means it will fall through
    case 4:
    case 3:
        System.out.println(&quot;Student is on an Honours course and should consult their course handbook&quot;);
        break;
    //it is good practice to have a default statement incase of an invalid input
    default:
        System.out.println(year+&quot; is not a valid year at St Andrews&quot;);
        break;
}</data></node>
    <node id="#17:31" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This program begins with the main method (as all Java programs will do).
It then outputs: 1,2,1,2,1,2,1,2,1,2 because it invoked method1 and the method2.
This is effectively doing:
  i = 0
    then 0 % 2 = 0 == 0 then
      method 1
  i = 1
    then 1 % 2 = 1 != 0 then
      method 2
Which is repeated until
  i = 10
    10 not &lt; 10 so end

It then outputs: 3 but NOT 4. 3 is not less than 3 thus it will never enter the if statement, but 3 will be printed because method3() is invoked in the if declaration.
Overall we get 1,2,1,2,1,2,1,2,1,2,3.</data><data key="Label">null</data><data key="Body">public static final int VALUE = 3;

public static void method1(){
  System.out.println(&quot;1&quot;);
}

public static void method2(){
  System.out.println(&quot;2&quot;);
}

public static int method3(){
  System.out.println(&quot;3&quot;);
  return 3;
}

public static final main(String[] args){
  for (int i =0; i&lt;10; i++){
  //if even
    if (i % 2 == 0){
      method1();
    }else {
      method2();
    }
  }
  if (method3() &lt; VALUE){
    System.out.println(&quot;4&quot;);
  }
}</data></node>
    <node id="#17:32" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Note: Having an Array that is null means that we do not have an array at all, this is different from having an array with only null values in it (demonstrated on the next line). There we have an array of Persons who all are null.</data><data key="Label">null</data><data key="Body">String[] array = null;
Person[] array2 = {null, null, null};
Object obj = null;
String = null; //Different from String = &quot;&quot;;</data></node>
    <node id="#17:33" labels=":Example"><data key="labels">:Example</data><data key="Explanation">In this example the double will be truncated to make c = 7.
This is called an unsafe cast because when we do this we lose data.
&lt;p&gt;
The latter part is an example of an implicit cast, where-as the first part is an  explicit cast.</data><data key="Label">null</data><data key="Body">int a = 5;
double b = 7.3;
int c = (int)b;
//
Person p = new Person();
Animal a = p;</data></node>
    <node id="#17:34" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This is called a staggered array, because of each index of the &apos;grid&apos; array is an array itself then each index in that array can hold a pointer to an array of different sizes</data><data key="Label">null</data><data key="Body">int[][] grid = new int[3][]; //creates a 2-d array of grids which is 3 long
grid[0] = new int[3];
grid[1] = new int[4];
grid[2] = new int[2];</data></node>
    <node id="#17:35" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This example would invoke the &lt;code&gt;String toString()&lt;/code&gt; method in Person class, despite being of type Object and not of type Person. The compiler &apos;remembers&apos; the type that the reference.
This would output &quot;This person&apos;s name is: name&quot;, and not what Object.toString() would print out.
Despite this there is no way to get the original type back and we can only invoke methods that exist in the type of the variable (in this case Object), this means we are not allowed to invoke &lt;code&gt;o.getAge()&lt;/code&gt;.</data><data key="Label">null</data><data key="Body">Person p = new Person(&quot;name&quot;,42);
Object o = p;
System.out.println(o);</data></node>
    <node id="#17:36" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will still invoke the &lt;code&gt;int getAge()&lt;/code&gt; method in Student and not the one in Person despite o being a Person object.</data><data key="Label">null</data><data key="Body">Student s = new Student(&quot;name&quot;, 42);
Person o = s;
System.out.println(o.getAge());</data></node>
    <node id="#17:37" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will return a Person object, and since all reference types are implicitly subclasses of object then Person objects can be stored in an Object variable. We can only treat this variable as if it was an Object which means we can only invoke methods that exist in Object because we can guarantee that those exist.</data><data key="Label">null</data><data key="Body">Object o = getNewPerson();</data></node>
    <node id="#17:38" labels=":Example"><data key="labels">:Example</data><data key="Explanation">In this example s, p and o all refer to the same Student object.
Recall from Type Coercion that it is only safe to invoke methods that exist in the type it is declared as, ie only invoke Person methods on p despite us knowing it is a Student.</data><data key="Label">null</data><data key="Body">Student s = new Student();
Person p = s;
Object o = p;</data></node>
    <node id="#17:39" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We are allowed, and is advised to, show what parameter is what when we are invoking a function.</data><data key="Label">null</data><data key="Body">def f(x,y):
	return x+y
numbers=[1,2]
print f(x=numbers[0],y=numbers[1])</data></node>
    <node id="#17:40" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Note that appending a list in an function will update our original list.</data><data key="Label">null</data><data key="Body">def add_to_list(list=None,name):
	if list is None:
		list = []
	list.append(name)
add_to_list(name=&apos;J. Cole&apos;)</data></node>
    <node id="#17:41" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Notice that the variables being passed in can be called anything you like, but within the function they are called the name given to them in the function signature.</data><data key="Label">null</data><data key="Body">def f(x,y):
	return x+y
a = 3
b = 72
print f(a,b)</data></node>
    <node id="#17:42" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This is a bad comment. Any programmer can obviously see that x is being set to 0, but what is x and why is it 0?
The latter is significantly better.</data><data key="Label">null</data><data key="Body">x = 0 #set x to 0
y = 0 #Sets the y coordinate to a default value of 0 to ensure a consistent starting location</data></node>
    <node id="#17:43" labels=":Example"><data key="labels">:Example</data><data key="Explanation">It is good practice to explain what your method does, its inputs and its return value in the line below its declaration.</data><data key="Label">null</data><data key="Body">def f(x,y):
	&quot;&quot;&quot;Takes two values (x,y) and returns them added them together&quot;&quot;&quot;
	return x+y</data></node>
    <node id="#17:44" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Whilst for this small example it takes more lines of code to do the more &quot;correct&quot; version if we had 1000 names we would save a very significant amount of time and prevent many bugs by doing it. Additionally if we wanted to change it so that it just output a number and name with no other text we only need change 1 line of code as opposed to 3.</data><data key="Label">null</data><data key="Body">names = [&apos;Bill&apos;,&apos;Alan&apos;,&apos;Grace&apos;]

#One option
print &quot;Person 1 is called:&quot;,names[0]
print &quot;Person 2 is called:&quot;,names[1]
print &quot;Person 3 is called:&quot;,names[2]

#A better option
def print_name(number, name):
	print &quot;Person %d is called: %s&quot; ,%(number,name)

for number, name in enumerate(names):
	print_name(number,name)</data></node>
    <node id="#17:45" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">if pokemon is Pikachu:
	print &quot;Gotta catch &apos;em all!&quot;
elif pokemon is Slowpoke:
	print &quot;Have you heard about this cool game Pokemon Go?&quot;</data></node>
    <node id="#17:47" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will now not crash, and will output &quot;Hello World&quot; to screen. This is because we tell Python to ignore the error, which is typically a bad idea.</data><data key="Label">null</data><data key="Body">try:
    message = &quot;Hello World&quot;
    message/3
except TypeError as e:
    pass
print message</data></node>
    <node id="#17:48" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">f1 = open(&apos;file.txt&apos;,r) #This will READ a file
f2 = open(&apos;file2.txt&apos;,w) #This will WRITE to a file

print f1.read() #Will output all of file1.txt to screen
f2.write(&quot;Hello World!&quot;) #Writes Hello World to file2.txt

#It is good practice to close files when you are done with them
f1.close()
f2.close()</data></node>
    <node id="#17:49" labels=":Example"><data key="labels">:Example</data><data key="Explanation">There is no need to close a file when we are using a context manager. This is generally only for more advanced users as novice users may  run into some unexpected scoping issues.</data><data key="Label">null</data><data key="Body">with open(&apos;file1.txt&quot;,r) as f:
	print f.read()</data></node>
    <node id="#17:51" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will print all the numbers between 0 and 10 taking a step of 2 each time. Our output to screen should be &quot;0, 2, 4, 6, 8&quot; note that it includes 0 excludes 10. This can be read as &apos;for i in {0, 1, 2, ... 10} st i % 2 = 0 and i &lt; 10 then print i&apos; for the mathematically minded.</data><data key="Label">null</data><data key="Body">for i in range(0, 10, 2):
	print i</data></node>
    <node id="#17:52" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will output 1,2,3 on separate lines. This should be read as &quot;for each element in our list execute the indented code&quot;</data><data key="Label">null</data><data key="Body">list = [1,2,3]

for e in list:
	print e
#Note that this unintended code it outside the for loop
print list #this only happens once</data></node>
    <node id="#17:53" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will output 0 red, 1 blue, 2 green. This is technically returning a tuple with the index and the element at that index.</data><data key="Label">null</data><data key="Body">colours = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;]

for i,c in enumerate(colours):
	print i,c</data></node>
    <node id="#17:54" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">def f(x):
	&quot;&quot;&quot;Returns the result of f(x) = x^2 + 3&quot;&quot;&quot;
	return x**2 + 3</data></node>
    <node id="#17:55" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will output to screen &quot;The weather today is: Sun!&quot; as (un?)expected.</data><data key="Label">null</data><data key="Body">def print_weather(weather):
	print &quot;The weather today is:&quot;,weather #probably rain

print_weather(&quot;Sun!&quot;)</data></node>
    <node id="#17:56" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">if x !=6:
	#code

if x == 6 and y != 3:
	#code
else: #if x is not 6 or y is 3
	#other code</data></node>
    <node id="#17:57" labels=":Example"><data key="labels">:Example</data><data key="Explanation">You can now use all the method in numpy.
The second one would import everything from numpy also (the * is a wildcard) but we can choose to only import specific methods.</data><data key="Label">null</data><data key="Body">import numpy
from numpy import *</data></node>
    <node id="#17:58" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We can invoke methods from numpy using the &apos;np&apos; as an &apos;object&apos; and using the dot operator on it.
This is very good practice as it makes it explicit where the methods come from.</data><data key="Label">null</data><data key="Body">import numpy as np
input_array = np.array([1,2,3])</data></node>
    <node id="#17:59" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This is called list slicing. We are asking for it to return the element at index 1 and 2, and not the full list.</data><data key="Label">null</data><data key="Body">list_of_numbers = [1,2,3]
list_of_numbers.append(4) #adds 4 to the end
print list_of_numbers[1:2] #Will output 2,3</data></node>
    <node id="#17:60" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">if x != 5 and (y != 3 or y == x):
	#code</data></node>
    <node id="#17:61" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">def f(names):
	if names is None:
		names = []
	#code</data></node>
    <node id="#17:62" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">a = 3
while a:
	#will loop while a is non zero
	a -= 1</data></node>
    <node id="#17:63" labels=":Example"><data key="labels">:Example</data><data key="Explanation">*Generally* do not do this. Often it is bad practice to have infinite loops, they are usually not needed. Reconsider why you need this, perhaps your program can be designed or structured differently.</data><data key="Label">null</data><data key="Body">while True:
	#will loop forever</data></node>
    <node id="#17:64" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Notice that we repeat 1.8 and 32 twice. This is not only hard to read (why are these values here?) but hard to maintain: what if these values changed? (In this they wont, but as you&apos;ll see in the next examples they may).
A better way is done in the second part.</data><data key="Label">null</data><data key="Body">temp_degC = 30
temp_degF = 1.8 * temp_degC + 32

def convert_to_degC(temp):
	return (temp - 32)/1.8

#Better Solution
deg_factor = 1.8
deg_const = 32
temp_degC = 30
temp_degF = deg_factor* temp_degC + deg_const

def convert_to_degC(temp):
	return (temp - deg_const)/deg_factor</data></node>
    <node id="#17:65" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Now when the GBP/USD rate changes we have to update two places in our program. This can cause errors if we update one and forget to update the other.</data><data key="Label">null</data><data key="Body">def convert_to_USD(capital):
	return capital*1.316 #Capital * current rate
	
def convert_to_gbp(capital):
	return capital/1.316 #Capital / current rate
	
#Better methods
conv_factor = 1.316 #GBP to USD conversion factor at time of typing - if we were so included we could get this price live. 

def convert_to_USD(capital):
	return capital*conv_factor
	
def convert_to_gbp(capital):
	return capital/conv_factor</data></node>
    <node id="#17:66" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will solve the linear equations: 5x + 12 = 3 and 2x + 1 =7.</data><data key="Label">null</data><data key="Body">import numpy as np
print np.array([1,1,2,3])
print np.arange(7) #Creates an array 0,1,2,3,4,5,6

import numpy as np
a = np.array([5,12],[2,1])
b = np.array([3,7])
print np.solve(a,b)</data></node>
    <node id="#17:67" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">group = set_group() #This makes group have a group object
group_degree = group.degree() #This invokes the degree() method on the group object and sets the value it returns to this variable</data></node>
    <node id="#17:68" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will calculate n!. This is also an example of the &quot;ternary&quot; operator in Python.</data><data key="Label">null</data><data key="Body">def factorial(n):
	return 1 if n &lt;= 1 else n*factorial(n-1)</data></node>
    <node id="#17:69" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will do f(5) which will return 15, then do g(15) and finally print 18 to the screen.</data><data key="Label">null</data><data key="Body">def f(x):
	return 3*x
def g(x):
	return x+3
print g(f(5))</data></node>
    <node id="#17:70" labels=":Example"><data key="labels">:Example</data><data key="Explanation">In this example if the name entered is not Duncan then it will return the value 0, but if the name is Duncan it will skip the if statement (and the return therein) and go straight to the return 100, notice that we do not required the else statement but you could use one if you preferred.</data><data key="Label">null</data><data key="Body">def get_score(name):
	if name is not &apos;Duncan&apos;:
		return 0
	return 100</data></node>
    <node id="#17:71" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will return two values, the positive and negative square root (and hopefully will only get positive inputs).</data><data key="Label">null</data><data key="Body">def bad_sqrt_finder(x):
	return sqrt(x), -sqrt(x)</data></node>
    <node id="#17:72" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This can represent a person called &quot;John von Nuemann&quot; born in 1903.</data><data key="Label">null</data><data key="Body">person = (&quot;John von Nuemann&quot;, 1903)
name, year_of_birth = person #unpacking</data></node>
    <node id="#17:74" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">message = raw_input(&quot;Please enter a message: &quot;)
print message</data></node>
    <node id="#17:75" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">message = &quot;Hello World&quot;</data></node>
    <node id="#17:76" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Variables in Python can have the &apos;type&apos; of data stored in them changed as the program runs (this can be a common source of errors).</data><data key="Label">null</data><data key="Body">messsage = &quot;Hello World&quot;
#other code in your program
message = 5</data></node>
    <node id="#17:77" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Python allows you to declare (and initialise) many variables at the same time and to further that you can modify multiple variables at the same time using the tuple unpacking.</data><data key="Label">null</data><data key="Body">x,y = 5,3
y,x = x,y #Now y = 5 and x = 3</data></node>
    <node id="#17:78" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will work, and output Hello World, because global_variable is in scope.</data><data key="Label">null</data><data key="Body">global_variable = &quot;Hello World&quot;

def method():
  print global_variable</data></node>
    <node id="#17:79" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This is actually code from Python&apos;s standard library to generate the gcd of two integers a and b.
It will repeat until b is zero (and thus give you the gcd).</data><data key="Label">null</data><data key="Body">while b:
	a,b = b, a%b
return a</data></node>
    <node id="#17:80" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This is logically equivalent to a for loop. Whilst a is less than 100, it will print a and increment a by 1 until it reaches 100.
Notice that for loops and while loops can be used interchangeably but generally one is easier for a situation than the other.</data><data key="Label">null</data><data key="Body">while a &lt; 100:
	print a
	a = a + 1</data></node>
    <node id="#17:81" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">x = 5 #sets x to 5</data></node>
    <node id="#17:82" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">i #This currently has &apos;None&apos; has a value
j = 5 #This currently has 5 as a value</data></node>
    <node id="#17:83" labels=":Example"><data key="labels">:Example</data><data key="Explanation">A Set is a member of the Java Collections Framework.</data><data key="Label">null</data><data key="Body">Set&amp;lt;String&amp;gt; words;
words.add(&quot;Hello&quot;);
words.add(&quot;Apple&quot;);</data></node>
    <node id="#17:84" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This should print: DarudeSandstorm. (If wrapped in the correct boilerplate).</data><data key="Label">null</data><data key="Body">ArrayList&amp;lt;String&amp;gt; words = new ArrayList&amp;lt;String&amp;gt;(2); //Initial size - is not necessary but can increase performance. 
words.add(&quot;Daru&quot;); //1
words.add(&quot;de&quot;); //2 
words.add(&quot;Sandstorm&quot;); //Can now add a 3rd item
words.sort(Comparator.naturalOrder());
for (String word : words){
	System.out.print(word);
}</data></node>
    <node id="#17:86" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Here we have an example two dimensional array of length 2 (it contains two arrays). Note that each element in exampleArray must be an array itself.
We can then access the elements from within the second array by adding more brackets, thus exampleArray[0][0] will give us 1; exampleArray[0][1] will give us 2 etc.</data><data key="Label">null</data><data key="Body">int[][] exampleArray =  new int[3][4];</data></node>
    <node id="#17:87" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This demonstrates how to declare and initialise an Object.</data><data key="Label"></data><data key="Body">Person p = new Person(&quot;Saul&quot;);</data></node>
    <node id="#17:88" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">String msg = &quot;Hello&quot;;
switch (msg){
	case &quot;Hello&quot;: System.out.println(&quot;Hello to you too!&quot;); break;
	case &quot;Goodbye&quot;: System.out.println(&quot;It was nice to see you!&quot;); break;
	default: System.out.println(&quot;Sorry I do not recognise that!&quot;); break;
}</data></node>
    <node id="#17:89" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This allow us to declare and initialise multiple variables of one type on the same line.</data><data key="Label">null</data><data key="Body">int defaultXCoordinate = 0, defaultYCoordinate = 0;</data></node>
    <node id="#17:90" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">@Entity
public class TelevisionShow {
	
        @id
	private String id;
	private String name;
	private int year;
	
	public TelevisionShow(){}
	public TelevisionShow(String name, int year){
		this.id = name+year;
		this.name = name;
		this.year = year;
	}
	
	/* Getters &amp; Setters are omitted for brevity */
}
...
//Somewhere in another class managing the JPA
EntityManagerFactory factory = Persistence.createEntityManagerFactory(optional_properties);
EntityManager manager = factory.createEntityManager();

//Start our transaction using our EntityManager
Transaction transaction = manager.getTransaction();
transaction.begin();
manager.persist(new TelevisionShow(&quot;Breaking Bad&quot;, 2008);
transaction.commit();  //don&apos;t lose your data
manager.close();  //don&apos;t forget to close!

TelevisionShow bb = manager.find(TelevisionShow.class, Breaking Bad2008);  //class, id
System.out.println(bb.name);  //Prints &quot;Breaking Bad&quot;</data></node>
    <node id="#17:91" labels=":Example"><data key="labels">:Example</data><data key="Explanation">There are many ways to store and access the necessary inputs for the DriverManager, the worst way is to hardcode them into your program. 
An easy way would be to pass the username and password into your program as arguments at command line. 
Note that DriverManager will return the best type of Driver for us, which will vary from database to database, further note that for brevity the necessary try block was omitted. 
Once we are connected to the DB we are able to issue SQL queries and get results.</data><data key="Label">null</data><data key="Body">Connection conn; //You require a Connection object to hold your connection to the DB
conn = DriverManager.getConnection(database, username, password);
statement = conn.getStatement();
statement.executeUpdate(&quot;CREATE TABLE people&quot;);</data></node>
    <node id="#17:92" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Not only is it safer but it is also far more efficient. We can reuse our query many times for different inputs.</data><data key="Label">null</data><data key="Body">PreparedStatement query = con.PreparedStatement(&quot;SELECT FROM * WHERE name like ?&quot;);
query.setString(1, &quot;Bobby Tables&quot;); //Note that these count from 1
query.execute();</data></node>
    <node id="#17:93" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">String fileName = &quot;obvious_pop_culture_reference/jokes.txt&quot;;
    try {
        PrintWriter writer = new PrintWriter(fileName);
        writer.println(&quot;Don&apos;t forget your towel!&quot;);
    }catch(FileNotFoundException e){
        System.out.println(&quot;File does not exist!&quot;);
    }
}</data></node>
    <node id="#17:94" labels=":Example"><data key="labels">:Example</data><data key="Explanation">&lt;b&gt;DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.&lt;/b&gt;&lt;br&gt;
&lt;b&gt;DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.&lt;/b&gt;&lt;br&gt;
&lt;b&gt;DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.&lt;/b&gt;&lt;br&gt;
&lt;b&gt;DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.&lt;/b&gt;&lt;br&gt;
&lt;b&gt;DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.&lt;/b&gt;&lt;br&gt;
&lt;b&gt;DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.&lt;/b&gt;&lt;br&gt;
&lt;b&gt;DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.&lt;/b&gt;&lt;br&gt;
&lt;b&gt;DO NOT TRY TO PARSE JSON (OR ANY (SEMI-)STRUCTURED DATA) BY YOURSELF. USE A PARSER.&lt;/b&gt;&lt;br&gt;</data><data key="Label">null</data><data key="Body">String fileName = &quot;usefulJSONData.json&quot;;
FileReader reader = new FileReader(fileName);
BufferedReader file = new BufferedReader(reader);</data></node>
    <node id="#17:95" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will print out the alphabet from z to a.</data><data key="Label">null</data><data key="Body">StringBuilder sb = new StringBuilder((int)(&apos;z&apos;-&apos;a&apos;)); //There are many constructors to choose from
for (char i=&apos;a&apos;; i&lt;=&apos;z&apos;; i++){
	sb.append(i);
}
System.out.println((sb.reverse()).toString());</data></node>
    <node id="#17:96" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We treat each element in our data structure as &apos;name&apos; and the loop will update it at the end of each time through the block. This means we do not have to use any indexes.</data><data key="Label">null</data><data key="in_"></data><data key="Body">for(String name: names){
	System.out.println(name); 
}</data></node>
    <node id="#17:97" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">try {
	//code where an exception may occur
catch (Exception e){
	e.printStackTrace();
}finally{
	System.out.println(&quot;Program has finished executing!&quot;);
}</data></node>
    <node id="#17:98" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public class InvalidInputException extends Exception{}</data></node>
    <node id="#17:99" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public void accessSecretMethod(String username) throws InvalidInputException{
	(!(username.equals(&quot;Jake Peralta&quot;))?throw new InvalidInputException: doSecretMethod();
}</data></node>
    <node id="#17:100" labels=":Example"><data key="labels">:Example</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">public static void main(String[] args){
	try{
		accessSecretMethod(&quot;Norman Scully&quot;);
	}catch(InValidInputException e){
		System.out.println(&quot;Invalid username!&quot;);
	}
}</data></node>
    <node id="#17:101" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">//Using normal if-else
if (var == 3){
	doOneMethod();
else {
	doOtherMethod();
}

//Using Ternary
(var == 3)?doOneMethod():doOtherMethod();</data></node>
    <node id="#17:102" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public int sum(int... numbers){
    int sum = 0;
    for (int n: numbers){
        sum += n;
    }
    return sum;
}</data></node>
    <node id="#17:103" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public static void(String... main){
        MyClass name = new MyClass(); //Terrible name for a class
	System.out.println(name.sum(1,5,6,7,3,5));
}</data></node>
    <node id="#17:104" labels=":Example"><data key="labels">:Example</data><data key="Explanation">If x.compareTo(y) == 0 then generally x.equals(y) == true. This is not required but is strongly suggested.</data><data key="Label">null</data><data key="Body">public class Car implements Comparable&amp;lt;Car&amp;gt;{
	publc int compareTo(Car obj){
		ourCarMaxSpeed = maxSpeed;
		theirCarMaxSpeed = obj.getMaxSpeed();
		return (ourCarMaxSpeed.equals(theirCarMaxSpeed))?0: ourCarMaxSpeed-theirCarMaxSpeed;
	}
}</data></node>
    <node id="#17:105" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Notice we can use K in our method declarations too, notice we can have multiple generic parameters separated by a comma.</data><data key="Label">null</data><data key="Body">public abstract class AnAwesomeClass&amp;lt;K, V&amp;gt;{
		private K anExampleVariable;
		private V anotherExampleVariable;
		
		public abstract V anExampleMethod(K anExampleInput);
	}</data></node>
    <node id="#17:106" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">List&amp;lt;String&amp;gt;myList;
myList.add(&quot;Hello&quot;);
myList.add(&quot;World&quot;);</data></node>
    <node id="#17:107" labels=":Example"><data key="labels">:Example</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">public class SpecialList&amp;lt;T extends Person&amp;gt;{
	private T first;
	public T getFirst(){
		return first;
	}
}</data></node>
    <node id="#17:108" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We use ? when we do not know, nor care what the type in the generics are. Note that we are not allowed to update or add to the list when we are using the ? notation since we do not know its type and there is no way to find it out.</data><data key="Label">null</data><data key="Body">void printObj(List&amp;lt;? extends Object&amp;gt; list){
	for (Object l: list){
		System.out.println(l);
	}
}</data></node>
    <node id="#17:109" labels=":Example"><data key="labels">:Example</data><data key="Explanation">MapReduce has a large amount of overhead in its infrastructure so it is only advisable to use it for extremely large and complex data sets.
Further if the problem is more complex it is suggested, and possible, to use multiple Maps and multiple Reduces.</data><data key="Label">null</data><data key="Body">Count the number of student above 1.5m.

1. Map - filter all the students below 1.5m.
2. Reduce - count the number of students left.</data></node>
    <node id="#17:110" labels=":Example"><data key="labels">:Example</data><data key="Explanation">All Enumerations should be in capital letters because they are implicitly final.</data><data key="Label">null</data><data key="Body">public enum Coffee{
    YIRGACHEFFEE, JAVA, COLOMBIA
}

//Elsewhere
public class CoffeeShop extends Shop{
    public Coffee origin = Coffee.YIRGACHEFFEE;

    public void makeCoffee(Coffee type){
        if (type == origin){
            produceCoffee();
        }
    }
}</data></node>
    <node id="#17:111" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Note: Variables in functions are parameters and do not go in &lt;b&gt;&quot; &quot;&lt;/b&gt;</data><data key="Label">null</data><data key="Body">String  message = &quot;How much refuse would a refuse dump need to have to refuse refuse?&quot;
System.out.println(message);</data></node>
    <node id="#17:112" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Notice here that we have two types of variables: a Person object (a reference type) and an int (a primitive type).
We can then give them a value later on, but note that in the interim they do have a value (Null for the Person and 0 for the int) which was assigned by the compiler.
Finally we declare and initialise another Person and a float on one line.</data><data key="Label">null</data><data key="Body">//Declare our variables. This determines their scope.
Person p;
int age;
//Initialise our variable to a value that we want them to have
age = 21;
p = new Person(&quot;Steve&quot;, age);
//One line trick
Person joel = new Person(&quot;Joel&quot;,  43);
float sol = 42.0;</data></node>
    <node id="#17:113" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We can update what Object is held by the variable but two objects exist. Both b and c hold a reference to the &lt;b&gt;Circle(5)&lt;/b&gt; object, so updating using one or the other does the same thing. 
The value of areaC and areaB are equal because they are both accessing the same object.</data><data key="Label">null</data><data key="Body">Circle c = new Circle(3);
Circle b = new Circle(5);
c = b;
float areaC = c.area();
float areaB = b.area();</data></node>
    <node id="#17:115" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">Design a program to read integers from a file and print double of their value.
We will need the following methods:
	1. Ensure the file exists and no errors opening
	2. Read the values in
	3. Ensure the values are integers
	4. Double the integers
	5. Print out the new values</data></node>
    <node id="#17:116" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">Java: public int getAge(person p);
Python: getAge(p)</data></node>
    <node id="#17:117" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">Psuedocode:
get list of VIPs
search list for name
if name is on list of vips:
	let person in
else:
	do not let them in

//Java code
public boolean isVIP(person p){
	String name = person.getName();
	List&lt;String&gt; list = getVIPList();
	return list.contains(name)?true:false;	
}</data></node>
    <node id="#17:118" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">1. Project specification
2. Rough plan
3. UML diagram
4. Actual code</data></node>
    <node id="#17:119" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This ensures we can safely say we have a good coverage with a low chance of unpredictable behaviour. 
These tests might highlight some unexpected behaviour, if doublesValue returned 2*x and x was a string, in Python we may get a different value than what we originally expected and would have to update our program.</data><data key="Label">null</data><data key="Body">For a method with the method signature doublesValue(x) we may wish to unit test it with the following inputs:
	x = 0
	x = 1
	x = -1
	x = &quot;Hello World&quot;
	x = 1.0
	x = null (or similar)</data></node>
    <node id="#17:121" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">&lt;img class=&quot;example-img&quot; src=&quot;http://i.imgur.com/Us0K5eO.png&quot;&gt;&lt;/img&gt;</data></node>
    <node id="#17:122" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">+ name : String</data></node>
    <node id="#17:124" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">+ getAge(): int
# setName(name: String): void</data></node>
    <node id="#17:125" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public int setAge(int age){
	this.age = age;
}

public int setAge(String age){
	this.age = parseStringtoInt(age);
}</data></node>
    <node id="#17:126" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This means we can change 1 line and can update all the places where we invoke our function.
For example if we want to change our program to work for planes we need only change the getVehicle function.
Note: This example assumes we have interfaces with valid and workable methods.</data><data key="Label">null</data><data key="Body">public abstract class VehicleFactoryMaker implements MoveableInterface, DestroyableInterface{
	public static Vehicle getVehicle(){
		return new Car();
	}
}

public class Transporter{
	Vehicle v = VehicleFactoryMaker.getNewVehicle();
	
	public void moveVehicle(){
		v.move();
	}
}

public class Destroyer{
	Vehicle v = VehicleFactoryMaker.getNewVehicle();
	
	public void destroyVehicle(){
		v.destroy();
	}
}

public class Creator{
	Vehicle v;
	public Creator(){
		v = VehicleFactoryMaker.getVehicle();
	}
}</data></node>
    <node id="#17:127" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We can use method overloading with constructors too.</data><data key="Label">null</data><data key="Body">public class Person{
	protected String name;
	protected int age;
	
	public Person(){}
	public Person(String name){
		this.name = name;
	}
	public Person(String name, int age){
		this(name);
		this.age = age;
	}
}</data></node>
    <node id="#17:128" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Using the double brace notation we can declare and initialise a reference type on one line. This is creating an anonymous class inside our class.  
Java is usually able to infer the type of ArrayList we want from the type of the List, but we cannot use it when using inner classes. This is an advanced trick for initialising data structures in line.</data><data key="Label">null</data><data key="Body">List&amp;lt;String&amp;gt; moviesLeoShouldHaveWonAnOscarFor = new ArrayList&amp;lt;String&amp;gt;(){{
					add(&quot;Catch me if you can&quot;);
					add(&quot;Inception&quot;);
					add(&quot;The Wolf of Wall Street&quot;);
					}};</data></node>
    <node id="#17:129" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This allows us to efficiently test to see if the same String occurs multiple times within a specific file.</data><data key="Label">null</data><data key="Body">import java.util.*;
import java.io.*;

public class test{
	public static final String fileName = &quot;words.txt&quot;;

	public static void main(String[] args){
		//Open our file
		BufferedReader reader = null;
		try{
			reader = new BufferedReader(new FileReader(fileName));
			assert(reader != null);
			System.out.println((isDuplicates(reader))?&quot;Duplicates exist&quot;:&quot;Duplicates do not exist!&quot;);
		}catch (FileNotFoundException e){
			System.out.println(&quot;This file could not be located!&quot;);
		}catch (IOException e){
			System.out.println(&quot;Something went wrong reading the file&quot;);
		}


	}

    /**
     * Will determine if a file has duplicate Strings
     * @param reader the BufferedReader for the Strings to be read in from
     * @return true if duplicates exist, and false otherwise
     * @throws IOException if the file does not exist or cannot load
     */
	public static boolean isDuplicates(BufferedReader reader) throws IOException
	{
		//Create a map for the word count
		Map&amp;lt;String, Integer&amp;gt;  words = new HashMap&lt;&gt;();
		
		//Read each word
		String word = reader.readLine();
		while (word != null)
		{
			Integer success = words.putIfAbsent(word, 1);
			if (success != null)
			{
				return true;
			}
		}
		//otherwise
		return false;
	}
		
}</data></node>
    <node id="#17:130" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This shows an example of a class with a field. The rest has been omitted for brevity.</data><data key="Label">null</data><data key="Body">public class Student extends Person implements ExaminableInterface{
    protected int matricNumber;
}</data></node>
    <node id="#17:131" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">while (superheroFilm.another()){
        eyes.roll();
}</data></node>
    <node id="#17:132" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">do 
{
        System.out.println(&quot;Are you sure this isn&apos;t a terrible mistake?&quot;);
        allowChanceToChange();
}while (!theMummyFilm.actor.equals(&quot;B Fraser&quot;);</data></node>
    <node id="#17:133" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Class and Interface</data><data key="Label"></data><data key="Body">&lt;img class=&quot;example-img&quot; src=&quot;http://i.imgur.com/NotAzd6.png&quot;&gt;&lt;/img&gt;</data></node>
    <node id="#17:134" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Class and Interface with access control modifiers.</data><data key="Label">null</data><data key="Body">&lt;img class=&quot;example-img&quot; src=&quot;http://i.imgur.com/NotAzd6.png&quot;&gt;&lt;/img&gt;</data></node>
    <node id="#17:135" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">&lt;img class=&quot;example-img&quot; src=&quot;http://i.imgur.com/WUHM8O8.png&quot;&gt;&lt;/img&gt;</data></node>
    <node id="#17:136" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">&lt;img class=&quot;example-img&quot; src=&quot;http://i.imgur.com/NotAzd6.png&quot;&gt;&lt;/img&gt;</data></node>
    <node id="#17:137" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">&lt;img class=&quot;example-img&quot; src=&quot;http://i.imgur.com/yMed9WE.png&quot;&gt;&lt;/img&gt;</data></node>
    <node id="#17:138" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">&lt;img class=&quot;example-img&quot; src=&quot;http://i.imgur.com/Qfi6UC0.png&quot;&gt;&lt;/img&gt;</data></node>
    <node id="#17:139" labels=":Example"><data key="labels">:Example</data><data key="Label">null</data><data key="Body">@test
public validAdditionOfInts(){
    AdderClass adder = new AdderClass();
    assertEquals(6, adder.add(4,2)); //of form: EXPECTED, ACTUAL
}</data></node>
    <node id="#17:140" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will create a list between of 0,1,2 ..., 99.</data><data key="Label">null</data><data key="Body">list_of_numbers = [x for x in xrange(100)]</data></node>
    <node id="#17:141" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This gives us an easy way to look up the name of a module from just its module code. 
&lt;br&gt;
For example &lt;code&gt;print classes[&apos;MT2502&apos;]&lt;/code&gt; would output &lt;code&gt;Analysis&lt;/code&gt; for us.</data><data key="Label">null</data><data key="Body">classes = {
	&apos;MT2501&apos;: &apos;Linear Algebra&apos;,
	&apos;MT2502&apos;: &apos;Analysis&apos;,
	&apos;MT2503&apos;: &apos;Multivariate Calculus&apos;
	}
print classes[&apos;MT2502&apos;]</data></node>
    <node id="#17:142" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Prints them as a list, see for yourself by running this example</data><data key="Label">null</data><data key="Body">list_of_colours = [&apos;red&apos;,&apos;blue&apos;,&apos;green&apos;,&apos;yellow&apos;]
print list_of_colours[2:] #prints green and yellow
print list_of_colours[:2] #prints red and blue</data></node>
    <node id="#17:143" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">int(5.3) #converts a float to an int</data></node>
    <node id="#17:144" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public class GoldFish{
    private float weight;
    private String name;

    @Override
    public boolean equals(Fish a){
        return weight == a.getWeight() &amp;&amp; name.equals(a.getName());
    }

    public GoldFish(String name, float weight){
        this.weight = weight;
        this.name += name; //Recall Strings are special so we can do this
}

//Elsewhere in our program
GoldFish f1 = new GoldFish(&quot;Nemo&quot;,  7.1);
GoldFish f2 = new GoldFish(&quot;Nemo&quot;, 7.1);

//Correct to compare if two fish are the same:
f1.equals(f2); //This is true        
//Wrong way
f1 == f2; //This is false since they are pointing to different objects.</data></node>
    <node id="#17:145" labels=":Example"><data key="labels">:Example</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">String firstPart = &quot;Send&quot;
String secondPart &quot; memes&quot;
String msg = firstPart + secondPart; //Contains &quot;Send memes&quot;</data></node>
    <node id="#17:146" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Boolean b1 and b2 are both True, but b3 returns False because we already have a square of size 3. There is no guarantees about the ordering because we used a HashSet.</data><data key="Label">null</data><data key="Body">public class Square extends Shape{
    int size;

    public Square(int size){
        this.size = size;
    }

    @Override
    public boolean equals(Square s){
        return size == s.size;
    }
}

//Elsewhere
Square s1 = new Square(3);
Square s2 = new Square(4);
Square s3 = new Square(3);

Set&amp;lt;Squares&amp;gt; squares = new HashSet&lt;&gt;();
boolean b1 = squares.add(s1);
boolean b2 = squares.add(s2);
boolean b3 = squares.add(s3);</data></node>
    <node id="#17:147" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">LinkedList&amp;lt;Person&amp;gt; queue = new LinkedList&lt;&gt;();
Person p1 = new Person(&quot;Norbit&quot;, 37);
Person p2 = new Person(&quot;Ericia&quot;, 21);
Person p3 = new Person(&quot;Victoria&quot;, 89);
Person p4 = new Person(&quot;Edward&quot;, 7);
Person p5 = new Person(&quot;Robert&quot;, 32);

//As a Person enters our store (Good Goods Inc.) we may want to add them to the queue of customers to be served.
queue.add(p1);
queue.add(p2);
queue.add(p3);

//As we service them we may want to remove them from the queue
queue.removeFirst();
queue.add(p4);
queue.removeFirst();
queue.removeFirst();
queue.add(p5);

//At this point our queue only consists of Edward and Robert since everyone before them is removed first (in this example).</data></node>
    <node id="#17:148" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Internally we just use the method name, externally we use the object name with the dot operator and for static methods we use the class name with the dot operator.</data><data key="Label">null</data><data key="Body">public class Person{
    private int age;
    private static int people; //Defaults to 0

    public Person(int age){
        this.age = age;
        people++;
    }

    private void changeAge(int change){
        age += change;
    }

    public void haveBirthday(){
        changeAge(1);
    }

    public static int numberOfPeople(){
        return people;
    }
}

//Elsewhere we could have a Person object
Person abigail = new Person(19);
abigail.haveBirthday(); //Now her age is 20!
int totalGuests = Person.numberOfPeople();</data></node>
    <node id="#17:149" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We are allowed to initialise FINAL variables in Constructors.</data><data key="Label">null</data><data key="Body">public class Shop{
    public final double MAX_DEBT;
    public double currentDebt = 0;

    public Shop(double MAX_DEBT, double currentDebt){
        this.MAX_DEBT = MAX_DEBT;
        this.currentDebt = currentDebt;
    }

    public boolean takeLoan(double amount){
        if (currentDebt + amount &lt;= MAX_DEBT){
            currentDebt += amount;
            return True;
        }
        return False;
    }
}</data></node>
    <node id="#17:150" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Any varags must go at the end of the parameter list. We are also limited to 1 varag parameter per method at most.  Think carefully about whether you need varags over an array. Arrays are typically better but there are cases where varags reigns supreme.</data><data key="Label">null</data><data key="Body">public int sumAndMultiply(int... sum, int multiply){
    int sum = sum(sum);
    return sum*multiply();
}</data></node>
    <node id="#17:151" labels=":Example"><data key="labels">:Example</data><data key="Explanation">@Override is an annotation and simply provides additional information to the compiler. It is technically not necessary. This shows us method overriding across classes.

See: https://en.wikipedia.org/wiki/Duck#Communication</data><data key="Label">null</data><data key="Body">public abstract class Animal{
    public String noise();
}

public class Fox extends Animal{
    @Override
    public String noise(){
        return &quot;What does a fox say?&quot;;
    }
}

public class Duck extends Animal(){
    @Override
    public String noise(){
        return &quot;Quack!&quot;;
    }
}

public class DivingDuck extends Duck{
    @Override
    public String noise(){
        return &quot;Scaup!&quot;;
    }
}</data></node>
    <node id="#17:152" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Variables and methods that are private can only be accessed from within the class itself.</data><data key="Label">null</data><data key="Body">public class Car {
    private double mpg;
    public int miles;

    public Car(int miles, double mpg){
        this.miles = miles;
        this.mpg = mpg;
    }

    private void resetMiles(){
        miles = 0;
    }
}

//Elsewhere
Car c = new Car(1000, 25.2);
int miles = c.miles;
double mpg = c.mpg; //This will not work.
c.resetMiles(); //This will not work either.</data></node>
    <node id="#17:153" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public class Car {
    public double mpg;
    public int miles;

    public Car(int miles, double mpg){
        this.miles = miles;
        this.mpg = mpg;
    }

    public void resetMiles(){
        miles = 0;
    }
}

//Elsewhere
Car c = new Car(1000, 25.2);
int miles = c.miles;
double mpg = c.mpg; 
c.resetMiles(); //Miles is now 0</data></node>
    <node id="#17:154" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public class Car {
    protected double mpg;
    public int miles;

    public Car(int miles, double mpg){
        this.miles = miles;
        this.mpg = mpg;
    }

    protected void resetMiles(){
        miles = 0;
    }
}

public class SportsCar extends Car{
    public void sellCar(){
        resetMiles();
    }

    public SportsCar(int miles){
        this.miles = miles;
       mpg = 0.5;
    }
}
//Elsewhere
Car c = new Car(1000, 25.2);
int miles = c.miles;
double mpg = c.mpg; //This will not work.
c.resetMiles(); //This will not work either.
SportsCar sc = new SportsCar(10);
sc.sellCar(); //Miles is now 0 since it is a subclass and can access the protected methods in the superclass.
sc.resetMiles(); //Will not work. The class can access it, but we cannot externally.</data></node>
    <node id="#17:155" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public abstract class Animal{
    private int age;

    abstract int getAge();
    abstract String noise();
}</data></node>
    <node id="#17:156" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This gives us a constant that cannot be updated after it has been initialised by the constructor.</data><data key="Label">null</data><data key="Body">public abstract class Tree&amp;lt;T&amp;gt; {
    public final int NUMBER_OF_CHILDREN;

    public Tree(int NUMBER_OF_CHILDREN){
        this.NUMBER_OF_CHILDREN = NUMBER_OF_CHILDREN;
    }

    public abstract T getChildNumber(int i);
}</data></node>
    <node id="#17:157" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We are not allowed to extend a final class. This means CartesianTree cannot inherit from BinaryTree.</data><data key="Label">null</data><data key="Body">public final class BinaryTree&amp;lt;T&amp;gt;  extends Tree&amp;lt;T&amp;gt;{
    public T left;
    public T right;

    public BinaryTree(int NUMBER_OF_CHILDREN){
        super(NUMBER_OF_CHILDREN);
    }

    public T getChildNumber(int i){
        if (i==0) return left;
        if (i==1) return right;
        return null;
    }
}

public class CartesianTree&amp;lt;T&amp;gt; extends BinaryTree&amp;ltT&amp;gt{
    //
}</data></node>
    <node id="#17:158" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public class Cat{
    public final boolean pet(){
        return True;
    }
}

public class Lion extends Cat{
 //
}

//Elsewhere
Lion l = new Lion();
l.pet(); //Lion has no pet method.</data></node>
    <node id="#17:159" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public interface EntityInterface{
    private double x;
    private double y;

    public default move(double dx, double dy){
        x += dx;
        y += dy;
    }
}

public class Entity implement EntityInterface{
    protected double z;
}

public class Mob extends Entity implements EntityInterface{
    private final Window window = Window.getWindowObject();

    public move(double dx, double dy){
        dx /= 2;
        EntityInterface.super.move(dx, dy);
    }

    public move(double dx, double dy, double dz){
        z += dz;
        move(dx, dy);
        window.reDraw();
    }

}

//Elsewhere
Entity e = new Entity(); //Fields default to 0,0
e.move(1.0, 2.0); //This is valid. Now the coordinates are 1.0, 2.0. This is using the default method in the interface. 

Mob m = new Mob();
m.move(2.0, 2.0); //This is valid. The coordinates are again 1.0, 2.0, 0.0

Mob m2 = new Mob();
m.move(2.0, 3.0, 5.0); //This is valid. Now the coordinates are 1.0, 3.0, 5.0</data></node>
    <node id="#17:160" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public class MathLib{
    public static double hyp(double a, double b){
        return Math.sqrt(a*a+b*b);
    }
}

//Elsewhere
public class Triangle(){
    public double side1;
    public double side2;
    public double hyp;

    public Triangle(double a, double b){
        side1 = a;
        side2 = b;
        hyp = MathLib.hyp(a,b);
    }
}</data></node>
    <node id="#17:161" labels=":Example"><data key="labels">:Example</data><data key="Explanation">A static method cannot access a non-static method (or variables).</data><data key="Label">null</data><data key="Body">public class MathLib{

    public int add(int a, int b){
        return a + b;
    }

    public static int addAndSqrt(){
        return sqrt(add(a,b));
    }

}</data></node>
    <node id="#17:162" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public class Fruit{
    double weight;
}</data></node>
    <node id="#17:163" labels=":Example"><data key="labels">:Example</data><data key="Explanation">There is no need to put access control on local variables. They can only be accessed by that method.</data><data key="Label">null</data><data key="Body">public int add(int a, int b){
    private int c = a + b;
    return c;
}</data></node>
    <node id="#17:164" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">int forrest = 1;
int jenny = 1;

if (forrest + jenny &lt; 3){
    return Oscars.all();
}</data></node>
    <node id="#17:165" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This could also be done by polymorphism.</data><data key="Label">null</data><data key="Body">public String catchphrase(Person p){
    if(p.name.equals(&quot;Jeff&quot;){
        return &quot;Whatever. I don&apos;t care&quot;;
    }
    if(p.name.equals(&quot;Abed&quot;){
        return &quot;Cool. Cool cool.&quot;;
    }
}</data></node>
    <node id="#17:166" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">while(tok.hasToken() &amp;&amp; !found){
   found = tok.next().equals(searchTerm);
}</data></node>
    <node id="#17:167" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public void print(Iterable&amp;lt;E&amp;gt; i){
    for(E o: i){
        System.out.println(o);
    }
}</data></node>
    <node id="#17:168" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This is an example using the Scanner object. Many other options are available.</data><data key="Label">null</data><data key="Body">Scanner scan = new Scanner(System.in);
System.out.print(&quot;Please input your age: &quot;);
int age = sc.nextInt();</data></node>
    <node id="#17:169" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">boolean_var = False #Set our boolean to false
if not boolean_var: #If not True
    boolean_var = True #Set this variable to True</data></node>
    <node id="#17:170" labels=":Example"><data key="labels">:Example</data><data key="Explanation">&lt;code&gt;&quot;True&quot;&lt;/code&gt; is not the same as &lt;code&gt;True&lt;/code&gt; which is different from &lt;code&gt;true&lt;/code&gt;.</data><data key="Label">null</data><data key="Body">boolean_var = &quot;True&quot;</data></node>
    <node id="#17:171" labels=":Example"><data key="labels">:Example</data><data key="Explanation">If our list does not exist we simply create one.</data><data key="Label">null</data><data key="Body">def add_to_list(list, elem):
    if list is none:
        list = []
    list.append(elem)
    return list</data></node>
    <node id="#17:172" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This will throw an exception since list is none and we cannot append to it.</data><data key="Label">null</data><data key="Body">def add_to_list(list, elem):
    list.append(elem)
    return list

add_to_list(None, &apos;a&apos;)</data></node>
    <node id="#17:173" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This program will print False, True (1), True (3), False (4)</data><data key="Label">null</data><data key="Body">s1 = Set((1,2,3))
s2 = Set((1,3,4))
print s1.issubset(s2)
for e in s1:
    print e in s2</data></node>
    <node id="#17:174" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Set constructor takes one parameter - an iterable object eg a dictionary, list or tuple.</data><data key="Label">null</data><data key="Body">s = set(1,2,3)</data></node>
    <node id="#17:175" labels=":Example"><data key="labels">:Example</data><data key="Explanation">We can repeatedly loop over readLine() whilsts the BufferedReader file.hasNext() to read the entire file.
Note: Whenever you read a line it will always move to the next line automatically and not reset. In this example when we do the first readLine() if we do another readLine() we get line 2 and not line 1.</data><data key="Label">null</data><data key="Body">String fileName = &quot;memes/hot_memes_2k18.txt&quot; 

public String line() throws FileNotFoundException{
    FileReader r = new FileReader(fileName);
    BufferedReader file = new BufferedReader(r); //Notice r and not our filename
    return file.readLine(); //Returns the first line (up to &apos;\n&apos;)
}</data></node>
    <node id="#17:176" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This example shows reading JSON from a local file, but often JSON is a response from web APIs.</data><data key="Label">null</data><data key="Body">JsonReader jReader = Json.createReader(new Reader(&apos;filename.json&apos;)); //Much like reading a file we need this to be in our object. Note: JSON Readers are Object based models.
JsonObject obj = jReader.readObject(); //This will read our first JSON Object and load it into memory for us.
double cost = obj.getJsonNumber(&quot;cost&quot;).doubleValue(); //Gets us the attribute called cost from this specific object. 
String type = obj.getString(&quot;type&quot;); //This gets us the type attribute. Notice that they are slightly different.</data></node>
    <node id="#17:177" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This demonstrates how to write an object from our memory to disk in JSON format.</data><data key="Label">null</data><data key="Body">JsonBuilderFactory personFactory = Json.createObjectBuilder(); //Notice this is a Factory!
JsonObject = personFactory.createObjectBuilder();
person.add(&quot;firstName&quot;,  &quot;Doug&quot;);
person.add(&quot;lastName&quot;,  &quot;Stamper&quot;);
person.add(&quot;age&quot;, 52);
person.add(&quot;Occupation&quot;, &quot;Chief of Staff&quot;);
person.build(); //Notice we have to build at the end. This is now a JSON object which can be written to a file as normal.</data></node>
    <node id="#17:178" labels=":Example"><data key="labels">:Example</data><data key="Explanation">For loops are able to be converted into while loops (although do not do this unless you have a specific reason to do so), and secondly notice that the condition (x &gt; 1) is checked before the code block is executed.
&lt;p&gt;
The output is &lt;code&gt;3, 2 &lt;/code&gt;</data><data key="Label">null</data><data key="Body">int x = 3;
while (x &gt; 1){
   System.out.println(x);
   x--;
}</data></node>
    <node id="#17:179" labels=":Example"><data key="labels">:Example</data><data key="Explanation">This still loops once outputting &lt;code&gt;3&lt;/code&gt;</data><data key="Label">null</data><data key="Body">int x = 3;
do{
   System.out.println(x);
   x--;
}while (x &gt; 3);</data></node>
    <node id="#17:180" labels=":Example"><data key="labels">:Example</data><data key="Explanation">If we are expecting a method (or value) to be simple TRUE or FALSE  we typically omit the the equality. 
I.e instead of &lt;pre&gt;cat.ill() == true&lt;/pre&gt; we simply  have &lt;pre&gt;cat.ill()&lt;/pre&gt;.</data><data key="Label">null</data><data key="Body">if (cat.height &gt; 0.1 &amp;&amp; cat.weight &gt; 20 || cat.ill()){
    admitToVet(cat);
}</data></node>
    <node id="#17:181" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Primitive types, when passed into a method, are copied to the local variable. We cannot update the original in this way.</data><data key="Label">null</data><data key="Body">boolean useCar = false;

public void activateCar(boolean currentState){
    currentState = true;
}

System.out.println(userCar); //would still output false</data></node>
    <node id="#17:183" labels=":Example"><data key="labels">:Example</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">This type of supply function for a firm arises in the case of perfectly competitive markets. Here, competition has pushed prices down to the level of the firm’s costs.  A lower price would generate losses and the firm would not supply to the market.  The firm would like to supply at a higher price but competition prevents this.</data></node>
    <node id="#17:184" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Suppose  $$c=-2$$.  In that case $$P=-2+dQ^S$$  

When P=0, this implies $$Q^S=\frac{2}{d}$$ which is a positive number given that the slope is positive: $$d&gt;0$$ by the law of supply.  In other words, when the price is zero, suppliers would provide some goods for free when the choke price is negative.  
&lt;br&gt;
Clearly this is not very realistic and explains why we would normally expect the choke price to be positive.</data><data key="Label">null</data><data key="Body">Example 1</data></node>
    <node id="#17:185" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">public class Main {

    public static void main(String[] args) {
        if (args.length &gt; 0) System.out.println(&quot;The first parameter is: &quot; + args[0]);
    }
}</data></node>
    <node id="#17:186" labels=":Example"><data key="labels">:Example</data><data key="Explanation"></data><data key="Label">null</data><data key="Body">x = 0
while x &lt; 3:
    y = 3*x + 5
    x = x + 1

# Whilst this is *technically* valid Python it is generally frowned upon
# It is not clear when y is created what its scope is to be and can 
# make debugging in complex code more challenging.
# As a general rule of thumb code should be declared at the highest scope
# It will be used in
x = y</data></node>
    <node id="#17:187" labels=":Example"><data key="labels">:Example</data><data key="Explanation">Let $$Q^D = 5 - \frac{1}{2}P$$ and $$Q^S = -1 + P$$

In equilibrium:

$$Q^D = Q^S \implies 5 - \frac{1}{2}P = -1 + P$$

Which we can rearrange to get:

$$P = P_e = \frac{-1 - 5}{\frac{-1}{2}-1} = - 4 $$

And the equilibrium quantity:

$$ Q_e = 5 - \frac{1}{2}P_e = -1 + P_e = 3 $$</data><data key="Label">null</data><data key="Body">Example 1</data></node>
    <node id="#17:188" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">&lt;i&gt;Why is MPL diminishing?&lt;/i&gt;&lt;p&gt;
Think of a pub with a beer dispenser behind the bar. If at any given time there is only one bartender operating the dispenser, he may be able to give good service to all clients most of the time. A second person operating the dispenser might be useful on particularly busy nights but will overall serve few additional drinks beyond those which a sole bartender does by himself. A third person will be useful rarely if ever, and so on. The contribution to the job which every consecutive bartender hired provides (assuming no one is fired!) is the marginal product of their labour. As you can see, this contribution is smaller and smaller for every new worker, and the marginal product is hence diminishing.

&lt;i&gt;When is MPL increasing?&lt;/i&gt;&lt;p&gt;
It is not necessarily always the case that the marginal product of labour will diminish when another worker is hired.  In the bartender example, the marginal product may initially increase if a sole bartender is seriously overworked completing all of the tasks alone and facing long queues at the bar.  In that case, an additional worker may be able to specialize (operating the till?) such that the marginal product of labour initially increases.  Nevertheless, it is likely that diminishing returns will eventually set in as more workers are employed.</data></node>
    <node id="#17:189" labels=":Example"><data key="labels">:Example</data><data key="Explanation">null</data><data key="Label">null</data><data key="Body">Suppose U = XY then:
&lt;p&gt;
$$ MY_X = Y$$
&lt;p&gt;
and also:
&lt;p&gt;
$$ MU_Y = X$$
&lt;p&gt;
$$ MRS_{XY} = \frac{MU_X}{MU_Y} = \frac{Y}{X} $$</data></node>
    <node id="#25:0" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">OOP</data><data key="Body">Objects and OOP is a core part of the Java programming language. 
&lt;br&gt;
The basis of this is that everything (except primitive types) in Java are objects which are the concrete implementation of classes.
For example Person might be a class, but if we have &lt;code&gt;Person p = new Person(&quot;Rick&quot;);&lt;/code&gt; then p is an implementation of a class and is thus an object of type Person. 
&lt;br&gt;
This means that each class should only correspond to one thing and contain all the data and methods required for it to operate. For example a program implementing accounting for a zoo may require an object to store the data and another to reload it from backing storage, an object for the data to be held in, an object for new data to be added, an object to display the currently requested data, an object for the UI etc... (these of course will vary depending on your implementation - this is an example, not a guide).</data></node>
    <node id="#25:1" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Encapsulation is a way of ensuring the fields and methods related to certain object are held together in the one place. 
This is closely related to the other principles of OOP and to Java&apos;s access control modifiers. 
&lt;br&gt;
Further note that in Java, unlike many other programming languages, all variables and fields must be within a class or within a method in a class.</data></node>
    <node id="#25:2" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">This is the act of controlling from where certain data can be accessed. This allows you to have data that can only be accessed from within an object or by anyone and control what properties are inherited. 
&lt;br&gt; 
In Java this is done by 3 keywords:
&lt;ol&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;li&gt;package-private&lt;/li&gt;
&lt;/ol&gt;
These keywords only apply to globally-scoped variables, and not to local variables since they cease to exist at the end of the method they are declared in.</data></node>
    <node id="#25:3" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In programming it is good practice to limit the direct access to variables. This prevents them being accidentally (and silently) modified in the middle of a
program. The convention in Java is to use Getters and Setters to allow the outside world access to it (if you want this ability, sometimes denying access it smarter). These also allow you to update multiple things at once, for example if you wanted to update a number and count the amount of times it has been updated. 
&lt;br&gt;
These are usually
produced by your IDE so you don’t have to do it manually.</data></node>
    <node id="#25:4" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The scope of a variable is the brackets in which it is declared and any brackets nested within (this excludes method calls). This means that for loops, if statements and similar all create a new scope.
Each level of scope can repeat all the names of variables once more, to tell them apart the higher scoped variable can be referred to with &apos;this.varName&apos;.

Technically a new inner level of scope can be put arbitrarily within methods but this is inadvisable.</data></node>
    <node id="#25:5" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Classes are like recipes -- they tell you what the end result (an Object) consists of. 
&lt;br&gt;
More formally a class is a collection of related data and methods that can be performed on that data. Simplified a class is a collection of variables and instructions. 
&lt;br&gt;
When we create a concrete implementation of this class we are creating an Object. 
&lt;p&gt;
An &lt;b&gt;abstract&lt;/b&gt; class is a class that cannot be instantiated (ie objects cannot be of this type). These can contain everything a regular class can but also can include abstract methods (methods with no body - and a semicolon in place of the brackets) which will have to be implemented by any child class.</data></node>
    <node id="#25:6" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">This structure can be thought of as an agreement; when a class implements an interface that class is agreeing to implement the methods defined in the interface, but makes no guarantees as to how or whether it will implement additional methods.&lt;br&gt;
A class that implements an interface must implement all methods declared in that interface, or if a class implements multiple interfaces then it must implement all methods declared in all of those interfaces. An interface may contain:&lt;br&gt;
&lt;ul&gt;
  &lt;li&gt;Methods (implicitly public but may also be abstract, static or default)&lt;/li&gt;
  &lt;li&gt; Constant attributes (implicitly public static final)&lt;/li&gt;
&lt;/ul&gt;
These are a very useful form of abstraction in Java. They are used to guarantee methods are available in multiple classes, and are commonly used in APIs. To declare an interface in Java you use the interface keyword in place of where a class would be in a class declaration. By convention these are named with the following rules:&lt;br&gt;
&lt;ul&gt;
  &lt;li&gt;Begin with a capital letter&lt;/li&gt;
  &lt;li&gt;End with the word &apos;Interface&apos;&lt;/li&gt;
&lt;/ul&gt;

There are two small things omitted from above because of their rarity of use, but in Java Interfaces may contain method bodies if the method is static or contains the &apos;Default&apos; keyword in its signature.
&lt;br&gt;
Further Interfaces can be the type of a variable but they cannot be the implementation of a variable. For example &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; is an interface and we are allowed to have &lt;code&gt;List&amp;lt;String&amp;gt; strings;&lt;/code&gt; but we cannot instantiate this list to type &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;.</data></node>
    <node id="#25:7" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A package is a folder of Java classes, interface (and other legal high-level types) that are related to one-another.
&lt;br&gt;
The &lt;b&gt;first&lt;/b&gt; line of any class, interface (or legal type) within a package must be: &lt;code&gt;package nameOfPackage;&lt;/code&gt;.
&lt;br&gt;
Packages may contain other packages (and periods are used in place of slashes, so package1.package2 and not package1/package2).
&lt;br&gt;
To use a class, method, interface (or other) in another package it must be imported using &lt;code&gt;import nameOfPackage; &lt;/code&gt; outside of the class declaration.</data></node>
    <node id="#25:9" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Methods are a sets of instructions that can be carried out upon an object (unless they are static methods which serve a different purpose).
&lt;br&gt;
When we have an Object we use the dot notation to invoke methods upon it: &lt;code&gt;obj.doStuff();&lt;/code&gt;
&lt;br&gt;
We are allowed to invoke methods upon the class itself, but those are covered in our discussion of the &apos;static&apos; keyword.
&lt;br&gt;
Methods themselves may contain other methods or their own variables (these only exist within this method).
&lt;br&gt;
&lt;pre&gt;
public void method(){
	int myInt = 3;
	myOtherMethod(myInt); //This method must exist in the same class
}
If a method exists within the same class we can invoke it without using the dot operator. 
&lt;/pre&gt;
&lt;br&gt;
Methods are also allowed to return values at the end of their execution.
&lt;br&gt;
&lt;pre&gt;
public int double(int a){
	return 2*a;
}
&lt;/pre&gt;
&lt;br&gt;
We are allowed to do this such as:
&lt;br&gt;
&lt;pre&gt;
public void method(){
	int myInt = 72;
	int doubleMyInt = double(myInt); //Will have the value 144
}
&lt;/pre&gt;
&lt;br&gt;
In these examples we have passed values into the methods. A discussion of how they are passed is discussed in Object and Primitive types.
&lt;br&gt;
By passing a parameter we make that parameter within &quot;scope&quot; (ie usable within the method) of the method. In the above examples we passed in an integer, which was then doubled for us. This allows us to use the same method for multiple different values. This means the following is legal (and suggested):
&lt;pre&gt;
public void method(int myFirstInt){
	int mySecondInt = 102;
	int doubleMyFirstInt = double(myFirstInt); //Has value 10
	int doubleMySecondInt = double(mySecondInt) //has value 204
}
&lt;/pre&gt;
If we have an Object which can invoke method we would do it in the following way: &lt;code&gt;obj.method(5);&lt;/code&gt; which would give the value 5 into the method. 
&lt;br&gt;
This dramatically reduces duplicated code, and improves readability.</data></node>
    <node id="#25:10" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The main method is a special method that is ALWAYS executed first. &lt;br&gt;
  &lt;pre&gt;
public static void main(String[] args){
	//Do stuff
}
&lt;/pre&gt;
&lt;br&gt;
This has a parameter which is the array of strings passed into it when it is executed (if executed from command line).
&lt;br&gt;
The maximum of these allowed is 1. 
&lt;br&gt;
Note: In post-Java 8 code you may see String.. args in place of String[] args. This is using variable argument amounts (varargs) and is less specific than String[].</data></node>
    <node id="#25:11" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Variables are able to be thought of as as a box. We are allowed to put things inside the box and we are able to manipulate anything inside the box. 
&lt;p&gt;
Java puts some requirements on the box, firstly we must tell it what it is we want to put in the box (this is the &lt;b&gt;type&lt;/b&gt; of the variable) and secondly we need to tell it what the box will be called (the &lt;b&gt;variable name&lt;/b&gt;). Java allows us in some cases to tell it who we will allow to access the box (the &lt;b&gt;access control modifier&lt;/b&gt;) but this is discussed elsewhere. 
&lt;p&gt;
In more advanced terms: Java is a &lt;i&gt;statically typed language&lt;/i&gt; that means Java must know the type of all variables at compile time. Other programming languages, such as Python, are &lt;i&gt;dynamically typed languages&lt;/i&gt; which means that variables can change their type at runtime. 
&lt;p&gt;
In Java it is good practice to name your variables with &lt;code&gt;camelCase&lt;/code&gt; unless it is a constant when it should be named in &lt;code&gt;ALL_CAPS_WITH_UNDERSCORES&lt;/code&gt;.
&lt;p&gt;
This section will discuss how to create variables, their types and what we can do with them.</data></node>
    <node id="#25:12" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">These are variables of types defined by Java itself (excluding collections and arrays which are reference types), these are the most basic data structures available and we can use them to store basic amounts of data or to construct more complex data structures. 
&lt;br&gt;
These contain data and &lt;b&gt;cannot&lt;/b&gt; have methods invoked upon them using the dot operator. 
&lt;br&gt;
Primitive Types are as follows:
&lt;ul&gt;
&lt;li&gt;byte: 8-bit signed number&lt;/li&gt;
&lt;li&gt;short: 16-bit signed number&lt;/li&gt;
&lt;li&gt;int: 32-bit signed number&lt;/li&gt;
&lt;li&gt;long: 64-bit signed number&lt;/li&gt;
&lt;li&gt;float: 32-bit floating-point number&lt;/li&gt;
&lt;li&gt;double: 64-bit floating-point number&lt;/li&gt;
&lt;li&gt;boolean: 2 states: true or false&lt;/li&gt;
&lt;li&gt;char: 16-bit unsigned number corresponding to a UTF-16 character&lt;/li&gt;
&lt;/ul&gt;
There are no other primitive types.
&lt;br&gt;
Java does not allow for numerical values to be unsigned.
&lt;p&gt;
When a primitive type is passed into a method a new copy is created for use within that method, the original will not be adapted in any way. Which is the opposite to how it is for reference types. Primitive types are passed by value.</data></node>
    <node id="#25:13" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If a variable is not a primitive type then it is a reference type. These are called reference types because the variable itself holds a reference to an Object stored in memory. That is a very important distinction, a reference type variable &lt;b&gt;does NOT&lt;/b&gt; hold an Object itself but a reference to an Object (each Object can have more than 1 pointer to it). What this means is that when we pass an Object into a method we are actually passing the reference so if we update the Object within a method we update the value which ALL  of the references get access to, &lt;b&gt;BUT&lt;/b&gt;  we can update the reference to hold a reference to a new Object without (necessarily) affecting the Object itself. To demonstrate this:
&lt;code&gt;
Fish newlyCaught = new Salmon(30.1);
Fish backUpVariable = newlyCaught;

public static void discardInEdibleParts(Salmon s){
    s.weight -= 1.3;
}
&lt;/code&gt;
Given this set up when we do:
&lt;code&gt;
Salmon.discardInEdibleParts(newlyCaught);
&lt;/code&gt;
This updates the Object that newlyCaught and backUpVariable are pointing to. This means that if we were to access their weight:
&lt;code&gt;
System.out.println(&quot;Var 1: &quot; + newlyCaught.weight + &quot; Var 2: &quot; + backUpVariable.weight);
&lt;/code&gt;
We would get the set answer of &lt;b&gt;28.8&lt;/b&gt; because the Object itself was updated within the method. 
What is happening here is that in Java Objects are passed by reference into methods and not by value (which would create a duplicate Object).
&lt;p&gt;
This has a few side effects, firstly &lt;b&gt;ALL&lt;/b&gt; reference type variables may have the value &lt;b&gt;null&lt;/b&gt; which we may need to check for. Secondly that we cannot use the assignment operator to compare the value of reference types as we could with primitive types since this would check that they are pointing to the same Object and not that the two Objects are equivalent (generally we override isEqual/compareTo for this).
&lt;p&gt;
All user created classes will be stored in Reference types as well as Strings and Arrays.</data></node>
    <node id="#25:14" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Arrays are a reference type data structure built into the language itself. These are similar to a &quot;list&quot; of data of the same type, but the size of this &quot;list&quot; cannot change after it has been declared.
&lt;br&gt;
In Java, like most programming languages, arrays are indexed from 0 and not from 1.
&lt;br&gt;
Arrays can be thought of as pointing to the first item of the array since data will be stored sequentially. This means that arrays can hold pointers to other arrays giving us 2 (or more) dimensional arrays, similar to an array of arrays (but with convenient properties).
&lt;br&gt;
Note that like all reference types using the assignment operator to assign some array equal to another will just copy the pointer to the array and not the array itself. Java has built in &lt;code&gt;deepCopy()&lt;/code&gt; method for making one array be an exact copy of another.
&lt;p&gt;
There is 1 thing that is not immediately obvious. An Array of Objects holds a list of references to Objects and not the Objects themselves! Care should be taken when using mutable types in Arrays.</data></node>
    <node id="#25:15" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Strings are a special case of reference type. They are built into the language itself and get special properties because of that, but otherwise they are the same as all other reference types (can have null value, can invoke methods etc.).
&lt;br&gt;
Strings are similar to an array of characters. The only small difference is that Strings are immutable which means they cannot be updated after they have been initialised. Fortunately the compiler will handle String concatenation and updating in a special manner for you, but often it might be worth using a StringBuilder instead of many concatenations.</data></node>
    <node id="#25:16" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Other than the access control modifiers Java has a few other variable modifying keywords. The most common are:
&lt;ul&gt;
&lt;li&gt;final&lt;/li&gt;
&lt;li&gt;abstract&lt;/li&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

These go before the type.</data></node>
    <node id="#25:17" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">JavaDoc is a built-in form of documentation for the Java programming language. This is partially responsible for Java&apos;s popularity since its inception, unlike most other programming languages Java does not separate commenting from its code.
&lt;br&gt;
The common and most used of its keywords are:
&lt;ul&gt;
  &lt;li&gt;@author - tells you who wrote it&lt;/li&gt;
  &lt;li&gt;@date - when it was written&lt;/li&gt;
  &lt;li&gt;@param - what and why a parameter is required&lt;/li&gt;
  &lt;li&gt;@return - what is returned from the method&lt;/li&gt;
&lt;/ul&gt;
There are many others.
&lt;br&gt;
JavaDoc can be applied to anything in Java including classes, interfaces, methods and fields. All JavaDoc comments begin with /** and end with */.
&lt;br&gt;
Note: This is different from a multi-line comment which is /* */.</data></node>
    <node id="#25:18" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Comments that are not public facing (non-JavaDoc) should only explain complicated and non-obvious parts of your code. They should be used to understand how and why something is done in the manner that it is done in. 
These are done to make it easier to understand what is happening in the program, and to help maintain your code if you were working as part of a team.
&lt;br&gt;
Singe line comments:&lt;code&gt; //Comment here&lt;/code&gt;&lt;br&gt;
Multiple line comments: &lt;code&gt;/* Comment here */&lt;/code&gt;&lt;br&gt;
JavaDoc: &lt;code&gt;/** JavaDoc here */&lt;/code&gt;</data></node>
    <node id="#25:19" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The ultimate aim of programming is to create a high-quality and easily maintainable product that works. This means that your code must be easy to understand.
&lt;br&gt;
A few general rules are:
&lt;ol&gt;
 &lt;li&gt; Avoid single-letter variables unless for loops&lt;/li&gt;
  &lt;li&gt;Maintain a consist naming convention&lt;/li&gt;
  &lt;li&gt;Make methods&apos; names specific and make methods do only one thing&lt;/li&gt;
 &lt;li&gt;Do Not Repeat Yourself (DRY) -- abstract out detail!&lt;/li&gt;
 &lt;li&gt; Have appropriate commenting and use JavaDocs!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The best code is often the most understandable code. Yet sadly there is no list of things to do and things to avoid, but your could should be as understandable as possible.</data></node>
    <node id="#25:20" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Java is compiled down to Java Byte Code which will be interprted by the JVM (Java Virtual Machine) which will then be executed on your computer. This forms
the basis for Java&apos;s &quot;Write once, run everywhere&quot; paradigm.
&lt;br&gt;
Java is not the only programming language that compiles to Java Byte Code, other examples include Groovy and Kotlin.</data></node>
    <node id="#25:21" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The constructor is a special kind of method invoked when an object is instantiated (created). This is used to reserve enough memory for the entire object and to optionally assign default values to its members.
Constructors must have the same name as class itself. 
&lt;br&gt;
Classes generally have an implicit no args constructor (this excludes subclasses).</data></node>
    <node id="#25:22" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Inheritance is a fundamental concept in OOP. It allows you to minimise duplicated code by allow classes that are similar to share code and data structures from one to another. 
&lt;p&gt;
Java does this using the &lt;code&gt;extends&lt;/code&gt; keyword. That is to say a subclass extends a superclass. The subclass inherits methods and data structures from the superclass - the subclass is an extension of the superclass.
&lt;p&gt;
In Java all classes implicitly extend the &lt;code&gt;Object&lt;/code&gt; class, and we are limited to extending at most 1 superclass per class (excluding Object).
&lt;br&gt;
We are allowed to chain inheritance. If we have the following classes: Animal, Person, Student then Person can inherit from Animal, and Student can inherit from Person. This means that any methods in Animal are also in Person.
&lt;p&gt;
In the subclass we have all non-private methods and fields (excluding constructors) from the superclass which can be treated as if they were in the subclass too.
&lt;p&gt;
Finally a class that is declared &lt;b&gt;final&lt;/b&gt; cannot have any subclasses - it is the final class in its hierarchy.</data></node>
    <node id="#25:23" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">When we have a method in a superclass we may wish for it to operate slightly different in our subclass, a common example of this is &lt;code&gt;toString()&lt;/code&gt; from java.lang.Object. This is called Overriding. 
&lt;br&gt;
We create a more precise version of the method in the subclass and this will be the method invoked by that name.
&lt;br&gt;
Some rules do apply: we are not allowed to override the same method twice in one class (as normal we cannot have duplicate method signatures) and we cannot change its return type or parameters (if we do this creates a new method and may cause errors if done incorrectly).
&lt;br&gt;
N.B: Often we denoted methods we override with the annotation &lt;code&gt;@Override&lt;/code&gt;, you do not need to do this, but many people do.</data></node>
    <node id="#25:24" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The for loop is used to repeat a section of code a fixed number of times. This can also be used to iterate over a data structure in the Collections framework or an array as an enhanced for loop. The for statement consists of three parts in parenthesise separated by semi-colons:
&lt;ol&gt;
&lt;li&gt;variable to iterate over&lt;/li&gt;
&lt;li&gt;the termination condition&lt;/li&gt;
&lt;li&gt;the action to be performed on that variable at the end of each time around the loop&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
Followed by the section of code to be performed at each new value surrounded by normal code block parenthesis.
By convention the variable is usually a single letter i but any otherwise legal name will compile.
&lt;br&gt;
These are incredibly useful for iterating over a collection (in a for each loop) or when you need to iterate for a known number of times (such as 10, 15, 2*n etc.).
&lt;br&gt;
&lt;br&gt;
&lt;b&gt; For Each Loop &lt;/b&gt;
&lt;br&gt;
The &apos;For Each&apos; loop in Java is an extension of the &apos;For&apos; loop. 
It is used when we wish to iterate through each element of a data structure and do not care for its position in the data structure.
&lt;br&gt;
This will only work for data structures that implement the Iterable interface (which is all Java Collections and Arrays), plus you can design it to work for any custom data structures.</data></node>
    <node id="#25:25" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A while loop is used to repeat a section of code 0 or more times until a certain condition is met. A while loop consists of the while keyword followed by a parenthesis containing the condition to be checked and the code in normal code brackets afterwards. This condition is checked &lt;b&gt;before&lt;/b&gt; each execution of the while loop.
&lt;br&gt;
These are useful when you need to loop until a certain condition is met which could occur arbitrarily.</data></node>
    <node id="#25:26" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A while loop is used to repeat a section of code 1 or more times until a certain condition is met. In contrast to both a for loop and a do while loop.
A do while loop consists of the do keyword followed the code to be executed in normal code brackets immediately followed by a parenthesis containing the condition to be checked ending with a semi-colon. This condition will be checked at the &lt;b&gt;end&lt;/b&gt; of each execution of the code.</data></node>
    <node id="#25:27" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The If-statement is used to execute a certain section of code &lt;b&gt;if&lt;/b&gt; a specific logical expression resolves to true.
These consist of the &lt;pre&gt;if&lt;/pre&gt; keyword followed by parenthesis containing the &lt;b&gt;logic&lt;/b&gt; to be evaluated and then the code to execute if it all resolves to true.
&lt;br&gt;
For this it is important to not confused &apos;resolves to true&apos; from true. If x = 3, then &quot;x not equal 5&quot; would resolve to true despite x = 5 being false because it is &lt;b&gt;true&lt;/b&gt; to say that 3 does not equal 5. 
&lt;br&gt;
The &apos;else&apos; statement after the closing parenthesis is used to execute an alternate section of code if the conditional is resolved to false. These typically go directly after the closing parenthesis to avoid errors but technically do not have to.
&lt;br&gt;
Anything can go after an else statement, but if it is not a code block then it is usually another &apos;if statement&apos; which forms an &lt;pre&gt;else if&lt;/pre&gt; statement.</data></node>
    <node id="#25:28" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Anything can go after an else statement, but if it is not a code block then it is usually another &apos;if statement&apos;.</data></node>
    <node id="#25:29" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Switch and case are used to avoid having incredibly larger and complex if and else if statements.
Their strength is when you have a variable that can be a larger amount of exact values.
&lt;br&gt;
Further its syntax is very simple; &lt;code&gt;switch(var){ case val: //do stuff} &lt;/code&gt;with only a few additional things to be noted.
&lt;br&gt;
Firstly that &apos;default&apos; is a reserved label which is to be executed if no other label is correct.
&lt;br&gt;
Secondly that the value must resolve to an exact value and not a range (there are ways to circumvent this but they are not very maintainable and readable).
&lt;br&gt;
Thirdly that each label must end with a &lt;code&gt;break;&lt;/code&gt; to prevent a follow through (unless you want this behaviour).</data></node>
    <node id="#25:30" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Java programs are not always executed linearly because of logic structures and method invoking. This can make programs execute differently from expected.
&lt;br&gt;
There are also two special keywords that can be integrated into loops if they are useful:
&lt;br&gt;
&lt;code&gt;break&lt;/code&gt; This will break you out of the loop you are in, but only the loop you are in (ie will not break out of nested loops, only the loop it is stated in).
&lt;br&gt;
&lt;code&gt;continue&lt;/code&gt; This will finish this iteration immediately and move onto the next iteration without doing any code after it. These are implicit at the last line of a for loop but can be added elsewhere.</data></node>
    <node id="#25:31" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">JUnit is an automated unt-testing framework for Java programs. This will allow you to design tests for your methods individually and the programs as a whole which will be executed by JUnit. This allows you to easily
rerun tests when a method is modified to ensure it still works.
&lt;br&gt;
It is good practice to put all JUnit tests in their own class.
JUnit tests should:
&lt;br&gt;
&lt;ol&gt;
 &lt;li&gt;Have @test before the method declaration&lt;/li&gt;
  &lt;li&gt;Test ONLY ONE THING&lt;/li&gt;
 &lt;li&gt;Be independent of each other, and the environment&lt;/li&gt;
&lt;li&gt;Have no parameters&lt;/li&gt;
&lt;/ol&gt;
JUnit is incredibly useful and flexible, more so than is demonstrated here. It is an incredibly useful and powerful tool and it is advised to be used as it will dramatically simplify testing of your program.</data></node>
    <node id="#25:32" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Null is a special value that all reference types can have. This includes Strings and entries to Arrays of Objects (and the Arrays themselves). It means that not value is affiliated with a variable, not that the result is none. 
&lt;p&gt;
Think of it like this: Who is the President of Britain? This would yield a &lt;b&gt;null&lt;/b&gt; result because it doesn&apos;t make sense to ask who is the President of Britain since it isn&apos;t a presidential system.
But it does make sense to ask who is the President of France since France is a semi-presidential republic.
&lt;p&gt;
Null values introduce a common source of errors in programs (NullPointerExceptions) since you cannot deference a null value (this means you cannot manipulate it in any way such as accessing a value or invoking a method).
&lt;p&gt;
Nulls are not &quot;none&quot; but that &quot;asking for a value doesn&apos;t make any sense&quot; because no value exists in the location you are accessing.</data></node>
    <node id="#25:33" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In Java the following are Logical Operators:
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&gt;&lt;/td&gt;&lt;td&gt;Greater Than&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&lt;/td&gt;&lt;td&gt;Less Than&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;=&lt;&lt;/td&gt;&lt;td&gt;Equal to or less than&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&gt;= &lt;/td&gt;&lt;td&gt;Greater than or equal to&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;== &lt;/td&gt;&lt;td&gt;Equal to&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;!= &lt;/td&gt;&lt;td&gt;Not Equal to&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;&amp; &lt;/td&gt;&lt;td&gt;AND&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;|| &lt;/td&gt;&lt;td&gt;OR&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</data></node>
    <node id="#25:34" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">When we discussed reference types we discussed that these variables hold a reference to an Object. What this means is that we cannot use the comparison operator to compare that two objects are equal, all we can test using it is if two reference variables point to the exact same object.
&lt;p&gt;
If we want to compare that two objects are semantically equal we need to implement our own &lt;code&gt;equals()&lt;/code&gt; or &lt;code&gt;deepEquals()&lt;/code&gt; method (or &lt;code&gt;compareTo()&lt;/code&gt;). Built in Java objects have these already done for us.</data></node>
    <node id="#25:35" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Type Coercion (or Type Casting) is when you coerce a variable into pretending it is of another type. This is like putting duck eggs in a box for eggs - it&apos;s not strictly wrong to consider duck eggs as eggs but it is probably not why we have a box of eggs. 
&lt;p&gt;
This is a complicated topic with a few edges cases but it breaks down to:
&lt;p&gt; &lt;b&gt;1. We cannot gain information doing coercion&lt;/b&gt; 
&lt;p&gt; &lt;b&gt;2. Objects can only be coerced to a super type&lt;/b&gt;
&lt;p&gt; &lt;b&gt;3. Primitives can only be coerced to a similar type&lt;/b&gt; e.g: we can coerce a double to an int. 
&lt;p&gt;&lt;b&gt;4. There are two major types of coercion: Implicit and Explicit&lt;/b&gt;

We should consider these each individually.&lt;p&gt;
&lt;b&gt;1&lt;/b&gt;  We can round 5.1 to 5 but we cannot round 5 to 5.1 because we don&apos;t know if 5 is equivalent to 5.1, but we can unsafely round 5 to 5.0. For example:
&lt;code&gt;
int a = 5;
double b = 5.1;
int c = (int)b;
&lt;/code&gt;
At the end of this the variable c will have the value 5 since 5.1 is truncated to 5. Generally speaking this type of coercion is frowned upon unless absolutely necessary. 
&lt;p&gt;
&lt;b&gt;2&lt;/b&gt;  Consider the following situation we have a class Animal which has a subclasses Person and Dolphin. We are allowed to consider all Persons as Animals and all Dolphins as Animals too, but we cannot think of Persons as Dolphins. 
&lt;code&gt;
Person p = new Person();
Dolphin d = new Dolphin();
Animal a = p;
Animal b = d;
&lt;/code&gt;
This means we can consider these as Animals.
&lt;b&gt;Warning: This is closely related to Late Binding and the methods may not be as you expect them to be.&lt;/b&gt;
&lt;p&gt;
&lt;b&gt;3&lt;/b&gt; A String (even one that contains just a number) cannot be cast to an int, it doesn&apos;t make sense. What if it didn&apos;t just contain a number? We can cast an int to a string though.
&lt;code&gt;
int a = 5;
System.out.println(&quot;The message: &quot;+ a);
&lt;/code&gt;
&lt;p&gt;
&lt;b&gt;4&lt;/b&gt; Explicit coercion is when we state the new type we want it to be,  Implicit is when we let the compiler guess - most IDEs will complain about this. The example in 1 is explicit, and the example in 2 is implicit.</data></node>
    <node id="#25:36" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Late Binding is very closely related to both Type Coercion and Polymorphism.
&lt;br&gt;
Late Binding is a mechanism whereby the methods executed are decided at runtime, which might seem confusing since object types are declared at compile time. The compiler needs to know that a method exists but does not need to know what it does, where-as at runtime what the method does is very important. 
&lt;br&gt;
In Java the compiler will always invoke the most precise method it can, ie it will also invoke the method that is &apos;closest&apos; (in the inheritance hierarchy) to the type of object, regardless of what type it is declared as.</data></node>
    <node id="#25:37" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The instantiation type of a reference type may be different from the type that the variable is declared as, the object may be of any type which is a subclass of the type it is declared as.
&lt;br&gt;
This means a variable can actually be of one type but treated as if it was another type.</data></node>
    <node id="#25:38" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Libraries can be thought of as a guarantee between the library (the collection of methods accessible within your program when imported) creator and you. They agree that there are certain functions that will do certain things but will not tell you how they are done (generally how they are done is unimportant to you).
&lt;br&gt;
Common libraries include: Numpy, Matplotlib, Pylab, but there are hundreds of others which do a wide range of things including BeautifulSoup4 and nose.
&lt;br&gt;
These are often pre-installed for you if you are using Anaconda, but if you are not you may need to look into Python&apos;s &lt;a href=&quot;https://virtualenv.pypa.io/en/stable/&quot;&gt;virtualenv&lt;/a&gt;.</data></node>
    <node id="#25:39" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A function&apos;s arguments are the parameters that must be &quot;passed in&quot; (stated in the parenthesis when invoked). This is incredibly useful as it is more secure and flexible to have parameters passed in rather than relying on global variables. 
&lt;br&gt;
The basics are that the function&apos;s arguments must be declared in the function declaration in the parenthesis after the function name separated by commas. These are the names that they will be referred to as within that function and should be obvious what they are and what they do (eg: do not use &apos;a&apos; but instead &apos;names&apos; or &apos;list_of_names&apos;). When the function is invoked the arguments must be given in the parenthesis where it is invoked in order - note that at this point they may be called ANYTHING, but will be referred to as the names given in the function definition within the function itself.  
&lt;br&gt;
For an even more advanced user, Python has two types of arguments: required and optional. Optional arguments have their default value given in the function declaration using the normal assignment operator. It is also worth noting that in many functions you will see &apos;*args&apos; or &apos;**kwargs&apos; these are another sort of optional arguments but are signifying that the function can have an arbitrary amount of arguments.</data></node>
    <node id="#25:40" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Python implements all the expected forms of arithmetic:
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;Addition&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;Subtraction&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;Multiplication&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/&lt;/td&gt;&lt;td&gt;Division&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;**&lt;/td&gt;&lt;td&gt;Exponentation (eg: 2**3 = 8)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;%&lt;/td&gt;&lt;td&gt;Modulo&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;br&gt;
There are many APIs such as Numpy that can do more complex mathematics.</data></node>
    <node id="#25:41" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Booleans are special values: True or False. Observe that True and False are distinct from the Strings &quot;True&quot; and &quot;False&quot;; booleans are specially built into the language and are treated differently.</data></node>
    <node id="#25:42" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Comments are code that are ignored when the program is running. Comments should be used to explain why something is done which should make it easier for you to edit at a later date, for anyone marking your work or if this was a team project for other people to change and maintain your code.
&lt;br&gt;
In Python these are denoted by either: &quot;#&quot; for single line comments or &quot;&apos;&apos;&apos;&quot; (triple quotes) for multi-line comments. 
&lt;br&gt;
It is also good practice to explain what all of your methods do directly after the method declaration in a multiline comment, as well as giving any useful information for someone to maintain your program.
&lt;br&gt;
Comments can be added anywhere in your program and will be ignored at runtime.</data></node>
    <node id="#25:43" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Programming languages have conventions to make it easier for programmers to work together and for it to be easier for programs to be maintained.
These are effectively &quot;rules&quot; that all Python programmers agree to follow to make it easier for each other. You are not obligated to follow these rules but it is generally frowned upon to not follow these rules.
&lt;br&gt;
Some of the rules are as follows:
&lt;ul&gt;
 &lt;li&gt;Give useful variable names, eg: max_cars as opposed to var1 (exception being in very small scope, see Iterable for more)&lt;/li&gt;
 &lt;li&gt;Name variables consistently, generally camelCase or names_with_underscores (latter is preferred for Python generally)&lt;/li&gt;
&lt;li&gt; Name methods consistently, generally names_with_underscores is used&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
There are many others, but the main thing is to have one rule and apply it consistently.</data></node>
    <node id="#25:44" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Don&apos;t Repeat Yourself (DRY). DRY is a programming design principle that cautions against re-typing code and to replace it by function definitions. The real strength of this approach is that it is significantly easier to maintain - if you need to adjust code you only need to adjust it once in the function and it will automatically update all instances of its usage, but it also makes your programs significantly easier to read: a function name, such as get_largest_value(list), is easier to understand what it does. 
If you find yourself repeating code or, worse, copying and pasting code you have to ask yourself &quot;why?&quot; and &quot;can I make this its own method?&quot;.</data></node>
    <node id="#25:45" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;code&gt;elif &lt;/code&gt;(Else-if) is a keyword that is attached (typically) after an if-statement. It is a contraction of the &apos;else if (...):&apos; syntax.</data></node>
    <node id="#25:46" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Exception are a way to handle when something goes wrong. If we accidentally divide a String by an integer then we might want it to tell us we made a mistake and not crash the program, this is where Exceptions are used. Whenever an error that would crash the program occurs Python will generate an exception (called &apos;throwing an exception&apos;) which we are allowed to monitor for and active specific code when it occurs. 
&lt;br&gt;
We surround any code that we thing might cause an error with a &quot;try:&quot; block, and indent any code we thing may have an error that will occur. 
We then &quot;catch&quot; our error with an &lt;code&gt;except Exception as e:&lt;/code&gt; which will be executed when an error occurs. Normal scoping rules apply. 
Exception will catch all exceptions so it is generally good practice to narrow it down a little more. &lt;b&gt;Generally avoid catching &quot;Exception&quot; but narrow it down, eg TypeError&lt;/code&gt;</data></node>
    <node id="#25:47" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Files are an incredibly useful tool for storing data across multiple executions. Python makes it incredibly easy to both read, and write to files using the same function &apos;open&apos;, and allows you to assign them as a normal(ish) variable.</data></node>
    <node id="#25:48" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Loops in Python and incredibly powerful and useful, and I would strongly recommend reading in-depth on them. By using loops properly you can speed up your program significantly and  write cleaner and more beautiful code.  
&lt;p&gt;
At the simplest level a for loop is a repeat of a &apos;block&apos; of code a known amount of times. 
&lt;p&gt;
For example we could want to print an message several times or we could want to update many items in a list. 
&lt;p&gt; 
Python allows us surprisingly many ways to do this. A particularly useful variant is what would typically be called the &apos;for each&apos; loop; this allows us to iterate over every value in a data structure. This can be interpreted as &apos;for each item in our data structure&apos;.</data></node>
    <node id="#25:49" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Functions are blocks of code that may be executed many times during the runtime of the program, potentially with different inputs. They can be thought of as being very similar to mathematical functions. 
&lt;br&gt;
They consist of the keyword &apos;def&apos; followed by a name that the function is to be called, any required inputs in parenthesis separated by commas, and finally a colon to signify the block of code that the function should execute when invoked (used).
&lt;br&gt;
This code inside the function must be indented one more time than the function definition. 
Functions are easy to invoke, simply type the name of the function with any required inputs in parenthesis after it, at any point in the program after where the function is declared.  
Python, like most programming languages, comes packed with hundreds of functions built into its Standard Library that you are advised to used whenever appropriate rather than re-inventing the wheel.  
&lt;br&gt;
Often the term &quot;method&quot; is used. The difference being that methods are functions that are built into a class and are invoked using Object-Orientated programming paradigms.</data></node>
    <node id="#25:50" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The if keyword is used to execute a certain section of code if a logical expression resolves to true, and potentially other code if false. This is very subtle language, for example if we let our x = 5 and computed &quot;x is not 6&quot; this is true, since 5 is not equal to 6. The logical operators are very conveniently close to natural English. Further we are allowed to chain many conditions using other keywords which are &quot;and&quot;, and &quot;or&quot;. 
&lt;br&gt;
These can be read as normal English. &lt;code&gt;&quot;if [variable] is [condition]: [code to execute]&quot;.&lt;/code&gt;
&lt;br&gt;
All the same logical operators hold in if statements as they do everywhere else in Python, but do recall that after each conjunctive (ie each part separated by an and, or, or not) you need to restate what variable you are referring to.
&lt;br&gt;
Inside the code executed by the if we can put other if statements (although this might be best suited to a switch statement) or at a the same indent level we can put an else statement which is a block of code to be executed if the first block is not executed (ie if the expression resolves to false).</data></node>
    <node id="#25:51" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In Python your methods can only access methods and variables stored in the same file as it is, but you are able to tell Python at runtime to go get methods (and variables) from another file (called a library typically) and pretend they are in your current file.
&lt;br&gt;
This is using the &apos;import&apos; keyword.
&lt;br&gt;
Often the keyword &lt;code&gt;as&lt;/code&gt; is used. This is to make clear where the methods are coming from and improve readability.</data></node>
    <node id="#25:52" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Lists are a very useful and common data structure in Python. They hold a list of many (0 or more) data structures (ie you can have an Integer and a String in the same list but this is often a bad idea) including other lists. These are declared the same was any other variable (recall that variables do not have types themselves, but the data they hold do): &lt;code&gt;list_name = [notice,the,brackets]&lt;/code&gt;
&lt;br&gt;
Lists are like regular lists, items get added to the end  by default. In other languages these are very similar to ArrayLists (such as in Java or C#). 
&lt;p&gt;
There are many operations they can be operated on lists (lists are objects), such as append or remove. 
&lt;p&gt;
They also have special syntax to allow easy manipulation of lists, there are also incredibly powerful and useful methods, syntax and occurrences with lists they are omitted here but may be worth reading about in the resources section.
&lt;p&gt;
List are incredibly powerful and flexible data structure that allows random (non-sequential) access, not to be confused with Linked Lists which do not allow non-sequential access (and are not discussed here).  
&lt;p&gt;
&lt;b&gt;Note: The first element of a list is element number 0, not number 1 as may be expected.&lt;/b&gt;</data></node>
    <node id="#25:53" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Python is very unique in that it allows for its code logic to follow very similar to English, but does allow more formal logic to be applied if preferred.
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;not	&lt;/td&gt;&lt;td&gt;negate&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;is&lt;/td&gt;&lt;td&gt;equal (identity, eg are these LITERALLY the same thing)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;and&lt;/td&gt;&lt;td&gt; both parts are true&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;or&lt;/td&gt;&lt;td&gt;either part is true&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;==&lt;/td&gt;&lt;td&gt;equal for non-objects such as numbers (equality, eg are these the same value)/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;!= &lt;/td&gt;&lt;td&gt;not-equal for non-objects&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;br&gt;	
In addition to this any non-zero number is considered to be &quot;True&quot; and zero is considered to be &quot;False&quot;.</data></node>
    <node id="#25:54" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Magic Constants (or manifest variables) values that are repeated but not stored in a single location. More specifically these are values that are derived from the same starting location by the same steps.</data></node>
    <node id="#25:55" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Matplotlib is one of the many graphing libraries for Python. It is especially popular because of its PyPlot module.</data></node>
    <node id="#25:56" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">None is a special data type built into Python itself. It means that there is no value currently being stored at this variable.
&lt;p&gt;
Think of it like this: Who is the President of Britain? This would yield a &lt;b&gt;None&lt;/b&gt; result because it doesn&apos;t make sense to ask who is the President of Britain since it isn&apos;t a presidential system. But it does make sense to ask who is the President of France since France is a semi-presidential republic.
&lt;p&gt;
Any variable may be None, and we cannot invoke methods upon them without creating an exception.</data></node>
    <node id="#25:57" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Numpy is a library that is part of the SciPY group of libraries. It offers a wide range of mathematical functions not offered by Python&apos;s standard library. 
&lt;br&gt;
This library makes extensive use of Numpy arrays (despite arrays not being supported in Python) which are created using numpy.array(...).
&lt;br&gt;
Like all libraries it must be imported into Python first using: import numpy (or equivalent).</data></node>
    <node id="#25:58" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">OO (or OOP) is Object-Oriented programming, a programming paradigm that Python allows you to incorporate.
&lt;br&gt; 
The concept is that all data and methods are stored in a single thing, called an Object, to which you can invoke the methods upon to change the data. Python generally does not make extensive use of this, but occasionally you will have to manipulate Objects.
&lt;br&gt;
A method is invoked using &quot;object_variable.method_name()&quot;, and variables (attributes) can be accessed using &quot;object_variable.attribute_name&quot;.</data></node>
    <node id="#25:59" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Python makes it very easy to output text to the standard output (the terminal where the program is running).
&lt;br&gt;
The basis of it is: &lt;code&gt;print &quot;Text to print here&quot;&lt;/code&gt;
&lt;br&gt;
You can insert variables into the output:
&lt;pre&gt;
score = 5
print &quot;Your score is:&quot;, score #Outputs &quot;Your score is: 5&quot;
&lt;/pre&gt;
For more complex expressions it is better to use a more sophisticated syntax (called formatters in Python):
&lt;pre&gt;
  score = 5
  lives = 0
  bonus = 3
  print &quot;Your score is: %d. You now have %d lives, but you get %d bonus points!&quot; %(score, lives, bonus) #Outputs &quot;Your score is: 5. You now have 0 lives, but you get 3 bonus points!&quot;
&lt;/pre&gt;
&lt;br&gt;
In Python 3 and above you may see print(&quot;text here&quot;) instead, but this will not work on Python 2.7.  Additionally if you are running Python 3.1 or above (which may not be released yet) the &lt;code&gt;%s&lt;/code&gt; method of formatting will no longer work.</data></node>
    <node id="#25:60" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Python at its core focuses on being simple, but having a good appreciation of this simplicity will help you become a better programmer.
&lt;br&gt;
Python has always been an interpreted program, in layperson&apos;s language this means that the program is converted to machine instructions as it is ran and not before it is ran like most programs you would be familiar with.
&lt;br&gt;
This is done to give the programmer a great degree of flexibility and freedom, but does come at a cost of its performance (although this has typically not to be concerned about).
Hence why the decision was made to have Python be a dynamically typed programming language, this means that the &quot;type&quot; of things are discovered at runtime; this is covered further in variables.
Further it aims to incorporate many styles of programming, giving you the ability to solve problems in an Object-oreintated manner, a functional manner or a declarative manner.
&lt;br&gt;
Unlike in most languages, Python indentations are incredibly important, in fact having the wrong level of indentation in code may stop it from working correctly. After each &apos;:&apos; the indentation should move inwards until you wish to end that block, which is done by entering code on the subsequent lines with the indentation being moved outwards. This may be better explained with examples where it is used.</data></node>
    <node id="#25:61" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A recursive function is a function that invokes itself. These are very common in sorting algorithms but can be used anywhere.</data></node>
    <node id="#25:62" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Functions would be useless if all we could do is invoke them and print data to screen - what if we wanted to use a value calculated by it elsewhere? What if we want a function to terminate early when a certain value is reached? This is where the return value is incredibly useful; it is used to send a value back when the function terminates. It is important to note that whilst you can return  multiple values (in a tuple) you cannot return more than once as the function execution will terminate upon reaching a return (as opposed to at the end of its code as normal).
No other changes are needed to the function.</data></node>
    <node id="#25:63" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">It is very important to test both your program and the methods therein the ensure they are functioning as expected and without any flaws unbeknownst to you. 
&lt;br&gt;
This can range from testing with some data as you are developing your program, to unit testing using unittest or nose, or even to continuous integration testing.
&lt;br&gt;
There is a section on testing in the &lt;b&gt;Program Concepts&lt;/b&gt; section of this resource.</data></node>
    <node id="#25:64" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Tuples are an incredibly common data structure in Python. Tuples at a very basic level are just immutable lists (ie they cannot be edited after their creation). Their strength comes from being able to group together common data and also in returning multiple values from a function.
&lt;br&gt;
Tuples can be &quot;unpacked&quot; which means to assign to a variable each part of a tuple.</data></node>
    <node id="#25:66" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">We can gather input from the user at runtime using the raw_input function.
&lt;br&gt;
It is generally good practice not  to blindly trust that the user will not enter wrong or malicious data.</data></node>
    <node id="#25:67" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Variables in Python should be thought of as the computer guaranteeing you a box; you have full control over what goes in the box, but if you tell someone you have a box of chocolates and actually have a box of scorpions they might be very upset with you.
&lt;br&gt;
In formal language it is because Python is a dynamically typed programming language, this means that the &apos;types&apos; of  variables (what is in the box) is determined whilst the programming is being ran and not before it.
&lt;br&gt;
These are declared very easily and just by giving them a name and a value, as illustrated below.</data></node>
    <node id="#25:68" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The &apos;scope&apos; of a variable refers to how long it is stored in memory for. Variables can be split into two types: Global and Local.
&lt;br&gt;
&lt;em&gt;Global variables&lt;/em&gt; exist everywhere within the file they are declared in, this means they can be used in any method or in any part of this program.
&lt;br&gt;
Where-as &lt;em&gt;local variables&lt;/em&gt;, variables declared in an indented section only exist within that method and can only be accessed from within that method. These cease to exist at the end of that method&apos;s invocation.
Indentation is also used to define the scope of variables... Each indentation level creates its own scope, so a variable created from within a method, for loop, while loop, if statement, etc., can only be accessed from within that construct and not elsewhere.</data></node>
    <node id="#25:69" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label"></data><data key="Body">While statements are used to repeat a block of code indefinitely until a specific condition is met. This is in contrast to for loops which iterate for a fixed number of times, hence why while loops are used predominately when you do not know how many times you are required to loop for.
&lt;br&gt;
This means that while loops are better for looping an unknown amount of times, but for loops are better for iterating over data structures and when the number of iterations is fixed. 
&lt;br&gt;
&lt;br&gt;
While loops are of the format:
&lt;pre&gt;
while condition:
	#code to repeat indented once
#this code is outside of the while loop
&lt;/pre&gt;</data></node>
    <node id="#25:70" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The Java Collections Framework (found in &lt;code&gt;java.util&lt;/code&gt;) is a framework which describes almost all data structures that you may require, each with a myriad of different properties. These have been specifically designed by teams of experts so operate (for the most part) far more efficiently than a custom made one would. 
&lt;br&gt;
These guarantee that where applicable all the collections will contain specific methods, such as a binary search or conversion to another type. 
&lt;br&gt;
The strength of collections is that you have an interface of methods that all data structures will implement. This gives you a lot of flexibility in implementing your programs. 
&lt;br&gt;
Care should be taken with mutable types in collections, because much like Arrays of Objects these hold the reference to the Object itself and not the actual Object.
&lt;p&gt;
Further note that you can only have reference types in the Java Collections Framework.</data></node>
    <node id="#25:71" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">An Array List is very similar to an array, it has all the same properties with one caveat: it is not fixed size.
&lt;br&gt;
Java&apos;s ArrayLists can be initialised to a specific size and then expand as necessary, but these never take up less space than their array equivalent. Once declared elements can be added and removed at will. 
&lt;br&gt;
ArrayLists are incredibly useful when you require random access to an expanding data set, otherwise Arrays are better if you have a fixed number of elements because of their additional safety.
&lt;p&gt;
ArrayLists are amortised to O(1) by doubling their size each time you reach the limit.</data></node>
    <node id="#25:72" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A &apos;LinkedList&apos; is a list like data structure where you can only move in one direction through the list, ie you have sequential and not random access. The advantages of a LinkedList is that adding data to this structure is very quick and efficient, although this comes as the cost of slow traversal if you need &apos;random&apos; access. It can be costly and slow to add to anywhere not the beginning or the end so ensuring a sorted LinkedList can be very inefficient. 
&lt;p&gt;
This is best for when lots of data needs to be continually added, with rare access to the data and preferably sequential access to the data needed. 
&lt;p&gt;
Very similar to the LinkedList is the Doubly-LinkedList which allows to traverse both directions (forward and backwards) is otherwise the exact same as a LinkedList but takes up more memory.
&lt;p&gt;
Confusingly all LinkedLists in Java are Doubly-LinkedLists.
&lt;p&gt;
LinkedLists give O(1) addition and deletion if you already have where it should be added, but otherwise O(n). They give O(n) traversal, and take up O(n) space.</data></node>
    <node id="#25:73" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Maps in Java allow to you locate a specific &lt;b&gt;value&lt;/b&gt; from a given &lt;b&gt;key&lt;/b&gt;. In many other languages this is called a dictionary.  Each key can only map to &lt;b&gt;1&lt;/b&gt; value.
&lt;p&gt;
Once again this is an interface and the most commonly used implementation is a Hashtable that allows very efficient looks ups (formally O(1) average with O(n) worst case when you have a lot of collisions). 
&lt;p&gt;
Formally this forms a function mapping an input value to an output key.</data></node>
    <node id="#25:74" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Unsurprisingly Java Sets are equivalent to mathematical sets, this means we are not allowed to have any duplicate elements.
As expected these are good for representing mathematical sets.
&lt;p&gt;
When using mutable types (such as Objects) it is important to note that these Objects will have their &lt;code&gt;equals()&lt;/code&gt; method invoked. This means you cannot have two Objects that are the same but have different references. 
&lt;p&gt;
This also means that there is some undefined behaviour when a mutable type gets updated to equal another element in the set. Generally if this may happen it is not a Set you are looking for. 
Further, Sets cannot contains themselves, but can contain other Sets. 
&lt;p&gt;
The Java Collections Framework defines Sets as an &lt;b&gt;Interface&lt;/b&gt; which means you cannot have it instantiated, but there are many different Sets implementing this Interface such as TreeSet (ordered set) and HashSet (unordered set). For most purposes one of these two will work.
&lt;p&gt;</data></node>
    <node id="#25:75" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Arrays are allowed to contain other arrays of arbitrary length.
Note that when you use the assignment operator (&apos;=&apos;) to copy an array you are not copying the array but copying the pointer to the array in memory. 
&lt;br&gt;
You would need to use (or design) an appropriate deep-copy method to copy the values of the array and not the array itself.</data></node>
    <node id="#25:76" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Software that does not work as expected is rather useless, thus why testing your program is incredibly important. Testing is covered in detail in the &apos;Design&apos; section.</data></node>
    <node id="#25:78" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Typing instructions into an IDE to get a &quot;program&quot; to work is the easier part, it is significantly harder to write a good piece of software.</data></node>
    <node id="#25:79" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Conditionals allow us to vary how the program behaves based upon the state (values) of certain inputs.
&lt;p&gt;
These are the programming equivalent of the English sentence &apos;if x then y&apos;.</data></node>
    <node id="#25:80" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">All programs in Java must have its code (methods and attributes) within a high level type such as an Interface or Class.</data></node>
    <node id="#25:81" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Large-scale software spends far more time being maintained that it takes for it to be written originally. There are many cases of 20+ year old software still running today, so ensuring that your program is maintainable is of utmost importance.</data></node>
    <node id="#25:82" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">To iterate is to repeat a code block 0 or more times. There are several ways which we may want to use to decide on how often we should repeat a specific code block which are explained and discussed within.</data></node>
    <node id="#25:83" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Probably the most common method of data storage in programming is to store data in a database. Therefore there are many different ways to do so and many different types of databases to store this data in.
&lt;br&gt;
This attempts to covert some of the more common ways and databases but obviously cannot cover them all. That is not to suggest that the methods included here are inherently better than the rest, only more common and as such your mileage may vary depending on the problem you are attempting to solve.</data></node>
    <node id="#25:84" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Java Persistence API is an ORM (Object-Relational mapping) implementation for Java. It allows you to treat data from a database as Objects within your program. 
&lt;br&gt;
JPA requires that the Objects to be stored on the database have their class annotated with &apos;@Entity&apos;. This allows the EntityManager to correctly add them to the database. There are many other tags, for example, @id for the primary key. 
Entities must obey certain rules:
&lt;ol&gt;
&lt;li&gt;Must have no args constructor&lt;/li&gt;
&lt;li&gt;All fields must have getters and setters&lt;/li&gt;
&lt;li&gt;Must have a primary key&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
For the connection to work you must have a Map containing all the necessary properties to create the EntityManager. The EntityManager uses the factory design pattern for its creation. Hence step 1 is to create an EntityManagerFactory to create our EntityManager. We then need to begin a transaction where we can operate on our Objects and then persist any Objects we wish to.
&lt;br&gt;
Overall JPA is used to reduce programming time, but is a little less flexible than JDBC and can be found in javax.persistence.</data></node>
    <node id="#25:85" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Java Database Connectivity is an API designed by Oracle which allows a programmer to connect to a remote database server running many different database implementations and query that database from within a Java program. 
&lt;br&gt;
JDBC requires a specifically formatted URL to connect to a database:&lt;code&gt;jdbc://[db type]://[url]:[port number]/[db name]&lt;/code&gt;
&lt;br&gt;
If applicable (and hopefully it is) you may require a username and password to access the database.</data></node>
    <node id="#25:86" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Hibernate is a commonly used ORM for Java. It implements the JPA plus many other helpful methods in its own API.</data></node>
    <node id="#25:87" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">When querying a MySQL database based upon user input it is a &lt;b&gt;&lt;font color=&quot;red&quot;&gt;VERY awful&lt;/font&gt; &lt;/b&gt;idea to parse user input straight into the query. Whenever this is done a puppy dies. &lt;b&gt;Please do not do this ever&lt;/b&gt;.
&lt;br&gt;
A malicious user could enter a specific query and gain access to your entire database (called SQL injection), but fortunately there are libraries designed to prevent malicious input. There are even some built into the language itself (PreparedStatements), so no excuse not to use them.</data></node>
    <node id="#25:88" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">File I/O is another way of saying &quot;Reading and/or writing data from backing storage&quot;.
&lt;p&gt;
Reading from files in Java can be done in several ways and is not immediately obvious how to be done. 
An example method is:
&lt;br&gt;
&lt;ol&gt;
&lt;li&gt;Open file into a FileReader - this reads in all the characters into this Object&lt;/li&gt;
&lt;li&gt;Wrap the FileReader in a BufferedReader - this allows you to get more than 1 character at a time back&lt;/li&gt;
&lt;li&gt;Manipulate the BufferedReader to get data from the file, such as by using readLine()&lt;/li&gt;
&lt;/ol&gt;
A FileReader is an object that allows you to read a single character from a specific file (which you told it when you initialised it). A BufferedReader is a special kind of Reader object which allows you to read multiple characters at a file &quot;at once&quot; (technically it is reading a single character multiple times before giving them to you). 
&lt;br&gt;
To write to a file an example method is:
&lt;ol&gt;
&lt;li&gt;Open a PrintWriter object&lt;/li&gt;
&lt;li&gt;Print output to file&lt;/li&gt;
&lt;/ol&gt;
&lt;b&gt;If you are reading in or writing out structured or semi-strucutred data then use an appropriate parser. &lt;/b&gt;</data></node>
    <node id="#25:89" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Java gives many built in operators:
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;Addition&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;- &lt;/td&gt;&lt;td&gt;Subtraction&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;/&lt;/td&gt;&lt;td&gt;Divide&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;Multiply&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;%&lt;/td&gt;&lt;td&gt;Modulo&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
If you wish to do exponents you should use the &lt;code&gt;double exp(double a)&lt;/code&gt; method.
&lt;p&gt;
Note: Java does not allow operator overloading, which means you are not allowed to redefine the addition operator (for example) to work with Objects. With the exception of Addition for Strings none of these work on Objects.</data></node>
    <node id="#25:90" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Strings are immutable which means a new String is created each time it is updated or concatenated. This can be incredibly slow if we are updating a large string or forming a complex string from many inputs. 
To solve this problem we have StringBuilder, it takes many inputs and forms the String only once upon request.</data></node>
    <node id="#25:91" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Many employers, programming teams, and universities (including the School of Computer Science here at St Andrews) enforce their own coding style. 
&lt;br&gt;
It is very important to maintain a consistent style amongst teams as this allows many programmers to read, update and adapt code written by others which should reduce programming and maintaining time. 
&lt;br&gt;
Ours can be found in the resource below. It is the definitive source for this information.</data></node>
    <node id="#25:92" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Factory Design Pattern is a complicated way of saying that we delegate our object creation to another class which is designed to just return objects. This way if we have to change the type of our objects we can just change one line.</data></node>
    <node id="#25:93" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The &apos;For Each&apos; loop in Java is an extension of the &apos;For&apos; loop. 
It is used when we wish to iterate through each element of a data structure and do not care for its position in the data structure.
&lt;br&gt;
This will only work for data structures that implement the Iterable interface (which is all Java Collections and Arrays), plus you can design it to work for any custom data structures.</data></node>
    <node id="#25:94" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If you get unexpected data, invalid data or wrong data it can be useful to attempt and recover from these faults rather than just crashing. 
&lt;br&gt;
This is where exceptions come in, when an exception is invoked control is immediately returned up the stack until the exception is handled or it reaches the top (where it will crash your program).
&lt;br&gt;
&lt;b&gt;Do not&lt;/b&gt; use exception to jump out of nested loops, recursion and so forth. Exceptions should only be used when a problem occurs.
&lt;br&gt;
There are two types of exceptions:
&lt;ol&gt;
&lt;li&gt;Checked - where you must attempt to catch them&lt;/li&gt;
&lt;li&gt;Unchecked - where an error may occur too often (eg NullPointerExceptions are unchecked)&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
The general philosophy of Java developers is that checked exceptions are to be used over unchecked.
&lt;br&gt;
To throw an exception you use the throw keyword: &lt;code&gt;throw new ExceptionName();&lt;/code&gt;.
&lt;br&gt;
To catch an exception use the &apos;Try-catch&apos; syntax (examples given below).
&lt;br&gt;
To create your own exception: &lt;code&gt;public class NameHereException extends Exception{}&lt;/code&gt;, these should end with &apos;Exception&apos;.
&lt;br&gt;
If a method has the possibility for an exception to rise above it (ie it does not catch the exceptions) then this should be noted in the method signature with &lt;code&gt;methodName(parameters) throws ExceptionName{}&lt;/code&gt;.
&lt;br&gt;
It is bad practice to catch or throw general &quot;Exception&quot; classes but was done here for illustrative purposes only. 
Further, there are scenarios where a valid response to an exception is just to ignore it - when this does happen please note this in your comments that it is intentionally ignored.
&lt;br&gt;
There is a discussion to when to catch and when to throw exceptions, generally if you can recover from an exception in a reasonable and expected manner then do so, but if you are designing an API or the problem is inputs from outwith your method then throw an exception. This is not a hard and fast rule, apply your better judgement.</data></node>
    <node id="#25:95" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The Ternary operator is the shortcut to a simple, one line, if-else statement.
&lt;br&gt;
The condition remains in the parenthesis but is followed by a question mark, the code to occur if true, a colon, and the code to occur if false.
&lt;br&gt;
Generally do not nest ternary operators within ternary operators as this can be hard to read and to maintain, they should be short and simple.</data></node>
    <node id="#25:96" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">This means your method can have an arbitrary amount of parameters, the additional arguments are treated just like an array. These additional parameters must be of the same type as the parameter with the dots (which should be the last parameter).
These should not be used in place of array parameters since the latter offers better type safety.</data></node>
    <node id="#25:97" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Comparable is an interface that is implemented when an object implements the &lt;code&gt;int compareTo(&amp;lt;T&amp;gt;obj)&lt;/code&gt; method. It means that an object of this type can be show how compared to another object of the declared type.  For example if you had a Person object you may wish to compare them based upon their age or height. 
&lt;br&gt;
Technically they do not need to be compared to an Object of the same type, so you may wish to compare the average life expectancy of a person to another species of animal.</data></node>
    <node id="#25:98" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Iterable interface being implemented means that an object can be produce an iterator which can be used in &apos;For Each&apos; loops, or anywhere an Iterator object is required.</data></node>
    <node id="#25:99" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Generics introduced in Java 5 aim to allow a class to be written once but work with multiple types of data types. Consider them as a variable for types at the class level. It does this by introducing the diamond syntax &quot;&lt;&gt;&quot; which are used to declare the data type. Since then all of the Java standard library has been converted to use generics although with backwards compatibility in mind the non-generic versions still exist but do not provide the same type safety as generics, and should be avoided. Generics are mostly used for Abstract Data Structures rather than classes (for example if you were creating a B+ Tree generics would be useful but not so useful if you were creating a Person class). 
&lt;br&gt;
Each class may have multiple generic parameters separated by commas, which are named just like any other variable and is used in the same manner but replaces the type of another variable. 
&lt;p&gt;
Historically if you required a List you would have to have it return Objects from its methods (as all reference types must be a subclass of Object) and this is not-type safe: you would be able to put a String, Integer and a Person in the same list and treat them all as the same &apos;Object&apos; which means unsafe casts, but with generics you can have an exception thrown if an invalid type is added to the list.
&lt;p&gt;
Generics are incredibly sophisticated with many differently syntax possibilities, but the most common are:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;This can be any reference type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;T extends ASpecificClass&amp;gt;&lt;/code&gt; This can be any subclass of ASpecificClass (which is a subclass of itself)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt; When we do not know nor care for its type. 
&lt;/ul&gt;

To use generics with the Java standard library is very simple: &lt;code&gt;List&amp;lt;String&amp;gt; aListOfStrings = new List&lt;&gt;(); &lt;/code&gt;
Notice that we can omit the latter &apos;String&apos; in the diamond brackets since it can be inferred from context. 
&lt;p&gt;
To create our own generic class we must first declare our class to be generic: &lt;code&gt;public class AnAwesomeClass&amp;lt;T&amp;gt;{}&lt;/code&gt;
&lt;p&gt;
We can then use T anywhere a type declaration would go within our class, as shown in the examples, as if it were a variable but for the type of variables. 
&lt;p&gt;
Generics give you more type safety, reduce bugs and increase maintainability which is inline with Java philosophy, it is useful to use them extensively.
&lt;p&gt;
In summary: Generics allow variables to exist for types of variables.</data></node>
    <node id="#25:100" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Iterators are the data structure returned by a class that implements the Iterable interface. These allow you to very efficiently (both in memory and in time) traverse through a data structure, and importantly without needing to understand how the underlying data structure is implemented. Since Iterable is an interface we can re-use a lot of code across all iterable data structures. 
&lt;p&gt;
In fact when you use the for each loop it is iterating over the iterator returned by the iterable object.</data></node>
    <node id="#25:101" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">There are many frameworks that will either change the way Java is executed or have a different syntax but are still somehow &quot;Java&quot;. These are discussed here.</data></node>
    <node id="#25:102" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">MapReduce is a divide and conquer approach to solving large scale and complex problems. 
&lt;br&gt;
It is named after its two stages: 
&lt;ol&gt;
&lt;li&gt;Map - a filter of some form&lt;/li&gt;
&lt;li&gt;Reduce - decrease the problem size by some form of calculation&lt;/li&gt;
&lt;/ol&gt;
Hadoop is a very common implementation of MapReduce but is not the only option.</data></node>
    <node id="#25:103" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Enumerations are half way between variables and classes. They are similar to variables in that they may only contain certain values, but similar to classes since they can have methods, variables and constructors.</data></node>
    <node id="#25:104" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;em&gt;Final Keyword&lt;/em&gt;
&lt;br&gt;
The final keyword between the variable’s access control and type will tell the compiler to make the variable immutable which will not allow to the variable to be updated.
An attribute that is &apos;final&apos; is allowed to be initialised by the constructor instead of being hardcoded.
&lt;br&gt;
This can also be used in classes to disallow subclasses from being created through inheritance. And finally this keyword can also be used on methods which will prevent sub-classes from overriding that method.</data></node>
    <node id="#25:105" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;em&gt;Abstract Keyword&lt;/em&gt;
&lt;br&gt;
An abstract class is a class that cannot be instianted and is allowed to contain abstract methods.
Abstract methods are method signatures (ie a method without the {//code} but a &quot;;&quot;).
&lt;p&gt;
Any subclass must implement these methods. All methods inside an abstract class are implicitly public, otherwise an abstract class acts just like a regular class.</data></node>
    <node id="#25:106" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;em&gt;Static Keyword&lt;/em&gt;
&lt;br&gt;
Static is a keyword that can be applied to global variables (ie fields/members) or to methods. I can be thought of as meaning that a variable or method belongs to the class as a whole and not to Objects of that class. 
&lt;p&gt;
These variables will be initialised at the start of program execution and not when an Object of that type is created. This means that there is only one copy of each static variable per execution. 
&lt;br&gt;
Static methods are invoked on the class itself using the dot operator in the format: &lt;code&gt;ClassName.staticMethod();&lt;/code&gt;.
&lt;p&gt;
The important thing to note is that anything static can be considered &quot;more general&quot; than a concrete object and as such a static method cannot invoke or use a non-static variable.</data></node>
    <node id="#25:107" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;em&gt;public&lt;/em&gt;: This allows anyone access to the method or field. This does mean that your variables could get silently modified from anywhere so is generally only used when necessary, final or an abstract data structure.</data></node>
    <node id="#25:108" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;em&gt;private&lt;/em&gt;: This can only be accessed from a method inside the object and cannot be invoked on the object itself. Private methods and fields are not inherited.</data></node>
    <node id="#25:109" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;em&gt;protected&lt;/em&gt;: This is the same as private, but these are inherited by subclasses.</data></node>
    <node id="#25:110" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;em&gt;package-protected (no modifier&lt;/em&gt;): This will allow it to be accessed from itself and any other method/object in
the same package, but not a subclass (unless it is in the same package). Rarely used.</data></node>
    <node id="#25:111" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The easiest way to think about accessing data in variables is to think of them as basic math equations.
Consider the very basic equation: &lt;code&gt; f(x) = x + 3&lt;/code&gt; if we gave our x the value 5 then overall we have 8. We directly substitute 5  every time we see the letter x. This gives us &lt;code&gt;f(x) = 5 + 3 = 8 &lt;/code&gt;.
Accessing data is the exact same in Java. The explanation above is exactly equivalent to:

&lt;code&gt;
int x = 5;
int f_x = x + 3;
&lt;/code&gt;
&lt;p&gt;
Consider we wanted to use our variable in a function, such as a function to display its value. We would probably do something like:

&lt;code&gt;
System.out.println(x);
&lt;/code&gt;
Every time we see an x we can &lt;b&gt;think&lt;/b&gt; of it as being replaced with our value 5.
&lt;p&gt;
Note: Accessing data stored in Objects is more complex and has its own section over in &lt;b&gt;Access Control&lt;/b&gt; and &lt;b&gt;Reference Types&lt;/b&gt;</data></node>
    <node id="#25:112" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Java requires us to declare all of our variables, where it is declared determines its &quot;scope&quot; (that is where we can access it from).
&lt;p&gt;
All variables in Java are of the format:
&lt;code&gt;[access control] [modifiers] [type] [name]&lt;/code&gt;
What this does is it &lt;b&gt;declares&lt;/b&gt; a variable to the compiler. From our box analogy this is you telling the compiler to create you a box with certain permissions. 
&lt;p&gt;
Depending on the &lt;b&gt;type&lt;/b&gt; this will be given a default value by the compiler. Recall that when we tell the compiler the type of a variable we cannot change it. Think of the compiler as the box&apos;s guard; it will stop you from doing anything you shouldn&apos;t to it (such as putting socks in a box for food).
&lt;p&gt;
We can then initialise the variable which means to give it its first value. This is us putting something inside the box. This is done very simply using the &lt;b&gt;=&lt;/b&gt; operator.
&lt;code&gt; variableName = value;&lt;/code&gt;
&lt;p&gt;
There is a shortcut to declare and initialise a variable in one line which is commonly used.
&lt;code&gt;int x = 5;&lt;/code&gt;
This assigns the newly created variable (box) called x to the value 5. 
&lt;p&gt;
&lt;p&gt;
A quick note on scope: Variables can generally only be accessed within the set of  &lt;b&gt;{}&lt;/b&gt; they are declared in, but this isn&apos;t always true. A more complete explanation is given in &lt;b&gt;Scope&lt;/b&gt;.</data></node>
    <node id="#25:113" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">All variables that are not declared as &lt;b&gt;final&lt;/b&gt; can be updated so long as they are in scope. Variables can only be replaced with another value of the same type (although this strictly isn&apos;t always true for objects which is discussed in &lt;b&gt;Late Binding&lt;/b&gt;).
For primitive types this is very easy, we simply use the assignment operator &lt;b&gt;=&lt;/b&gt; to give our variable a new value.
&lt;code&gt;
char letter = &apos;a&apos;;
letter = &apos;b&apos;;
&lt;/code&gt;
At the end our letter variable has the value &lt;b&gt;&apos;b&apos;&lt;/b&gt;.
&lt;p&gt;
This is slightly more complicated for reference types. We can change an object&apos;s attribute (that isn&apos;t final) in the same way.
&lt;code&gt;
Cat c = new Cat(&quot;Oscar&quot;, 1); 
c.age = 2;
&lt;/code&gt;
Now our cat is aged 2, but this is slightly different when we want to update the variable holding the object.
&lt;code&gt;
Person p = new Person(&quot;Leo&quot;, 42);
p.pet = c; //Notice that p.pet is an object
p.pet = new Cat(&quot;Oscar Jr.&quot;, 1);
&lt;/code&gt;
What this has done is update the object that &lt;code&gt;p.pet&lt;/code&gt; is pointing to, not the object itself. In that example 3 objects exist by the end: The Car Oscar we declared above, the Person Leo, and another cat Oscar Jr. we declared during. The variable &lt;code&gt;p.pet&lt;/code&gt; holds a reference to the object we create at the end, not a new object.
&lt;p&gt;
&lt;small&gt;The moral of the story: Leo only has 1 Oscar&lt;/small&gt;</data></node>
    <node id="#25:114" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">To abstract a problem is to reduce it to its basics, and to its simplest form for the code to be written as.</data></node>
    <node id="#25:115" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">All programs should hopefully be tested very thoroughly because improper testing can literally cost lives. 
It is very challenging to strike the balance between testing enough of the program&apos;s possible inputs to ensure it works correctly vs. potential heat death of the universe. There is no hard and fast rule for appropriate test coverage, just apply your better judgement, but please, always ensure you have done at least some testing.</data></node>
    <node id="#25:116" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Continuous and Regression testing are usually only used on larger scale, team based projects. These are automated test suites that are integrated to some form of version control software that automatically test newly updated and added code to ensure there are no new errors created or unexpected interactions with existing code.</data></node>
    <node id="#25:117" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">There are many different way to encode data and it is a good idea to use an already established one when you need to encode data. These will have established libraries to allow easy parsing and creation of data as well as being able to communicate easily with other programs.</data></node>
    <node id="#25:118" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Comma Separated Values (CSV) is one of the most simple data formats. It begins with an optional header to tell you what each comma separated value means with each element on a new line.
The problems affiliated with CSV are:
&lt;pre&gt;
	1. The header is optional, there is no guarantee that it is there
	2. Some data may be missed out skewing a line&apos;s length which can be hard to handle properly
&lt;/pre&gt;

But its major advantage is it ease of use and lack of complexity.</data></node>
    <node id="#25:119" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Programming with data srts can be tough, especially the gathering of the data into your program for manipulation. This is where Data Interfaces step in, they provide a way to get data loaded into your program.</data></node>
    <node id="#25:120" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Real world programs are massive, spread across multiple people across multiple teams and potentially across multiple contents. As such it is incredibly important to not have your programmers to create the program&apos;s structure ad-hoc and to have it preplanned in advance. 
This makes it easier and more maintainable from its outset and should reduce both programming time and the resources spent maintaining and updating it in the future.</data></node>
    <node id="#25:121" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Entity Relational Model (ERM) is a model for designing Object based programs. It is in effect a map that displays all the attributes of all the objects and the relationships between those objects. These are common amongst database designers, but are useful in any OO programming.</data></node>
    <node id="#25:122" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Most programs will not require (nor would it be possible to) exhaustively test every single possible input. It is usually good enough to get a good and random sampling of test data.</data></node>
    <node id="#25:123" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">JavaScript Object Notation (JSON) whilst first designed for use in JavaScript is now almost ubiquitous in programming. Appearing in most APIs it is very hard to not use JSON. JSON owes its popularity to its lightweight and flexible nature which makes it convenient to parse and to send across networks. 

Advantages:
&lt;pre&gt;
	1. Very widely used
	2. Many parsers available (usually built into programming languages)
	3. Lightweight and flexible (often returned by web based APIs)
	4. Very similar to English and easily readable
&lt;/pre&gt;

&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/JSON#Example&quot; src=&quot;_blank&quot;&gt;Wikipedia&lt;/a&gt; has a great example and great article on JSON.</data></node>
    <node id="#25:124" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The prototype of a method is the first line of the method declaration in your program.</data></node>
    <node id="#25:125" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Object data interface allows you to pre-load all the data into your program. This is incredibly useful when you have all the data you are going to need so it can be loaded in at the start or during a low-computation part which will hopefully make your program run faster.</data></node>
    <node id="#25:126" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Object-Relational Model (ORM) is a way for data in a database to be represented and manipulated as Objects in an OO program.</data></node>
    <node id="#25:127" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Pseudocode is an English-like explanation of the logic of a program or method. There is no agreed upon &quot;Pseudocode language&quot; but roughly 1 line of pseudocode should be 1 line of code.</data></node>
    <node id="#25:128" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Streaming is loading data continiously. This allows you to start work immediately inside your program and continiously gather data potentially from a live source.</data></node>
    <node id="#25:129" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Often it is important to ensure that the program outputs the correct data at the end of the program, potentially to a screen. 
This can be automated on UNIX based machines using Bash.
&lt;pre&gt;
	1. Create a script to generate many different possible input data to ensure a good coverage
	2. Create a script to run your program with this data and pipe its output to a file
	3. Create a file of the expected output to compare to the actual output
&lt;/pre&gt;</data></node>
    <node id="#25:130" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Test-Driven Development(TDD) is a different approach to program creation that the typical Waterfall approach. In TDD the unit tests are created before the code is actually written. Some believe that this encourages more modular, more correct and more maintainable code with fewer errors and as such reduced development time. Some believe this is boring and useless (but note that some people believe all testing is boring and useless).</data></node>
    <node id="#25:131" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">This is the typical method of software development. 
You start with the highest possible level you have (the furthest away explanation from actual software) and work your way down to actual code.</data></node>
    <node id="#25:132" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">One of the most common design languages is UML (Unified Modelling Language) it is incredibly useful for Object-Orientated programs. There are many other tools available to a programmer depending on the type of problem being solved including many diagrams (Venn diagrams are useful for SQL planning).</data></node>
    <node id="#25:133" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Most programming languages come with some form of unit testing built in, for Java this is JUnit and for Python this is unittest. If you are unsure you can Google: [programming language of choice] unit testing.
Unit testing is isolating a specific method and ensure its return values are as expected for a wide range of inputs. 
A good unit test should:
&lt;pre&gt;
	1. Be fast
	2. Be independent of its surrounding methods - only rely on what is set up specifically for it
	3. Test exactly 1 method that should do 1 thing
	&lt;b&gt;4. Exist&lt;/b&gt;
&lt;/pre&gt;
	
It may be useful to test how the methods interact also.</data></node>
    <node id="#25:134" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">EXtensible Markup Language (XML) is a far stricter and heavier version of JSON. 

Advantages:
&lt;pre&gt;
	1. All elements must be filled
	2. Far stricter on rules so little to none unexpected errors
	3. Still popular and widely used
&lt;/pre&gt;
	
Disadvantages:
&lt;pre&gt;
	1. Inflexible
	2. Heavy
&lt;/pre&gt;</data></node>
    <node id="#25:136" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">An abstract class (or method) will have its name in italicised font instead of bold font.</data></node>
    <node id="#25:137" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;Symbol&lt;/td&gt;
&lt;td&gt;Purpose&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Public&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;Protected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;Package&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Private&lt;/td&gt;
&lt;/tr&gt;</data></node>
    <node id="#25:138" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Attributes are denoted by: &lt;code&gt;[access control modifier] [name] : [type]&lt;/code&gt;</data></node>
    <node id="#25:139" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Inheritance is strange in UML. The subclass (the inheriter) has an line connected to its superclass with an arrow pointing in towards the superclass.</data></node>
    <node id="#25:140" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Interfaces are denoted by &lt;pre&gt;&amp;lt;&amp;lt;Interface&amp;gt;&amp;gt;&lt;/pre&gt; above the class name.</data></node>
    <node id="#25:141" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Methods are: &lt;code&gt;[access control] [name ( [parameters and types])]: [return type]&lt;/code&gt;</data></node>
    <node id="#25:142" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Immutable (for example Java&apos;s final): ALL_CAPS&lt;br&gt;
Non-concrete implementation (for example Java&apos;s static): underlined name</data></node>
    <node id="#25:143" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Objects in UML are represented as squares within squares. They must contain, in the first box, the class&apos;s name in bold text. 
Then following that they may have either:
&lt;ol&gt;
&lt;li&gt;Attributes if they are included&lt;/li&gt;
&lt;li&gt;Operations if attributes are included&lt;/li&gt;
&lt;li&gt;Nothing&lt;/li&gt;
&lt;/ol&gt;

But if attributes are excluded they may have either:
&lt;ol&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;li&gt;Nothing&lt;/li&gt;
&lt;/ol&gt;</data></node>
    <node id="#25:144" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Non-inheritance relationships (ie associative relationships) are denoted by a with with a small arrow on one end pointing from the class that contains the contained class. These can be uni or bi directional. 
It may also contain a number below it denoted the smallest and largest amount that can be held (eg 1..25).</data></node>
    <node id="#25:145" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Method overloading (which is distinct from Method overriding) is when you have multiple methods in the same class with the same name and return type but different parameters types. 
This is often to allow us to the use the same method name (which does the same thing) but with different types of inputs.</data></node>
    <node id="#25:146" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;em&gt;Default&lt;/em&gt;: Default is used in interfaces to give a default implementation for a method in case an implementing class does not implement this method. This means that any classes that implement this interface do not have to implement the method (think of this as the opposite of abstract).</data></node>
    <node id="#25:147" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Much like reading in from files there are multiple ways to do this. A common example is to use an InputStreamReader to wrap System.in (the standard input stream), to use the Console object provided by System.console() or just read in any data directly from the command line using args (generally advised).
&lt;p&gt;
&lt;b&gt;NEVER&lt;/b&gt; blindly trust that users will enter correct and non-malicious inputs. Always be sure to check they are valid.</data></node>
    <node id="#25:148" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In programming we often want to repeat a section of code multiple times and often this is an unknown amount of times.
&lt;br&gt;
Fortunately there are structures built into the language to make this easier for us.
&lt;br&gt;
In Python iteration can be done slightly different from most other languages and these ways may seem unusual at first but in the end they are incredibly useful and powerful.</data></node>
    <node id="#25:149" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In programming we often wish to change how our program runs or what it executes depending on earlier inputs and results.</data></node>
    <node id="#25:150" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">I/O stands for Input/Output.  Programs typically want to either take data in from a source or outputting (sometimes even both).</data></node>
    <node id="#25:151" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Data can be stored in many different ways and some forms are better than others for certain tasks.</data></node>
    <node id="#25:152" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">It is exceedingly rare to write a piece of software with no bugs in it on your first try (and congratulations if you manage to do so), but for us mere mortals debugging is probably the most useful skill for any programmer to have.
&lt;br&gt;
Debugging and testing go hand and hand, and unfortunately there is no one specific and best method of debugging.
&lt;br&gt;
The best advice to be given is to look at your test results and see for what values the output is wrong and then go through each line of where the error may happen and think through what each line of code is doing.
&lt;br&gt;
Another type of debugging is solving compiler errors, the same advice above also holds for this. Thing about &lt;b&gt;why&lt;/b&gt; something is happening.
&lt;/br&gt;
And finally use your resources, that is to include books and your preferred web search engine.</data></node>
    <node id="#25:153" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">SciPy is an ecosystem of libraries designed with the use for scientists (and mathematicians) in mind. It contains many libraries including Numpy and Mathplotlib but also includes panda (for data manipulation) and IPython for interactive computation.
&lt;br&gt;
Scipy library allows you to perform more complex, higher-level mathematics on Numpy arrays, this includes the ability to perform Fourier Transformations and Integrations.</data></node>
    <node id="#25:154" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Dictionaries in Python are similar to Lists, but instead of mapping integers to some data they can map a key (which is any data) to a value (which is any data).
&lt;p&gt;
This can make them incredibly convenient and useful as you can easily lookup a keyword.
&lt;p&gt;
These are declared using the &lt;code&gt; { } &lt;/code&gt; brackets.</data></node>
    <node id="#25:155" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Python&apos;s sets are an implementation of mathematical sets and adhere to the same properties. 
&lt;p&gt;
There are methods built into Python for calculating intersection, union and difference between two sets.
&lt;p&gt;
These are built into the language and do not require any imports, but to create a non-empty set you must give it an iterable (see examples and errors).</data></node>
    <node id="#25:156" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">This is pretending one data type is another. For example pretending an integer is a String or a float is an integer.
&lt;p&gt;
Types can be checked using the &lt;code&gt;typeof()&lt;/code&gt; method.</data></node>
    <node id="#25:157" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A common form of I/O  (Input/Output) is locally based, meaning to load and save to disk or any other form of backing storage.
&lt;p&gt;
Generally speaking I/O is a lot slower than using variables (which are probably stored in RAM at the worst case) so is only used when we need to and not used for all problems.</data></node>
    <node id="#25:158" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Data Types</data><data key="Body">Ada&apos;s type system is not based on a set of predefined primitive types but allows users to declare their own types. This declaration in turn is not based on the internal representation of the type but on describing the goal which should be achieved. This allows the compiler to determine a suitable memory size for the type, and to check for violations of the type definition at compile time and run time (i.e., range violations, buffer overruns, type consistency, etc.). Ada supports numerical types defined by a range, modulo types, aggregate types (records and arrays), and enumeration types. Access types define a reference to an instance of a specified type; untyped pointers are not permitted. Special types provided by the language are task types and protected types.</data></node>
    <node id="#25:159" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In most programs we want to change how the program acts during its execution in a non-linear fashion. We may want a different UI to be loaded when a button is clicked, we may want a specific section of code to loop n times when n is given by the user or we may want a special event to occur when something unexpected happens in the program.
&lt;p&gt;
This section manages all those. Ranging from basic iteration and conditional flow to exceptions.</data></node>
    <node id="#25:160" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">We may require some data to persist across multiple runs. This could be to avoid costly recalculation, to transfer data or to store user preferences.
&lt;p&gt;
We obviously cannot use variables which are stored in transient memory since they are deleted when the program terminates, thus we have to use something more permanent such as files or databases.</data></node>
    <node id="#25:161" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">It is often useful and important to store data produced at run time locally to allow for fast access, but not all data formats are made equal. Here we discuss the most basic ways to store data as well as some of the more advanced techniques for local data storage.</data></node>
    <node id="#25:162" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Programming languages are powerful tools, and it is important to understand how to best utilise them. This could include learning the built in structures and what each allow you to do - this will make solving problems easier.</data></node>
    <node id="#25:163" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Java is an Object-Oriented programming language. That means it manipulates &apos;Objects&apos; which is a collection of data and methods. These are explained in this section.</data></node>
    <node id="#25:164" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Programming is not about being the smartest person in the room producing the most complex and unmaintainable code.  
The best programmers produce simple, readable and maintainable code.</data></node>
    <node id="#25:165" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;a href=&quot;http://vilo.cs.st-andrews.ac.uk/?#28:8#34:12#13:82#13:88&quot;&gt;JSON&lt;/a&gt; is an incredibly popular format for data transference between programs. 
&lt;p&gt;
Fortunately Java comes with a JSON parser in org.json.</data></node>
    <node id="#25:166" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">We often want to transfer data across programs, or even to different programmers across an API. To do this we have to agree how we format the data so that the receiving end can read it.
&lt;p&gt;
We also may want to introduce new programmers at a later point so it generally isn&apos;t a good idea to use your own made-up standard.
&lt;p&gt;
This is what this section covers, standardised ways to format data to be sent to other programmers or programs.
&lt;p&gt;
Each standard has many variations of parsers with slightly different syntax, this section will show at least one library for parsing each standard but there are many others. Programming is about exploration and discovery so feel free to look around for others that you might prefer.</data></node>
    <node id="#25:167" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Programming is more than just writing code that works.
&lt;p&gt;
Most code is continually adapting and will last for a long time after it was written, this is why we want to ensure the programs we write do not just accomplish what our task was but also do so in a manner that makes them readable, easy to understand, and easy to adapt.</data></node>
    <node id="#25:168" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Python is very commonly used because of the ease of use, its flexible and convenient data structures and its amazing library collection for manipulating that data.
&lt;p&gt;
Unfortunately we cannot cover all the amazing things Python allows you to do but we implore you to explore for yourself and discover some great libraries that are out there.
&lt;p&gt;
This section will cover how to create, access, manipulate and store that data.</data></node>
    <node id="#25:169" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Writing code is like writing in any other language - there are a set of rules that must be followed or else what you&apos;re writing may not make sense.</data></node>
    <node id="#25:170" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Programming would be very tedious and boring if they could only execute code in the order it was typed, or if to repeat the same line of code 3 times you had to type it 3 times.
&lt;p&gt;
Fortunately, we have control structures which will change the order and amount of your code&apos;s execution.</data></node>
    <node id="#25:173" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Consumer Demand</data><data key="Body">The purchase plans of all consumers for a good or service over a given period of time are affected by a number of important determinants.</data></node>
    <node id="#25:174" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Own Price</data><data key="Body">The law of demand postulates an inverse relationship between a product’s own price and the quantity purchased, &lt;i&gt;ceteris paribus&lt;/i&gt
&lt;p&gt;
&lt;b&gt;Definition&lt;/b&gt;: &lt;i&gt;ceteris paribus&lt;/i&gt; is Latin for “all else equal” or “holding all other factors constant”.  It indicates that we are interested in isolating the impact of a change in one variable on another under the assumption that nothing else changes.</data></node>
    <node id="#25:176" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Demand Equation</data><data key="Body">The demand relationship can be described mathematically using a simple linear (straight line) equation:
$$ Q^D=a+bP $$ 	(a and b represent unspecified numbers)
&lt;br&gt;
where $$Q^D$$ is the quantity demanded.
$$a$$ is intercept of the equation. 
$$b = \frac{\Delta Q^D}{\Delta P}$$is the slope of the equation and P is the price of the good. $$ \Delta $$ means “change in”.  
&lt;br&gt;
&lt;br&gt;
As the relationship is negative by the law of demand, this implies $$ b&lt;0 $$.</data></node>
    <node id="#25:177" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Inverse Demand Equation</data><data key="Body">It is common in Economics to put price on the left hand side of the demand equation. This is known as the inverse demand equation.  It can be described mathematically using a simple linear (straight line) equation:
$$P=c+dQ^D$$	(again c and d represent unspecified numbers)
&lt;p&gt;
Where $$Q^D$$ is the quantity demanded. 
$$ c $$ is intercept of the equation.
$$ d = \frac{\Delta P}{\Delta Q^D}$$ is the slope.
$$P$$ is the price of the good.  
&lt;p&gt;
As the relationship is negative by the law of demand, this implies $$d&lt;0$$.</data></node>
    <node id="#25:180" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Income and Substitution Effects</data><data key="Body">The law of demand is generated by the simultaneous operation of the income and substitution effects of a change in price.</data></node>
    <node id="#25:181" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">The Income Effect</data><data key="Body">In the case of a normal good, when the price of a good increases, consumers have less purchasing power, so consume less of that good.  Conversely when price declines, consumers have more purchasing power so purchase more.</data></node>
    <node id="#25:182" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">The Substitution Effect</data><data key="Body">When the price of a good increases, consumers always buy less of the good and substitute instead a relatively cheaper alternative product, all else equal.</data></node>
    <node id="#25:184" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">The Demand Choke Price</data><data key="Body">The demand choke price is defined as that price at which demand shrinks to zero (it is choked off).  With respect to the inverse demand equation, when $$Q^D=0$$ this implies $$P=c$$
Therefore, the intercept of the inverse demand equation, $$c$$ is the demand choke price. 
&lt;p&gt;
This will be a positive number $$c&gt;0$$ since if the price is low enough there will always be consumers who purchase the good or service.</data></node>
    <node id="#25:185" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Price Elasticity of Demand</data><data key="Body">&lt;b&gt;Definition&lt;/b&gt;: the responsiveness of quantity demanded to a change in price is known as the price elasticity of demand (E).  Mathematically it is defined as the percentage change in quantity demanded divided by the percentage change in price:

$$E = \frac{\%\Delta Q^D}{\% \Delta P}$$

This is known as an arc elasticity as it is calculating the responsiveness of demand between two different prices.  It is a very useful way to think about the interpretation of an elasticity.  However, arc elasticities are never calculated by professional economists.  Instead, we are interested in the sensitivity of demand at a single price.  This can be derived in the following way:

$$ E = \frac{\%\Delta Q^D}{\% \Delta P}$$
&lt;p&gt;
$$ E = \frac{\frac{\Delta Q^D}{Q^D}}{\frac{\Delta P}{P}} $$
&lt;p&gt;
$$E =  \frac{\Delta Q^D}{\Delta P} \times \frac{P}{Q^D}$$
&lt;p&gt;
$$ E = b \times \frac{P}{Q^D}$$
&lt;p&gt;
$$ E = \frac{1}{d} \times \frac{P}{Q^D}$$
&lt;p&gt;
Where $$b=\frac{\Delta Q^D}{\Delta P} $$ Is the slope of the demand equation: $$ Q^D =a + bP $$ which has $$d = \frac{\Delta P}{\Delta Q^D}$$ from the inverse demand equation $$P = c + dQ^D$$

&lt;p&gt;

This expression enables you to calculate the point price elasticity of demand for any combination of price and quantity consistent with the demand equation.
&lt;p&gt;
Since the slope (b or d) is negative, then the price elasticity of demand is also negative, $$E&lt;0$$ However, it is common for economists to report the price elasticity in absolute terms, that is, as a positive number.
&lt;p&gt;
Notice that for a linear demand equation in which the slope is fixed (b or d), it must necessarily be the case that the price elasticity of demand is larger in absolute value at higher prices.  In other words, since $$E=b×PQ^D$$ then as P increases then E must also increase in absolute value given that b is fixed and $$Q^D$$ declines with higher P.</data></node>
    <node id="#25:186" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Price Inelastic Demand</data><data key="Body">If the price elasticity is less than 1 in absolute value, then demand is not very responsive to a change in price.  This is the case of inelastic demand.  If demand is perfectly inelastic, that is, totally unresponsive to a change in price then $$∆Q^D=0$$ and $$E = \frac{\frac{\Delta Q^D}{Q^D}}{\frac{\Delta P}{P}}$$</data></node>
    <node id="#25:187" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Price Elastic Demand</data><data key="Body">If the price elasticity is greater than 1 in absolute value, then demand is responsive to a change in price.  This is the case of elastic demand.</data></node>
    <node id="#25:188" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Total Expenditure</data><data key="Body">The total expenditure of buyers on a good is simply $$P×Q$$.  This is the same as the total revenue of sellers.  If demand is price inelastic then, as price increases, demand will decline by a smaller proportion than the increase in price. This results in an increase in total expenditure.  By contrast, If demand is price elastic then, as price increases, demand will decline by a larger proportion than the increase in price.  This results in a decrease in total expenditure.  Therefore, when demand is price elastic (E&gt;1), total revenue moves in the opposite direction to the change in price; when demand is price inelastic (E&lt;1), total revenue moves in the same direction as the price change.
&lt;p&gt;
An important property of a linear demand equation is that total expenditure is maximised at that price where the price elasticity of demand equals 1.</data></node>
    <node id="#25:189" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Income</data><data key="Body">Holding prices constant, a change in income affects the purchasing power of the consumer and either expands or contracts the feasible combination of goods and services available to purchase.  Two types of goods can be distinguished according to how their demand changes with income: normal and inferior goods.</data></node>
    <node id="#25:190" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Normal Goods</data><data key="Body">If the quantity demanded rises when income increases, all else equal, then the good is normal.</data></node>
    <node id="#25:191" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Inferior goods</data><data key="Body">If the quantity demanded falls when income increases, all else equal, then the good is inferior.

&lt;br&gt;
&lt;br&gt;
Important remark:  It is entirely possible that an inferior good may satisfy the law of demand regarding the negative relationship between price and quantity demanded.  In other words, when price rises and demand falls this information alone does not tell us whether a good is normal or inferior.  This is because whether a good is normal or inferior relates to its relationship to income, not to prices.</data></node>
    <node id="#25:192" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Income elasticity of demand</data><data key="Body">Definition: the responsiveness of quantity demanded to a change in income (I) is known as the income elasticity of demand. $$E_I^D$$  Mathematically it is defined as the percentage change in quantity demanded divided by the percentage change in income:

$$E_I^D = \frac{{\% \Delta {Q^D}}}{{\% \Delta I}}$$

For a normal good, the income elasticity is positive, $$E_I^D&gt;0$$

The extent of the responsiveness of demand to a change in income indicates whether a good is a luxury or necessity.
&lt;p&gt;
If the good is a luxury then $$E_I^D&gt;1$$  The implication is that quantity demanded rises faster than income and the share of income spent on the good increases as income rises.
&lt;p&gt;
If the good is a necessity then $$ 0&lt;E_I^D&lt;1$$
&lt;br&gt; The implication is that quantity demanded rises slower than income and the share of income spent on the good decreases as income rises.
&lt;p&gt;
For an inferior good, the income elasticity is negative$$ E_I^D&lt;0$$</data></node>
    <node id="#25:194" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Price of Other Goods</data><data key="Body">A change in the price of one product affects demand for related goods and services. Two types of goods can be distinguished according to how their demand changes with the change in price of other goods: complements and substitutes.</data></node>
    <node id="#25:195" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Complements</data><data key="Body">Complements are goods consumed together (for example, fish and chips).  When the price of one good changes, the demand for the complement changes in the opposite direction.</data></node>
    <node id="#25:196" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Substitutes</data><data key="Body">Substitutes are goods which satisfy similar desires (for example, salmon and cod).  When the price of one good changes, the demand for the substitute changes in the same direction.</data></node>
    <node id="#25:197" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Cross Price Elasticity of Demand</data><data key="Body">&lt;b&gt;Definition&lt;/b&gt;: the responsiveness of quantity demanded of good X to a change in price of another good Y is known as the cross price elasticity of demand. 

$$E_{XY}^D$$  Mathematically it is defined as the percentage change in quantity demanded of good X divided by the percentage change in the price of good Y:

$$E_{XY}^D = \frac{\% \Delta Q_X^D}{\% \Delta P_Y}$$

For complements, the cross price elasticity is negative: $$E_{XY}^D &lt; 0$$

For substitutes, the cross price elasticity is positive: $$E_{XY}^D &gt; 0$$

If goods are unrelated, the cross price elasticity is zero: $$E_{XY}^D = 0$$</data></node>
    <node id="#25:198" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Consumer Supply</data><data key="Body">The supply plans of all producers of a good or service over a given period of time are affected by a number of important determinants.</data></node>
    <node id="#25:199" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Price</data><data key="Body">The law of supply postulates a positive relationship between a product’s price and the quantity that suppliers are willing to sell, ceteris paribus. 
&lt;p&gt;
&lt;b&gt;Definition&lt;/b&gt;: &lt;i&gt;ceteris paribus&lt;/i&gt; is Latin for “all else equal” or “holding all other factors constant”.  It indicates that we are interested in isolating the impact of a change in one variable on another under the assumption that nothing else changes.</data></node>
    <node id="#25:200" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Supply Equation</data><data key="Body">The supply relationship can be described mathematically using a simple linear (straight line) equation:
$$Q^S = a + bP $$	a and b represent unspecified numbers.

Where $$Q^S$$ is the quantity supplied, a is the intercept of the equation, $$b = \frac{\Delta Q^S}{\Delta P}$$ is the slope of the equation and P is the price of the good. 
$$\Delta$$ means “change in”.
&lt;p&gt;
As the relationship is positive by the law of supply, this implies: $$b&gt;0$$
&lt;p&gt;
Market supply is simply the sum of the supply of all individual producers at each price.</data></node>
    <node id="#25:201" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">It is common in Economics to put price on the left hand side of the supply equation. This is known as the inverse supply equation.  It can be described mathematically using a simple linear (straight line) equation:

$$P=c+dQ^S$$	
With c and d represent unspecified numbers.
Where 
$$Q^S$$ 
is the quantity supplied, c is the intercept of the equation
$$d = \frac{\Delta P}{\Delta Q^S}$$
is the slope and P is the price of the good. 
&lt;p&gt;
As the relationship is positive by the law of supply, this implies: $$d&gt;0$$</data></node>
    <node id="#25:202" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Supply choke price</data><data key="Body">The supply choke price is defined as that price at which supply shrinks to zero (it is choked off).  It is also known as the minimum supply price.  With respect to the inverse supply equation, $$ P=c+dQ^S$$ when $$Q^S=0$$ this implies $$P=c$$  Therefore, the intercept of the inverse supply equation, c, is the supply choke price. It makes most sense for this to be a positive number c&gt;0 since a supply choke price below zero would suggest producers are willing to supply goods for free.</data></node>
    <node id="#25:203" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">law of supply</data><data key="Body">The law of supply is generated by the fact that at higher prices it is profitable to produce units of output that are more costly to supply.  For example, in the case of oil, when the oil price rises it becomes profitable to supply oil that is more expensive to extract from the ground.</data></node>
    <node id="#25:204" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Price elasticity of supply</data><data key="Body">&lt;b&gt;Definition&lt;/b&gt;: the responsiveness of quantity supplied to a change in price is known as the price elasticity of supply $$E^S$$  
Mathematically it is defined as the percentage change in quantity supplied divided by the percentage change in price:
$$E^S = \frac{{\% \Delta Q^s}}{{\% \Delta P}}$$
This is known as an arc elasticity as it is calculating the responsiveness of supply between two different prices.  It is a very useful way to think about the interpretation of an elasticity.  However, in practice, arc elasticities are never computed by professional economists.  Instead, we are interested in the sensitivity of quantity supplied at a single price.  This can be derived in the following way:

$$ E^S = \frac{\%\Delta Q^S}{\%\Delta P} $$
$$ E^S = \frac{\frac{\Delta Q^S}{Q^S}}{\frac{\Delta P}{P}} $$
$$ E^S = \frac{\Delta Q^S}{\Delta P} \times \frac{P}{Q^S} $$
$$ E^S = b \times \frac{P}{Q^S} $$
$$ E^S = \frac{1}{d} \times \frac{P}{Q^S} $$

Where $$b = \frac{\Delta Q^S}{\Delta P}$$
Is the slope of the supply equation: $$Q^S = a + bP$$
And $$D = \frac{\Delta P}{\Delta Q^D} $$ Is the slope of the inverse supply equation: $$P = c + dQ^S$$

his expression enables you to calculate the point price elasticity of supply for any combination of price and quantity consistent with the supply equation.
Since the slope (b or d) is positive, then the price elasticity of supply is also positive, ie:

$$ E^S &gt; 0$$</data></node>
    <node id="#25:205" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Input costs</data><data key="Body">Firms produce output using inputs, also known as factors of production.  These include labour (workers), capital (plant and machinery) and raw materials. Holding product prices constant, a change in the cost of these inputs (for example, a change in wages)  affects quantity supplied.  If costs increase, production becomes less profitable and supply will contract at every price.  If costs decrease, production becomes more profitable and supply will expand at every price.</data></node>
    <node id="#25:206" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Advances in tech</data><data key="Body">Technological advances are a source of lower production costs.  They permit firms to reduce costs by using existing inputs more efficiently (fewer inputs to produce each unit of output) or to use alternative cheaper inputs to produce output. If costs decrease, production becomes more profitable and supply will expand at every price.</data></node>
    <node id="#25:207" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">number of sellers</data><data key="Body">In the long run, firms can enter and exit an industry.  At any given price, this will expand or contract supply respectively.</data></node>
    <node id="#25:208" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Sellers Outside options</data><data key="Body">If it becomes more profitable to produce some other good, an option outside of the current market, supply will decrease at any given price as sellers move out of the market to produce the other product.</data></node>
    <node id="#25:209" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Markets</data><data key="Body">The interaction of buyers and sellers in markets is fundamental to economic analysis.</data></node>
    <node id="#25:210" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">Unit Elastic Supply</data><data key="Body">If the choke price (the minimum supply price) is zero: $$c=0$$ Then the price elasticity of supply always equals 1 (unity) whatever the level of price and quantity supplied with a linear (straight line) supply equation.  This is because: $$E^S = \frac{c}{dQ^S} + 1$$
$$E^S = \frac{0}{dQ^S} + 1 = 1$$</data></node>
    <node id="#25:211" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If the price elasticity is greater than 1 then producers are highly responsive to a change in product price in their supply decisions.  This is the case of elastic supply. If supply is perfectly elastic then the elasticity is infinite.   This is most easily seen as arising from a zero slope of the inverse supply equation $$ P=c+dQ^S$$ where $$d=0$$ such that:
 $$ E^S = \frac{1}{d} \times \frac{P}{Q^S} $$
$$ E^S = \frac{1}{0} \times \frac{P}{Q^S} = \infty$$
In this case price equals the choke price,  $$P=c$$  At any price above c, quantity supplied will be infinite.  At any price below c, quantity supplied will be zero.</data></node>
    <node id="#25:212" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Using the expression for the supply elasticity:

$$E^S = \frac{c}{dQ^s} + 1 $$

We are able to see that if the choke price (the minimum supply price) is greater than 0, ie:

$$ c &gt; 0 $$

That the ratio:

$$\frac{c}{dQ^S} $$

Is also positive and the price elasticity of supply is always greater than 1 whatever the level of quantity supplied (and price). It must also be the case that as $$Q^S$$ increase (and, therefore, as P increases) the ratio:

$$\frac{c}{dQ^S}$$

Will decline. As a result, the elasticity also falls and converges towards a value of one.</data></node>
    <node id="#25:213" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If the price elasticity is less than 1 then supply is not very responsive to a change in price.  This is the case of inelastic supply.  If supply is perfectly inelastic, that is, totally unresponsive to a change in price then $$\Delta Q^S=0$$ and $$E^S = \frac{\frac{\Delta Q^S}{Q^S}}{\frac{\Delta P}{P}} = 0$$</data></node>
    <node id="#25:214" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Using the expression for a supply elasticity: $$ E^S = \frac{c}{dQ^S} + 1 $$ it can be seen that if the choke price (the minimum supply price) is less than zero, ie $$c&lt;0$$ then the ratio: $$ \frac{c}{dQ^S}$$  is also negative and price elasticity of supply is always less than 1 whatever the level of price and quantity supplied.  Furthermore, as $$Q^S $$ increases (and, therefore, as P increases), the ratio $$\frac{c}{dQ^S}$$ declines, becoming less negative, such that the elasticity rises and converges towards a value of one.  Of course, a negative choke price may not be realistic as it implies that when price is zero, the supplier is willing to supply some goods for free to the market.</data></node>
    <node id="#25:215" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The short run is typically defined as that period of time in which the stock of capital is fixed.  By contrast, in the long run, all inputs are variable.  If the product price changes it may take time for firms to adjust their supply.  
&lt;p&gt;
For example, they may need to invest in new buildings and machinery.  The long run price elasticity of supply is, therefore, likely to be larger (more responsive) than the short run elasticity as firms are only able to adjust their capital stock in the long run.  
&lt;br&gt; 
As a result the slope, b, of the supply equation  $$Q^S=a+bP$$ will generally be larger in the long run than in the short run indicating greater responsiveness to a change in price when all inputs are variable.</data></node>
    <node id="#25:216" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">We have noted that for the inverse supply equation $$P=c+dQ^S$$ the price elasticity of supply can be written:
$$E^S = \frac{1}{d} \times \frac{P}{Q^S}$$
Substituting for P, this gives:
$$E^S = \frac{1}{d} \times \frac{P}{Q^S}$$

Look carefully at the expression:
$$ E^S = \frac{c}{dQ^s} + 1$$
Notice that as $$Q^S$$ increases and, therefore, as P increases, the ratio: $$\frac{c}{dQ^S}$$  becomes smaller and smaller and converges towards zero. 
&lt;p&gt;
The implication is that with a higher price and quantity supplied, the price elasticity of supply converges towards 1 with a linear supply equation.</data></node>
    <node id="#25:217" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Suppose the demand and supply equations are given by:

$$Q^D = a + bP$$
$$Q^S = c + dP$$

Where a, b, c, d are some unspecified numbers.

In equilibrium:

$$ Q^D = Q^S \implies a + bp = c + dP $$

Which we can rearrange to get:

$$P = \frac{c - a}{b - d} $$

Which we call the equilibrium price,

$$P_e$$

And the equilibrium quantity:

$$Q_e = a + bP_e = c + dP_e$$</data></node>
    <node id="#25:218" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In equilibrium the plans of sellers are exactly matched with the plans of buyers.  Notice this is an efficient outcome in the sense that the equilibrium price reflects both the costs of producing the good (the supply curve) and the value of the good to consumers (the demand curve).  This is described as market clearing.</data></node>
    <node id="#25:219" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If the plans of sellers do not match with the plans of buyers, this is the case of disequilibrium.
There are two possibilities, namely excess supply and excess demand.  In a free market, the disequilibrium is only temporary as prices move to restore market equilibrium.  If there are reasons why the price cannot adjust then disequilibrium will tend to persist.</data></node>
    <node id="#25:220" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In the case of excess supply, supply exceeds demand at the current market price and
	producers have unsold goods.  This arises when the market price is above the equilibrium 
	level.  To eliminate the surplus and attract more buyers, sellers respond by lowering the
	price of the product.  As price falls in a free market, demand increases and supply declines
until the market reaches equilibrium and the plans of both buyers and sellers are satisfied.</data></node>
    <node id="#25:221" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In the case of excess demand, demand exceeds supply at the current market price and
consumers face a shortage since there are too many buyers chasing too few goods.  This arises when the market price is below the equilibrium level.  Suppliers take advantage by raising the price of the product.  As price increases in a free market, demand declines and supply expands until the market reaches equilibrium and the plans of both buyers and sellers are satisfied.</data></node>
    <node id="#25:223" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In the case of excess supply, supply exceeds demand at the current market price and producers have unsold goods.  This arises when the market price is above the equilibrium level.  To eliminate the surplus and attract more buyers, sellers respond by lowering the price of the product.  As price falls in a free market, demand increases and supply declines until the market reaches equilibrium and the plans of both buyers and sellers are satisfied.
&lt;p&gt;
&lt;b&gt;Example&lt;/b&gt;
Consider the following market.  The demand for a good in this market is given by: $$Q^D = 100 -  0.1 \times P$$

Then the supply equation is given by: $$ Q^S = 0.1 \times P $$

With price measured in £ and quantity in millions. 
&lt;p&gt;
Suppose the government imposes a price floor (a minimum price) in the market of: $$ P = 900 $$

&lt;i&gt;What is the quantity traded in the regulated market at this price? And what is the level of excess supply?&lt;/i&gt;
&lt;p&gt;
The price floor of £900 generates: $$ Q^D = 100 - 0.1 \times 900 = 10 $$ 
$$ Q^S = 0.1 \times 900 = 90$$.

Because of: $$ Q^D &lt; Q^S $$ the quantity traded is 10m units (the short side of the market) and the excess supply is:
$$ Q^S - Q^D = 80 $$</data></node>
    <node id="#25:224" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In the case of excess demand, demand exceeds supply at the current market price and
consumers face a shortage since there are too many buyers chasing too few goods.  This arises when the market price is below the equilibrium level.  Suppliers take advantage by raising the price of the product.  As price increases in a free market, demand declines and supply expands until the market reaches equilibrium and the plans of both buyers and sellers are satisfied.
&lt;p&gt;
&lt;b&gt;Example&lt;/b&gt;
Consider the following market.  The demand for a good in this market is given by:
$$ Q^D = 100 - 0.1 \times P $$
The supply equation is given by:
$$ Q^S  = 0.1 \times P $$
With the price measured in £ and quantity in millions. Suppose the government imposes a price ceiling (a maximum price) in the market of: $$ P = 300 $$
&lt;i&gt;What is the quantity traded in the regulated market at this price? And what is the level of excess demand?&lt;/i&gt;
&lt;p&gt;
The price ceiling of 300 generates: $$ Q^D = 100 - 0.1 \times  300 = 70$$ $$Q^S = 0.1 \times 300 = 30$$.

This means: $$ Q^S &lt; Q^D $$ he quantity traded is 30m units (this is the short side of the market).
Excess demand is:

$$Q^D - Q^S = 40 $$</data></node>
    <node id="#25:225" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Total economic welfare relates to the wellbeing of all people including consumers, producers and the government.</data></node>
    <node id="#25:226" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Consumer surplus is difference between the price that consumers are willing to pay for a good or service and the price they actually pay.  Total consumer surplus in the market is the area below the demand curve and above the market price.
&lt;p&gt;
&lt;b&gt;Example&lt;/b&gt; Consider a linear market demand equation:
$$ Q^D = a + bP $$ With a and b being unspecified numbers.
The demand choke price is the price at which demand is zero:
$$ Q^D = 0 = a + bP \implies P =  -\frac{a}{b} $$
For a price equilibrium the consumer surplus triangle is given by:

$$ 0.5 \times Q_{e} \times ( - \frac{a}{b} - P_{e}) $$

Where an equilibrium quantity is: $$Q_{e}$$
The equilibrium price is:  $$P_{e}$$
And the choke price is given by: $$ -\frac{a}{b}$$
&lt;p&gt;
Suppose the demand equation is:
$$ Q^D = 5 - P$$
With $$Q_{e} = 3$$ And $$P_{e} = 4$$
The consumer surplus is then given by:

$$ 0.5 \times 3 \times (-\frac{5}{-\frac{1}{2}}- 4) = 9 $$</data></node>
    <node id="#25:227" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Producer surplus difference between the price at which producers are willing to sell their goods and the price they actually receive.  Total producer surplus in the market is the area above the supply curve and below the market price.
&lt;p&gt;
&lt;b&gt;Example&lt;/b&gt;: Consider a linear supply equation where c and d are unspecified numbers: $$ Q^S=c+dP $$
The supply choke price at which supply is zero:
$$ Q^S = 0  = c + dP \implies P = - \frac{c}{d}$$
For an equilibrium price $$P_{e}$$, an equilibrium quantity $$Q_{e}$$ and a supply choke price ($$-\frac{c}{d}$$)  the
producer surplus is the triangle given by
 $$ 0.5 \times Q_{e} \times (P_{e}-(-\frac{c}{d})) $$
Suppose the supply equation is: $$ Q^S = -1 + P $$ with $$ Q_{e} = 3 $$ and $$  P_{e} = 4 $$ 
Then the producer surplus is given by $$0.5 \times 3 \times (4-(-(-\frac{1}{1})))=4.5$$</data></node>
    <node id="#25:228" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Total surplus is the sum of consumer surplus and producer surplus.  If a government imposes taxes on a market then the tax revenue is also counted as part of total surplus as the revenue is spent on activities which increase welfare (health, education etc.).</data></node>
    <node id="#25:229" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A price ceiling is a maximum price, a price cap.  It is designed to transfer surplus from producers to consumers.  A price ceiling which binds will be below the equilibrium market price, generating excess demand.</data></node>
    <node id="#25:230" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A price floor is a minimum price.  It is designed to transfer surplus from consumers to producers.  A price floor which binds will be above the equilibrium market price, generating excess supply.</data></node>
    <node id="#25:231" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A quota is a government imposed quantity regulation which sets a limit on the maximum quantity of a good or service which can be supplied.  A quota which binds will reduce supply below the equilibrium level.  The supply curve becomes vertical (perfectly inelastic) at the level of the quota, introducing a regulatory bend in the supply curve.  Where demand intersects this supply curve the price is above the equilibrium price level which would arise without a quota. Similar to a price floor, the higher price transfers surplus from consumers to producers.</data></node>
    <node id="#25:232" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A sales tax on sellers increases production costs and shifts the supply curve up and to the left.  The market equilibrium price rises and quantity traded declines, redistributing total surplus away from both consumers and producers and to the government (in tax revenue). In the module, we consider the simple case of a specific tax also known as an excise tax.  This is a specific amount of tax per unit of the good sold, for example, £5 on each bottle of whisky.
&lt;p&gt;
&lt;b&gt;A Common Mistake&lt;/b&gt;: For an inverse supply curve, the tax (TAX) is simply added to right hand side of the equation:

$$ P=a+bQ^S+TAX $$ 

This shows that for, a given level of supply, a higher tax implies a higher price.  In other words, a higher tax shifts the supply curve up and to the left on the standard supply diagram which has price on the vertical axis.
&lt;p&gt;
However, for the supply curve written on the left hand side, it is a common error to add TAX to the right hand side in the same way:

$$ Q^{S}=a+bP+TAX $$ 

Which is incorrect because this would imply that, for a given price, a higher tax implies a higher quantity supplied.  In
other words, a higher tax shifts the supply curve down and to the right on the standard supply which has price on the vertical axis.  This is clearly a mistake. To avoid confusion, a strong recommendation is always to rearrange a supply equation to put it in its inverse form:

$$ P=a+bQ^S $$ 

Then add TAX to the right hand side.</data></node>
    <node id="#25:233" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Suppliers always bear the LEGAL incidence or burden of sales taxes.  They collect the revenue and send it to the government. However, they can pass on part of the ECONOMIC incidence or burden of the tax to consumers through higher prices.  The tax generates a wedge between the price buyers pay $$P_{b}$$ and the price sellers receive $$P_{s}$$ after sending the tax revenue to the tax authorities, where:

$$ P_{s} = P_{b} - TAX$$</data></node>
    <node id="#25:234" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The share of the tax incidence between buyers and sellers falls more heavily  on the side of the market which is more price inelastic. The intuition is that elasticity measures the willingness of buyers/sellers to leave the market when there is a change in price.  If buyers have a relatively low price elasticity, it means they do not have good substitutes for the product and cannot easily exit the market when the price rises.  This enables suppliers to pass on the sales tax in higher prices to consumers without losing revenue. Typically, sales taxes are placed on goods with low elasticises (alcohol, petrol, tobacco) such that consumers rather than producers bear more of the tax incidence.  An approximation of the tax share for each side of the market is given by the following formulae:
&lt;p&gt;
Tax share borne by consumers:
$$ \frac{E^S}{E^S+|E^D|}$$

Tax share borne by producers:

$$ \frac{|E^D|}{E^S+|E^D|}$$

These shares range between 0 and 1.  Multiply them by 100 to give a share as a percentage of the tax burden. Where $$|E^D|$$ is the absolute value of the price elasticity of demand (as this is normally negative) and $$E^S$$ is the price elasticity of supply.
Notice that if $$E^S=0$$ and supply is perfectly inelastic then none of the tax is passed on to consumers.  Symmetrically, if $$E^D=0$$ and demand is perfectly inelastic then all of the tax is passed on to consumers in higher prices (their tax share = 1, i.e. 100%)</data></node>
    <node id="#25:235" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A deadweight loss is a decline in total surplus arising from a government
intervention in the market.  In the cases of a price ceiling, price floor, quota or sales tax, these interventions all reduce the quantity of trade compared to a free market.This means some transactions no longer occur which previously generated benefits for consumers and producers.  Trade produces gains for consumers and producers. If there is less trade then gains are lost from those transactions which now no longer occur.</data></node>
    <node id="#25:236" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The more trade that is lost following a government intervention, the greater the deadweight loss.  The magnitude of the effect on trade depends on the  size of the price elasticities since these measure how sensitive the demand of consumers and supply of producers is to a change in price caused by the government intervention.  The higher the price elasticities, the more the market shrinks and the higher is the welfare loss.</data></node>
    <node id="#25:237" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If the plans of sellers do not match with the plans of buyers, this is the case of disequilibrium.
There are two possibilities, namely excess supply and excess demand.  In a free market, the disequilibrium is only temporary as prices move to restore market equilibrium.  If there are reasons why the price cannot adjust then disequilibrium will tend to persist.</data></node>
    <node id="#25:238" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Consider two goods, X and Y.  An indifference curve describes the combinations X and Y which generate the same utility (satisfaction or well-being) for a consumer.  Suppose, for example, utility, is given by: 
$$U = XY = 6 $$
The consumer will be indifferent between the following combinations of X and Y.  These then are all bundles of X and Y on the same indifference curve.
&lt;p&gt;
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;X&lt;/th&gt;
    &lt;th&gt;Y&lt;/th&gt;
    &lt;th&gt;U = XY&lt;/th&gt;
    &lt;th&gt;ΔX&lt;/th&gt;
    &lt;th&gt;ΔY&lt;/th&gt;
    &lt;th&gt;ΔY / ΔX&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;-&lt;/td&gt;
    &lt;td&gt;-&lt;/td&gt;
    &lt;td&gt;-&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;-3&lt;/td&gt;
    &lt;td&gt;-3&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;-1&lt;/td&gt;
    &lt;td&gt;-1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;1.5&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;-0.5&lt;/td&gt;
    &lt;td&gt;-0.5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;1.2&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;-0.3&lt;/td&gt;
    &lt;td&gt;-0.3&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;6&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;-0.2&lt;/td&gt;
    &lt;td&gt;-0.2&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
&lt;i&gt;Downward sloping property for goods&lt;/i&gt;
&lt;p&gt;
Notice that, when X increases, Y must decrease in order for utility to be constant.  Hypothetically If X had increased but Y had remained unchanged then utility would necessarily increase as the consumer would have more X for a given amount of Y.  So if consumption of X had risen from 1 unit to 2 units but consumption of Y had remained at 6 units then utility would have risen from:
$$ U = XY = 1 \times 6 = 6 $$
To:
$$ U = XY = 2 \times 6 = 12 $$

From this we derive the property that indifference curves for goods always slope down in that if the consumption of one good increases, the consumption of the other good must decrease to maintain utility constant.
&lt;p&gt;
&lt;i&gt;Marginal Rate of Substitution (MRS)&lt;/i&gt;
&lt;p&gt;
The trade-off between the consumption of X and Y is known as the Marginal Rate of Substitution.
Notice from the table that when &lt;b&gt;X = 1&lt;/b&gt; the consumer is willing to sacrifice 3 units of Y (&lt;b&gt;&amp;Delta; Y = -3&lt;/b&gt;) in order to obtain just one more unit of X (&lt;b&gt;&amp;Delta; X = 1&lt;/b&gt;). This is because, unlike X, the consumer already has Y in abundance (&lt;b&gt;&amp;Delta; Y = 6&lt;/b&gt;). so she is willing to trade in 3 units of Y to obtain one more unit of X.  In other words, the consumer has a high valuation of one more unit of X in terms of Y.
&lt;p&gt;
By contrast, when &lt;b&gt;X = 5&lt;/b&gt; the consumer is willing to sacrifice only 0.2 of a unit of Y (&lt;b&gt;&amp;Delta; Y = -0.2&lt;/b&gt;) n order to obtain another unit of X and maintain utility constant.  This is because she now has lots of X but very little Y.  Therefore, the consumer has a low valuation of one more unit of X in terms of Y.
&lt;p&gt;
This trade-off between consumption of X and Y is given by:
$$\frac{\Delta Y}{\Delta X}$$ and listed in the final column of the table.  It is known as the Marginal Rate of Substitution of X for Y:
$$MRS_{XY}$$
Which shows the rate at which a consumer is willing to trade-off (substitute) good Y for an additional unit of good X and still be equally well off.  It is equivalent to the slope of the indifference curve.
&lt;p&gt;
However, it is conventional to report the MRS as the negative of the slope:
$$ MRS_{XY} = -\frac{\Delta Y}{\Delta X} $$
To make this a positive number.
&lt;p&gt;
For example, if: $$ MRS_{XY} = 2$$  then the interpretation is that, at the current of levels of consumption of X and Y, the consumer is willing to give up two units of Y to obtain an additional unit of X and maintain utility constant.
&lt;p&gt;
&lt;i&gt;Diminishing MRS&lt;/i&gt;
&lt;p&gt;
An important property of the MRS is that it diminishes as X increases.  This is simply another way of saying that a consumer is less willing to trade Y to obtain an additional unit of X as the quantity of Y decreases relative to X.  As a result, the consumer’s valuation of X in terms of Y declines as consumption of X increases.</data></node>
    <node id="#25:239" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If goods are very close substitutes (e.g. two very similar types of breakfast cereal such as Tesco’s Bran Flakes and Aldi’s Bran Flakes) one consequence is that the trade-off between them does not vary much along the indifference curve.  If I really think that the cereals are close substitutes then the rate at which I trade them off does not depend too much on whether I already have a large quantity of Tesco’s Bran Flakes or a small quantity.  The valuation of an additional unit of Tesco’s Bran Flakes in terms of Aldi’s Bran Flakes is not very sensitive to the initial quantities.
&lt;p&gt;
As the MRS describes this trade-off it implies that the slope of the indifference curve is fairly constant.  In other words, the MRS falls slowly and this implies the curvature of the indifference curve is relatively shallow (it is almost straight).</data></node>
    <node id="#25:240" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In the extreme case of perfect substitutes, the trade-off between the two goods is constant, that is to say, it does not depend at all on the initial quantities.  In other words, the MRS is constant and the indifference curves are linear.  The consumer trades goods at the same rate, no matter how many she has of each.</data></node>
    <node id="#25:241" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If goods have a low degree of substitutability one consequence is that the trade-off between them varies greatly along the indifference curve.  Consider the case of complements such as bread and butter.  The rate at which I trade off units of butter for an additional unit of bread does depend heavily on whether I already have a large quantity or a small quantity of bread.  This is because if I have very little bread but lots of butter, I’m naturally willing to sacrifice a large quantity of butter to obtain the bread I need to spread it on.  Conversely, if I have lots of bread but little butter, my value of additional slice of bread in terms of butter is low: I’m not willing to sacrifice much butter to obtain more bread.
&lt;p&gt;
As the MRS describes this trade-off, it implies that the slope of the indifference curve changes rapidly.  In other words, the MRS falls quickly and, as a result, the curvature of the indifference curve is high.</data></node>
    <node id="#25:242" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In the case of perfect complements, such as a left shoe and a right shoe, the goods are consumed in fixed proportions.  In this case the proportion is 1:1.  This means there is no utility from consuming a left shoe without also consuming a right shoe.  Adding more left shoes to a single right shoe will not add to satisfaction.  The consumer would be indifferent between the following combinations of shoes:

&lt;div class=&quot;tg-wrap&quot;&gt;&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Left Shoes&lt;/th&gt;
    &lt;th&gt;Right Shoes&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;3&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;5&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;5&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;
If you plot this indifference curve, it will be L-shaped.  The only way to obtain more utility is to have more of both shoes.</data></node>
    <node id="#25:243" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The theory of production investigates the choices of firms with respect to the quantities of goods to produce and the combination of inputs to employ.  Many of the concepts of producer theory have their analogues in consumer theory. The firm combines inputs (factors of production) to produce outputs. In simple models, we assume that there are only two distinct inputs to the production of a single commodity, namely, capital and labour.
&lt;p&gt;
&lt;i&gt;Capital&lt;/i&gt;
&lt;p&gt;
Capital refers to the stock of buildings, machinery and vehicles. We assume all capital is the same and denote it by K.
&lt;p&gt;
&lt;i&gt;Labour&lt;/i&gt;
&lt;p&gt;
Labour refers to input of workers into the production process. We assume all labour is the same and denote it by L.</data></node>
    <node id="#25:244" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A production function relates the quantities of inputs to the quantity (Q) of the good produced (also known Total Product). Assuming just two inputs, capital (K) and labour (L), the function takes the following form:
&lt;p&gt;
$$ Q = F(K,L) $$ 
&lt;p&gt;
Note that it shows the maximum possible output from each combination of inputs. In other words, there is no technological inefficiency in the production process.
There are many specific functional forms for the production function that are used by economists. The most popular one is the &lt;i&gt;Cobb-Douglas production function&lt;/i&gt;:
&lt;p&gt;
$$ Q = AK^{\alpha}L^{\beta} $$
&lt;p&gt;
Q=AKαLβ
Where α and β (both positive) denote the sensitivity of production to changes in capital and labour, respectively. A is a positive parameter, often interpreted as “total factor productivity”.  It represents the effect of technology on the productivity of the inputs in producing output.  A very simple case often used in EC1002 is where A=1 and α=β=0.5 giving:
&lt;p&gt;
$$ Q = K^{0.5}L^{0.5} = \sqrt{KL} $$</data></node>
    <node id="#25:245" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The short run is a period of time in which at least one input is fixed and cannot be varied whatever the level of output produced.  Typically, it is assumed that the stock of capital is fixed in the short run at some level:
&lt;p&gt;
$$ K = \overline{K}$$ 
&lt;p&gt;
Labour is the only input to production that can be changed in the short run.
The short-run production function takes the following form:
&lt;p&gt;
$$ Q = F(\overline{K}, L) $$
&lt;p&gt;</data></node>
    <node id="#25:246" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The marginal product of labour is the rise (or fall) in quantity produced after labour has been increased (or decreased) by one unit, keeping capital fixed. This can be calculated with the following formula:
&lt;p&gt;
$$ MP_{L} = \frac{\Delta Q}{\Delta L}$$
&lt;p&gt;
An important feature of the marginal product of labour is that it is (eventually) diminishing as output increases, given that the capital input is fixed.  This means that each consecutive worker hired will contribute less to production than the previous one.  This is the famous “law of diminishing marginal returns” or “diminishing marginal productivity” first formulated by Adam Smith.</data></node>
    <node id="#25:247" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">This is defined as the average contribution of every worker to production. It is calculated using the following formula:
&lt;p&gt;
$$ AP_{L} = \frac{Q}{L}$$</data></node>
    <node id="#25:248" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">There is an important relationship between the marginal and average product of labour.  
(1) If the marginal product of labour is below the average product of labour then the average product will decline when another worker is hired (as the extra worker pulls down the average further).  
(2) Conversely, if the marginal product of labour is above the average product of labour then the average product will rise when another worker is hired (as the extra worker pulls up the average further).
(3) The implication of (1) and (2) is that the marginal product and average product of labour are equal at the maximum value of average product.</data></node>
    <node id="#25:249" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;i&gt;In the long run, we are all dead. – John Maynard Keynes&lt;/i&gt;&lt;p&gt;
The long run is a period of time in which all inputs are variable.  Both capital and labour can be freely varied.</data></node>
    <node id="#25:250" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">This is an analogous concept to marginal product of labour but this time representing the addition to output following an increase in capital by one unit, keeping labour constant. It is calculated as follows:
&lt;p&gt;
$$ MP_{K} = \frac{\Delta Q}{\Delta K}$$
&lt;p&gt;
As with labour, it is typically assumed that the marginal product of capital decreases as more capital is employed.  The implication is that if a given quantity of output is produced using a capital intensive method (few workers, many machines) then the marginal product of capital will be relatively low due to the law of diminishing marginal returns (and the marginal product of labour will be relatively high).</data></node>
    <node id="#25:251" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Isoquant means same (&lt;i&gt;iso&lt;/i&gt;) quantity of output (&lt;i&gt;quant&lt;/i&gt;). An isoquant represents the set of all combinations of capital and labour which produce the same quantity of output. These combinations form a downward sloping curve when plotted in the (K, L) space and one of the inputs is expressed as a function of the other for a fixed quantity of output Q=Q, most often capital as a function of labour:
&lt;p&gt;
$$ K=f(L) $$
&lt;p&gt;
The isoquant is downward sloping since an increase in one of the inputs must be accompanied with a decrease in the other in order to yield the same output as before.  The slope of the isoquant is given by:
&lt;p&gt;
$$ \frac{\Delta K}{\Delta L} &lt; 0$$
&lt;p&gt;
The further away from the origin an isoquant lies, the bigger the output level it represents.  The isoquant shares many of the same properties as indifference curves in consumer theory.
&lt;p&gt;
&lt;i&gt;Helpful analogy&lt;/i&gt;:
&lt;p&gt;
Suppose you want to create a forest of exactly 10 trees and you have both birch and willow saplings. The more birch saplings you use, the less willow saplings you will need to use to complete the forest (and vice versa). Similarly, the more labour you use to obtain a certain quantity of production, the less capital you will require.</data></node>
    <node id="#25:252" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The Marginal Rate of Technical Substitution (MRTS) describes the trade-off between labour and capital.  It shows the change in the capital stock when labour is increased by one unit, keeping quantity produced constant. Mathematically, it can be expressed as follows:
&lt;p&gt;
$$ MRTS_{LK} = - \frac{\Delta K}{\Delta L}$$
&lt;p&gt;
By convention, this represents the change in capital when labour is increased.
The MRTS is the negative of the slope of the isoquant.  As the slope is negative, the MRTS must be positive.  It shows the rate at which the producer can trade-off (substitute) capital for an additional worker and still produce the same output.  For example, if MRTSLK=2 the interpretation is that, at the current levels of K and L, the firm will need to substitute two units of K for an additional worker if production is held constant.
&lt;p&gt;
&lt;i&gt;Diminishing MRTS&lt;/i&gt;
&lt;p&gt;
An important property of the MRTS is that it diminishes as the labour input increases.  This is simply another way of saying that a producer needs to give up less and less capital in exchange for an additional worker as the number of workers rises (and output is maintained constant).  This is due to the law of diminishing returns.  As more workers are hired and less capital is employed, the marginal productivity of labour declines and that of capital rises. In this case, an extra worker is so unproductive that he or she can only replace a relatively low amount of capital if output is to remain fixed.</data></node>
    <node id="#25:253" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">As with goods in consumption, capital and labour can be more or less substitutable in production. The degree of substitutability is reflected in the curvature of the isoquant. 
&lt;p&gt;
&lt;i&gt;Low curvature&lt;/i&gt;
&lt;p&gt;
A low curvature implies the MRTS declines slowly and the trade-off between capital and labour does not change much along the isoquant.  This will be the case when the inputs are close substitutes such that their productivity is not affected much by the mix of capital and labour in the production process (whether it is capital intensive or labour intensive).
&lt;p&gt;
&lt;i&gt;Perfect substitutes&lt;/i&gt;
&lt;p&gt;
In the case of perfect substitutes, the MRTS is constant and the isoquants are linear.  This implies that the marginal products of the inputs are not affected at all by the mix of capital and labour for a given output level.  There is no diminishing returns.
&lt;p&gt;
&lt;i&gt;High curvature&lt;/i&gt;
&lt;p&gt;
A high curvature implies the MRTS declines quickly and the trade-off between capital and labour does change significantly along the isoquant.  This will be the case when the inputs are not close substitutes such that their productivity is affected by the mix of capital and labour in the production process (whether it is capital intensive or labour intensive).
&lt;p&gt;
&lt;i&gt;Perfect complements&lt;/i&gt;
&lt;p&gt;
In the case of perfect complements, the isoquants are shaped like the letter “L”.  Capital and labour can only be used in fixed proportions to produce output efficiently.  An example is taxi-cabs and taxi-drivers.  A cab cannot be substituted for a driver (at least, not until self-driving cars become available).</data></node>
    <node id="#25:254" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Since, in the long run, both labour and capital can be adjusted, it is helpful to look at how output is affected by simultaneous changes in BOTH capital and labour. Since MPL represents the increase in total product when labour is increased by one unit and MPK represents the increase in output when capital is increased by one unit, the total change can be expressed mathematically as follows:
&lt;p&gt;
$$ \Delta Q = MP_{L} \times \Delta L + MP_{K} \times K$$
&lt;p&gt;
Where ∆L is the change in the labour input and ∆K is the change in the capital input. On a given isoquant, output doesn’t change (by definition), implying ∆Q=0. The equation can be re-written:
&lt;p&gt;
$$ 0 = MP_{L} \times \Delta L + MP_{K} \times K $$
$$  MP_{K} \times K = -  (MP_{L} \times \Delta L)  $$
$$ - \frac{\Delta K}{\Delta L} = MRTS_{LK} = \frac{MP_{L}}{MP_{K}} $$
&lt;p&gt;
The MRTS equals the ratio of the marginal products of labour and capital.  If production is capital intensive (few workers, many machines) then the MPL will be high, the MPK will be relatively low and the MRTSLK is high. In this case, an extra worker is so productive that he or she can replace a relatively large amount of capital with output remain fixed.</data></node>
    <node id="#25:255" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">When representing the costs of production, C, for the case of capital and labour inputs in the long run we use the following equation:
&lt;p&gt;
$$ C = rK + wL$$
&lt;p&gt;
For simplicity, we assume that all units of labour are hired at a fixed wage w and all units of capital are rented at a fixed rental rate r.  In other words, the prices of K and L do not vary with the quantities of K and L.  Thus, rK is total spending on capital and wL is total spending on labour.&lt;p&gt;
The set of all combinations of capital and labour which have the same total cost for the firm is called an &lt;i&gt;isocost&lt;/i&gt;. 
&lt;p&gt;
For any given cost C, we can rearrange the isocost equation as follows in order to express K as a function of L and which can be plotted in (K, L) space:
$$ C = rK + wL$$
$$ rK = C - wL$$
$$ K = \frac{C}{r} - \frac{w}{r}L$$
&lt;p&gt;
This is a linear equation, and its graph is an isocost line. The slope of this line is: 
&lt;p&gt;
$$ - \frac{w}{r}$$
&lt;p&gt;
This is negative since both w and r are positive parameters.
&lt;p&gt;
Isocosts are parallel downward sloping lines. Similar to isoquants, isocost lines further away from the origin represent higher production costs.</data></node>
    <node id="#25:256" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">There is an infinite number of combinations of capital and labour which yield the desired quantity of output. How does the firm choose the least cost combination of inputs such that it is not possible to reduce costs by changing the mix of capital and labour?  Suppose, for example, that workers are more productive relative to their cost (the wage) than units of capital are to their price (the rental rate).  In other words, we have:
&lt;p&gt;
$$ \frac{MP_{L}}{w} &gt; \frac{MP_{K}}{r}$$
&lt;p&gt;
n that case, increasing L and reducing K will permit the same level of output to be produced at lower total cost.
&lt;p&gt;
Conversely if:
&lt;p&gt;
$$ \frac{MP_{L}}{w} &lt; \frac{MP_{K}}{r}$$
&lt;p&gt;
Then costs can be lowered by hiring more capital and firing workers and still producing the same output.
&lt;p&gt;
It is only when:
&lt;p&gt;
$$ \frac{MP_{L}}{w} = \frac{MP_{K}}{r}$$
&lt;p&gt;
Then inputs and equally productive relative to their prices that costs will be minimized for a given level of output.
&lt;p&gt;
This cost minimizing condition can re-written as:
&lt;p&gt;
$$ \frac{MP_L}{MP_K} = \frac{w}{r}$$
&lt;p&gt;
This is equates the (absolute) slope of the isoquant to the (absolute) slope of the isocost curve.  And, as we know, the ratio of marginal products is the marginal rate of technical substitution between capital and labour:
&lt;p&gt;
$$ MRTS_{LK} = \frac{MP_{L}}{MP_{K}}$$</data></node>
    <node id="#25:257" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Returns to scale measure of how quantity changes when both inputs are scaled up by the same number. 
For a production function Q=F(K, L) there exist three possibilities in terms of returns to scale:+
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Constant returns to scale – scaling both inputs by the same proportionate amount z yields a value of output which is &lt;b&gt;exactly&lt;/b&gt; z times the original quantity. Mathematically:
$$F(zK,zL)=zQ $$&lt;/li&gt;
&lt;li&gt; Increasing returns to scale - scaling both inputs by the same proportionate amount z yields a value of output which is &lt;b&gt;more than&lt;/b&gt; z times the original quantity. Mathematically:
$$F(zK,zL)&gt;zQ$$&lt;/li&gt;
&lt;li&gt; Decreasing/diminishing returns to scale - scaling both inputs by the same proportionate amount z yields a value of output which is &lt;b&gt;less than&lt;/b&gt; z times the original quantity. Mathematically:
$$F(zK,zL) \lt zQ$$&lt;/li&gt;

&lt;/ul&gt;
Constant returns to scale are often the case and are assumed in the most widely used production functions.
&lt;p&gt;
&lt;i&gt;Helpful analogy&lt;/i&gt;:
&lt;p&gt;
Why are constant returns to scale normally the case?
Think of labour and capital as two ingredients in a recipe, just like egg whites and sugar combined to make meringues. Since you’d expect to make twice as many meringues if you put in twice the amount of sugar and egg whites, you’d expect to obtain twice as much production if you put in twice as much capital and labour.
&lt;p&gt;
&lt;i&gt;Example&lt;/i&gt;
&lt;p&gt;
Suppose the firm’s production function is given by:
$$ Q = K^{0.5}L^{0.5} = \sqrt{KL}$$
&lt;p&gt;
If initially K=L=5 then:
&lt;p&gt;
$$ Q = \sqrt{KL} = \sqrt{5 \times 5} = 5$$
&lt;p&gt;
Suppose the quantities of K and L both double such that K=L=10 then:
&lt;p&gt;
$$ Q = \sqrt{KL} = \sqrt{10 \times 10} = 10$$
&lt;p&gt;
As a result of the doubling of both inputs, output has also doubled from 5 to 10.  This indicates that this particular production function exhibits constant returns to scale.</data></node>
    <node id="#25:258" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Technological change permits a firm to replace old technology with state-of-the-art production techniques and obtain the same output with fewer inputs or, equivalently, more output with the same inputs.  In both cases, the inputs become more productive.  Consider the production function:
&lt;p&gt;
$$ Q = Af(K, L)$$
&lt;p&gt;
Here &lt;i&gt;A&lt;/i&gt; denotes the level of total factor productivity.  
&lt;p&gt;
All else equal, an improvement in technology causes an increase in the value of A and shifts the isoquants inwards towards the origin reflecting the fact that the same level of production can now be obtained with fewer inputs of K and L.  Technical progress, then, will lower costs of producing output.</data></node>
    <node id="#25:259" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Marginal utility (MU) is the additional satisfaction derived from consuming an additional unit of a good.  In the case of good X, it is given by:
&lt;p&gt;
$$ MU_X = \frac{\Delta U}{\Delta X} $$
&lt;p&gt;
If the consumption of one more unit:
&lt;p&gt;
$$ \Delta X = 1$$
&lt;p&gt;
This generates an additional four units of utility:
&lt;p&gt;
$$ \Delta U = 4 $$
&lt;p&gt;
Therefore:
&lt;p&gt;
$$ MU_X = 4 $$
&lt;p&gt;
&lt;i&gt;Diminishing marginal utility&lt;/i&gt;
&lt;p&gt;
Famously, as consumption of a good increases, the marginal utility of the last unit consumed declines.  
&lt;p&gt;
&lt;i&gt;Relationship between Marginal Utility and the Marginal Rate of Substitution&lt;/i&gt;
&lt;p&gt;
Suppose a consumer consumes just two goods X and Y.  On a given indifference curve, if the consumer consumes more of X then consumption of Y must decline in order to maintain utility constant.  The gain in utility from consuming more X is exactly offset by the loss in utility from consuming less Y.
&lt;p&gt;
To show this, re-arrange the expression for marginal utility for good X to give the change in utility from consuming more X:
&lt;p&gt;
$$ \Delta U = MU_X \times \Delta X$$
&lt;p&gt;
Likewise for good Y:
&lt;p&gt;
$$ \Delta U = MU_Y \times \Delta Y$$
&lt;p&gt;
If a consumer adjusts their consumption along an indifference curve, the change in utility is by definition zero:
&lt;p&gt;
$$ \Delta U = 0 = MU_Y \times \Delta Y + MU_X \times \Delta X$$
&lt;p&gt;
Re-arranging:
&lt;p&gt;
$$ -MU_Y \times \Delta Y = MU_X \times \Delta X$$
$$ - \frac{\Delta Y}{\Delta X} = \frac{MU_X}{MU_Y}$$
&lt;p&gt;
The left hand side of the above equation is the negative of the slope of the indifference curve which is simply the Marginal Rate of Substitution:
&lt;p&gt;
$$ - \frac{\Delta Y}{\Delta X} = MRS_{XY}$$
&lt;p&gt;
It therefore follows that:
&lt;p&gt;
$$ \frac{MU_X}{MY_Y} = MRS_{XY}$$</data></node>
    <node id="#25:260" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In addition to preferences, consumer choices are also affected by income (I) and prices:
$$ (P_X, P_Y) $$
 These constitute constraints on a consumer’s budget.  Assume a consumer spends all of her income on X and Y (no saving) then the budget constraint is:
&lt;p&gt;
$$ I = P_{X}X + P_{Y}Y$$
&lt;p&gt;
The maximum quantity of good X the consumer can afford (when Y=0) is:
&lt;p&gt;
$$ \frac{I}{P_X}$$
&lt;p&gt;
 and the maximum quantity of good Y (when X=0) is:
&lt;p&gt;
$$ \frac{I}{P_Y}$$
&lt;p&gt;
The higher the price of each good, the smaller the maximum quantity of that good the consumer can afford.
To find the slope of the budget constraint, rearrange the equation:
&lt;p&gt;
$$ Y = \frac{I}{P_Y} - \frac{P_X}{P_Y}X$$
&lt;p&gt;
The slope then is given by the (negative of) the relative prices of X and Y:
&lt;p&gt;
$$ \frac{\Delta Y}{\Delta X} = -\frac{P_X}{P_Y}$$
&lt;p&gt;
The higher is the price of X, the steeper the slope.</data></node>
    <node id="#25:261" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The optimal choice of X and Y for the consumer is the combination which maximizes her utility given her budget constraint.  To understand this choice suppose, for example, that good X generates a higher marginal utility relative to its price than the marginal utility of good Y relative to its price, namely:
&lt;p&gt;
$$ \frac{MU_X}{P_X} &gt; \frac{MU_Y}{P_Y}$$
&lt;p&gt;
This means the marginal utility per £ spent is greater for X than for Y.  In that case, reallocating income to increasing consumption of X and reducing consumption of Y will increase total utility.
&lt;p&gt;
Conversely if:
&lt;p&gt;
$$ \frac{MU_X}{P_X} &lt; \frac{MU_Y}{P_Y}$$
&lt;p&gt;
Then utility can be increased by consuming more units of Y and fewer of X. It is only when:
&lt;p&gt;
$$ \frac{MU_X}{P_X} = \frac{MU_Y}{P_Y} $$
&lt;p&gt;
That it is not possible to shift spending from one good to the other and increase utility.  This then is the optimality condition for the consumer to be maximizing utility subject to her budget constraint.  For the consumer to have the highest utility she can afford requires that the marginal utility per £ spent is the same for all goods.
&lt;p&gt;
It can be re-written as:
&lt;p&gt;
$$ \frac{MU_X}{MU_Y} = \frac{P_X}{P_Y}$$
&lt;p&gt;
This equates the (absolute) slope of the indifference curve to the (absolute) slope of the budget constraint.  And, as we know, the ratio of marginal utilities is the marginal rate of substitution between the two goods:
&lt;p&gt;
$$ MRS_{XY} = \frac{MU_X}{MU_Y}$$
&lt;p&gt;
&lt;p&gt;</data></node>
    <node id="#25:262" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Suppose the price of good X decreases. The total effect of this price change on quantities of X and Y consumed can be decomposed into an income effect and a substitution effect.  These effects actually occur simultaneously but we can study them separately.  Before doing so, we will work through an example of the total effect of a price change.
&lt;p&gt;
&lt;i&gt; The total effect of a price change &lt;/i&gt;
&lt;p&gt;
As an example, suppose initially that:
$$ U = XY$$
$$ MU_X = Y $$
$$ MU_Y = X $$
&lt;p&gt;
Assume that:
$$ I = 120, P_X = 4, P_Y = 1$$
&lt;p&gt;
The budget constraint is:
$$ I = P_{X}X + P_{Y}Y = 120 = 4X + Y$$
&lt;p&gt;
At the optimum:
&lt;p&gt;
$$  \frac{MU_X}{P_X} = \frac{MU_Y}{P_Y} $$
$$ \implies \frac{Y}{4} = \frac{X}{1}$$
$$ \implies Y = 4X$$
&lt;p&gt;
Substituting this into the budget constraint for Y gives:
&lt;p&gt;
$$ 120 = 4X + Y = 8X $$
$$ \implies X = 15$$
$$ \implies Y = 60$$
&lt;p&gt;
The consumer’s utility is:
&lt;p&gt;
$$ U = XY = 900$$
&lt;p&gt;
Now assume the price of good X falls from   PX=4 to PX=1 all else equal.
&lt;p&gt;
At the optimum:
&lt;p&gt;
$$ \frac{MU_X}{P_X} = \frac{MU_Y}{P_Y}$$
$$ \implies \frac{Y}{1} = \frac{X}{1} $$
$$ \implies Y = X $$
&lt;p&gt;
Substituting for Y in the budget constraint gives:
&lt;p&gt;
$$ 120 = X + Y = 2X$$
$$ \implies X = 60$$
$$ \implies Y = 60$$
&lt;p&gt;
The consumer’s utility is:
$$ U  = XY = 3600$$
&lt;p&gt;

The total effect of the fall in the price of X had caused consumption of X to increase from 15 to 60 and consumption of Y to remain unchanged at 60.  
In other words, the total effect for X is an increase in consumption of 45 units and zero change for Y.
Utility has risen fourfold from 900 to 3600.
The total effect of the price change can be decomposed into the substitution effect and income effect.
&lt;p&gt;
&lt;i&gt;The substitution effect of a price change&lt;/i&gt;
When relative prices change, consumers will substitute the now relatively cheaper good in place of the relatively more expensive good.  This is the substitution effect.  As the price of good X falls relative to good Y, the consumer always purchases more of X and less of Y according to the substitution effect.
It is identified by a movement along the indifference curve.  In other words, it is derived as the substitution of X in place of Y holding utility fixed at its original level.  The substitution effect always works in the opposite direction to the price change.  If the relative price of X declines, the consumer always buys more X and vice versa.
We derived above the optimality condition following the price change, namely:
&lt;p&gt;
$$ \frac{MU_X}{P_X} = \frac{MU_Y}{P_Y}$$
$$ \implies \frac{Y}{1} = \frac{X}{1} $$
$$ \implies Y = X $$
&lt;p&gt;
Given that the substitution effect is calculated holding utility fixed, the optimality condition Y=X can be substituted into the consumer’s utility function:
&lt;p&gt;
$$ U = XY = 900 = X^2$$
$$ \implies X = 30 $$
$$ \implies Y = 30 $$
&lt;p&gt;
(given X and Y cannot be negative).
According to the substitution effect then, the fall in the price of X has increased consumption of X from 15 to 30 units and reduced consumption of Y from 60 to 30 units.
In other words, the substitution effect for X is an increase of 15 units and the effect for Y is a decrease of 30 units.
&lt;p&gt;
&lt;i&gt;The income effect of a price change&lt;/i&gt;
&lt;p&gt;
The price change also increases purchasing power of a given level of money income (I=120 in this example).  The consumer is richer in the sense that she now has more consumption possibilities and can in principle buy more of both X and Y and add to her utility.
The easiest way to calculate the income effect is as:
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Total effect – Substitution effect = Income effect&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Income effect for good X:&lt;/td&gt;
    &lt;td&gt;45 – 15 = 30&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Income effect for good Y:&lt;/td&gt;
    &lt;td&gt;0 – (-30) = 30&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
In the case of good X, consumption of X following the price change increases from 15 to 60 units.  The substitution component of this change is an increase in X from 15 to 30 units.  This leaves the income component which is the increase in X from 30 to 60 units.
&lt;p&gt;
In the case of good Y, consumption of Y following the price change is constant at 60 units.  The substitution component of this change is a decrease in Y from 60 to 30 units.  This leaves the income component which is the increase in Y from 30 back to 60 units.
&lt;p&gt;
As these income effects are both positive in the sense that more is consumed when purchasing power rises, this means that X and Y are both normal goods.
&lt;p&gt;
&lt;i&gt;Notes on the income effect&lt;/i&gt;
&lt;p&gt;
Note that the income effect compares consumption of X and Y assuming that relative prices are fixed at the new level following the price change.  The only thing that differs is the indifference curve (that is, the level of utility).  In the numerical example, the optimality condition with the new relative prices is Y=X.
On the original indifference curve we found:
&lt;p&gt;
$$ U = XY = 900 = X^2$$
$$ \implies X = 30$$
$$ \implies Y = 30$$
&lt;p&gt;
On the new indifference curve we found:
&lt;p&gt;
$$ U = XY = 3600 = X^2$$
$$ \implies X = 60$$
$$ \implies Y = 60$$
&lt;p&gt;</data></node>
    <node id="#25:263" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Production costs are usefully divided into short run and long run costs.  In the short run, the firm faces some fixed factors of production, such as capital, while other inputs, such as labour and raw materials, are variable.  Expenditure on these inputs constitute the firm’s fixed costs and variable costs respectively.</data></node>
    <node id="#25:264" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Fixed costs (FC), sometimes called overhead costs, do not vary with output and need to be paid by the firm even if the quantity of output is zero. For example, the owner of pizzeria needs to pay rent for the restaurant space no matter how many pizzas are served.  In the long run, all inputs are variable and the firm has no fixed costs. Fixed costs can be either avoidable or sunk.</data></node>
    <node id="#25:265" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Avoidable costs are those fixed costs which can be recovered if the firm stops operating and produces zero output.  For example, a firm may be able to sublet building and machinery to another company.  As a result, it avoids paying these fixed costs itself.</data></node>
    <node id="#25:266" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Sunk costs are fixed costs which can never be recovered even if the firm shuts down and sells its business and assets.  If, for example, a firm has signed a long term rental contract for a building and is not permitted to sublet, then the rent is a sunk cost.  It cannot be recovered even by closing and producing nothing.</data></node>
    <node id="#25:267" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">An important economic prediction is that sunk costs are sunk and should not affect production decisions in the present.  They are lost forever so cannot affect the costs and benefits of current choices.  Suppose, for example, the firm considers the choice of either (1) shutting down or (2) continuing to operate.  If the firm shuts down, sunk costs are unaffected since they are already paid.  If the firm continues to operate, sunk costs are unaffected since they are already paid.  This means that sunk costs should not enter the decision to shut down or to continue operating.&lt;p&gt;
However, there is a powerful behavioural tendency for producers and consumers to consider sunk costs when making choices.  They are difficult to ignore and people pay attention to them.  This is called the sunk cost fallacy.
&lt;p&gt;
&lt;i&gt;Examples of the sunk cost fallacy&lt;/i&gt;&lt;p&gt;
An example is investment by the British and French governments in the supersonic jet Concorde in the 1960s.  The project cost six times more than initial estimates.  The project could have stopped when it was clear how expensive it was becoming and that it was unlikely to be profitable.  However, the governments felt that too much had already been invested to quit half way through and this investment would then be wasted.  This is the classic sunk cost fallacy in action.
&lt;p&gt;
Another example is membership of the gym.  Members have paid a fixed upfront fee, say, £300.  This fee is a sunk cost, money which is already spent and cannot be recovered.  When choosing whether to attend the gym in the evening or spend time watching television, the membership fee already paid is irrelevant to the decision according to economic theory</data></node>
    <node id="#25:268" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Variable costs (VC) are directly related to the quantity produced. A good example is raw material inputs as the firm will purchase a quantity of raw materials that corresponds to the quantity of output it intends to produce.  Simple models often focus on labour as the only variable input.  In that case, variable costs are the same as total spending on labour (L): $$ VC = wL $$
&lt;p&gt;
Where w is the wage rate per unit of labour.  If we know the (short run) production function then we can also re-write VC in terms of output Q.  For example, suppose: 
$$ Q = \sqrt{L} $$
$$ \implies L = Q^2$$
$$ \implies VC = wQ^2$$
The important point that this algebra illustrates is that variable costs depend on the specification of the production function which relates inputs to outputs.</data></node>
    <node id="#25:269" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Total costs are simply the sum of fixed and variable costs of output.  They can be represented by the following equation:
$$ TC = FC + VC$$
In the long run,  FC = 0 therefore
$$ TC = VC $$</data></node>
    <node id="#25:270" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">&lt;i&gt; Average Total Cost (AC or ATC &lt;/i&gt;
This is defined as total costs divided by the level of output; the per-unit cost of producing a good:
$$ AC = \frac{TC}{Q}$$
The average cost function is often quadratic, which means its curve is normally U-shaped.  Average costs comprise the sum of average variable costs (AVC) and average fixed costs (AFC).
$$ AC = AVC + AFC$$
&lt;p&gt;
&lt;i&gt; Average Variable Cost (AVC) &lt;/i&gt;
The average cost function is often quadratic, which means its curve is normally U-shaped.  Average costs comprise the sum of average variable costs (AVC) and average fixed costs (AFC).
$$ AC = AVC + AFC$$
&lt;p&gt;
&lt;i&gt;Average Variable Cost (AVC)&lt;/i&gt;
This is defined as the per-unit variable cost of producing a good:
$$ AFC = \frac{FC}{Q}$$
Given that fixed costs are fixed at a given level, this means that, as output rises, average fixed cost will decline.  In other words, the same fixed costs will be spread over a larger and larger level of production.</data></node>
    <node id="#25:271" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Marginal cost (MC) is the additional cost that the production of every consecutive unit of the good incurs. It can be computed as:
$$ MC(Q) = TC(Q + 1) - TC(Q)$$
Equivalently, marginal cost is the slope of the total cost curve:
$$ MC = \frac{\Delta TC}{\Delta Q}$$
As fixed costs do not change with output, it is also the case that marginal cost is the slope of the total variable cost curve:
$$ MC = \frac{\Delta VC}{\Delta Q}$$
If labour is the only variable input then variable costs are the same as total spending on workers:
$$ VC = wL $$
Assuming the wage is fixed, then any change in the labour input is reflected directly in the change in variable costs:
$$ \Delta VC = w\Delta L$$
We can use this result to re-write the expression for marginal costs:
$$ MC = \frac{\Delta VC}{\Delta Q} = \frac{w\Delta L}{\Delta Q}$$
Since
$$ \frac{\Delta L}{\Delta Q}$$
is the reciprocal of the marginal product of labour then:
$$ MC = \frac{\Delta L}{\Delta Q} = \frac{w}{MP_L} $$
With wages fixed, the marginal cost of a unit of output depends on the marginal product of labour.  Under the law of diminishing marginal productivity, as output increases, the marginal product of labour declines and marginal costs rise.  Intuitively, when the marginal product of labour is low, more workers are needed to produce each additional unit of output so the marginal cost of that output will be high.</data></node>
    <node id="#25:272" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The minima of average variable costs and average total costs occur at the points where the marginal cost curve intersects these curves.  This is because when MC is less than AC then AC must be falling with output and when MC is greater than AC then AC must be rising. When MC=AC this implies that AC is at its minimum value (likewise for AVC).</data></node>
    <node id="#25:273" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Economies of scale are a measure of how the total cost of production reacts to a scaling of production quantity.&lt;p&gt; 
More specifically, economies of scale refer to the case when an upscaling of production by a factor z causes production costs to scale up by less than that factor. For example, economies of scale imply that if z = 2 and output doubles, the total cost of that output less than doubles. As a result, average costs of production are falling and the firm is on the left side of the U-shaped long run average cost curve.
&lt;p&gt;
Diseconomies of scale refer to the case when an upscaling of production by a factor z causes production costs to scale up by &lt;b&gt;more&lt;/b&gt; than that factor. For example, diseconomies of scale imply that if z = 2 and output doubles, the total cost of that output more than doubles. As a result, average costs of production are rising and the firm is on the right side of the U-shaped long run average cost curve.&lt;p&gt;
In the case where an upscaling of production by a factor causes total costs to rise by &lt;b&gt;exactly&lt;/b&gt; that factor, we say we have constant economies of scale as average costs are unchanged.  This occurs at the bottom of the long-run average cost curve when it is flat.</data></node>
    <node id="#25:274" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Market structure refers to the characteristics of the supply side of the market regarding the level and type of competition between firms.  The module discusses four market structures.  They are (i) Perfect Competition; (ii) Monopoly; (iii) Oligopoly and; (iv) Monopolistic Competition.  These market structures are distinguished by the number of firms, whether the goods are identical or differentiated, the existence of barriers to entry and exit, and the extent of the power of the firm to set prices.</data></node>
    <node id="#25:275" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Perfect competition is an idealised model of a market where there is a large number of firms producing an identical product and no barriers to prevent new firms entering the market or existing firms exiting the market in the long run. While no market satisfies these strong assumptions, the model is very useful approximation for highly competitive markets such as that for tomatoes. 
Under these conditions, individual firms have no market power to set prices.  They are price takers rather than price setters.  The equilibrium price is determined by the forces of demand and supply in the market.  This market price, then, is given to firms; they take it as pre-determined and exogenous.</data></node>
    <node id="#25:276" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">As the individual firm is a price taker, it faces a horizontal demand curve at the equilibrium market price Pe. The firm is so small relative to the market that its production decision has no influence on the market and the firm can sell as much as it wishes at that price. As it is horizontal, the demand function facing the firm is perfectly elastic. If the firm’s price was above the equilibrium P&gt;Pe the firm would sell nothing as consumers can always buy the identical product from another firm at Pe. If the firm’s price was below the equilibrium P&lt;Pe it could not possibly increase its profits since it can already sell as output as it wishes at Pe. The firm does not choose the price, rather it chooses how much output to produce taking the price as given.</data></node>
    <node id="#25:277" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Profit is the difference between the total revenue and the total cost of the firm.
$$ \Pi = TR - TC $$
Total revenue is equal to the product of the market price and quantity sold:
$$ TR = P\times Q $$
So we can express profit as follows:
$$ \Pi = P\times Q - TC$$
Since
$$ ATC = \frac{TC}{Q}$$
$$ \implies TC = ATC\times Q$$
$$ \Pi = P\times Q - ATC\times Q$$
$$ \Pi = (P - ATC)Q $$
ATC is Average Total Cost. This equation shows us that the sign of the difference between price and ATC determines whether the firm makes positive or negative profit (that is, a loss).
&lt;p&gt;
In the &lt;em&gt;long run&lt;/em&gt;, since all costs are variable, we can equivalently write the expression for profit as:
$$ \Pi = (P - AVC)Q$$</data></node>
    <node id="#25:278" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A famous rule in economics is that a firm maximises its profits π at the output level which ensures that marginal cost (MC) equals marginal revenue (MR). 
$$ \Pi = \Pi_{max} where MC = MR$$
&lt;em&gt;Marginal Revenue&lt;/em&gt;&lt;p&gt;
Marginal revenue is the additional revenue from the sale of an additional unit.  Mathematically it is given by:
$$ MR = \frac{\Delta TR}{\Delta Q}$$
Where TR is total revenue.  Since every unit is sold at the market price then it must be true that marginal revenue equals this price in perfect competition:
$$ MR = P$$
Every additional unit sold will add exactly the same amount to total revenue, namely the market price.
&lt;p&gt;
&lt;em&gt;Marginal Cost&lt;/em&gt;&lt;p&gt;
The marginal cost (MC) of an additional unit of output reflects the marginal productivity of inputs.  If the productivity of inputs is relatively low then more need to be hired to produce an additional output such that the marginal cost of producing that extra output is relatively high.  In the short run, if labour is the only variable input then marginal costs will be increasing when the marginal returns to the labour input are diminishing.
&lt;p&gt;&lt;em&gt;Marginal Profit&lt;/em&gt;&lt;p&gt;
For a given level of output, then, the difference between marginal revenue and marginal cost represents the difference between the additional revenue from one more unit sold minus the additional cost its production will incur.  In other words, &lt;em&gt;MR-MC&lt;/em&gt;  is the marginal profit from the additional unit of output.&lt;p&gt;
If:
$$ MR - MC &gt; 0 $$
his means that increasing production by one unit will increase profit.  This gives the producer an incentive to expand production. Indeed, the firm will continue to increase output until:
$$ MR - MC = 0 $$
Which is when there is no further gain from doing so. An increase in production beyond that point will decrease profits, since &lt;em&gt;MR-MC&lt;/em&gt; will fall below zero. &lt;p&gt;
So the firm chooses to produce the level of output where $$MR=MC$$  This is the condition which must be satisfied for profit maximisation.
Given that $$P=MR$$ for a perfectly competitive firm, it is also the case that profit in perfect competition will be maximised at the level of output where $$P=MC$$ given that $$MR=MC$$</data></node>
    <node id="#25:279" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Shutdown price
Maximising profit doesn’t always mean making a profit. In some cases, the best a firm can do in a market is to minimise its losses. Making a loss does not necessarily mean that the firm should shut down, at least not in the short run.  This is because shutting down in the short run may generate greater losses then continuing to operate at some positive level of output.  The reason is that even if the firm shuts down it has to pay its fixed costs if these are sunk costs which cannot be recovered.  Of course, it also has to pay these fixed costs if it continues to operate.  As the sunk cost fallacy warns us, sunk costs should not influence decision making.  Whether the firm shuts down or not, it will still incur the fixed costs.&lt;p&gt;
The shutdown decision then depends on the variable costs of production (VC) and how these compare with the total revenue (TR) from continuing to operate.  If this revenue is sufficient to cover variable costs $$TR&gt;VC$$ then it is better to continue to produce output.&lt;p&gt;
Dividing by Q, the condition can be alternatively represented as the firm should continue producing if:
$$ P &gt; AVC $$
Only if price falls below the &lt;b&gt;minimum value of AVC&lt;/b&gt; should the firm shutdown. In that case, the price is so low that firm is unable to cover its variable costs of production and shutting down is preferable. It is conventional to call:
$$ P = minimum AVC$$ the &lt;b&gt;shutdown price&lt;/b&gt; where the firm is indifferent between producing and shutting down.  Since this is the minimum value of the AVC curve, it is also the case that the marginal cost curve passes through this point and AVC = MC.
&lt;p&gt;
In the long run when all costs are variable, the firm would exit the industry if it is unable to earn profits.  This is the case when $$P&lt;minimum LATC$$ where LATC is long run average total cost.</data></node>
    <node id="#25:280" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The quantity supplied is determined by the profit maximising condition: $$MC=MR$$ 
Since P=MR then P=MC and for each given level of price it is the marginal cost curve which determines how much output is produced.  The marginal cost curve is, therefore, the firm’s short run supply curve.  Since the firm shuts down at a price level below the minimum of average variable costs, this means the supply curve is restricted to the portion of the marginal cost curve above the point where $$MC=AVC$$.</data></node>
    <node id="#25:281" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">We obtain the industry supply curve from the individual supply curves of firms by simply adding up the production quantities of all firms at a given price. For example, with 100 firms who produce 2 units at P=3, the whole industry will produce 200 units at P=3.  Market supply then is given by the sum of the marginal cost curves of each individual firm. The market price is determined as usual by the intersection of the industry demand and industry supply curve.</data></node>
    <node id="#25:282" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The producer surplus: $$PS$$ is the area between the price level and the marginal cost curve as this is the individual firm’s supply curve. 
Mathematically, we can represent the producer surplus (for a discrete good, i.e. a good which can only occur in whole number quantities, like a TV) in the following way for each unit of output:
$$ Q = 1, 2, ..., Q^*$$ where $$Q^*$$ is the profit maximising level of output:
$$ PS = (P - MC(1)) + (P - MC(2)) + ... + (P - MC(Q^*))$$
Rearranging:
$$ PS = P\times Q^* - [MC(1) + MC(2) + ... + MC(Q^*)]$$
Therefore $$P\times Q^*$$ is the firm&apos;s total revenue. The sum of the marginal costs of each unit is the same as the firm’s total variable costs.  This is because marginal costs do not add to fixed costs.  To summarise, we have:
$$ PS = TR - VC $$
Since we know that
$$ AVC = \frac{VC}{Q} \implies VC = AVC\times Q$$
We can re-write the expression for producer surplus as:
$$ PS = P\times Q^* - AVC^* \times Q^*$$
$$ PS = (P - AVC^*)Q^*$$</data></node>
    <node id="#25:283" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The difference between producer surplus and profit is related to fixed costs and defined as follows:
&lt;p&gt;
&lt;em&gt;Producer Surplus&lt;/em&gt;
$$ PS = TR - VC $$
&lt;em&gt;Profit&lt;/em&gt;
$$\Pi = TR - TC = TR  - VC  - FC $$
This implies that:
$$ \Pi = PS - FC$$
The firm can operate in the short run with a negative profit (a loss) but will never operate with a negative producer surplus since that would mean the revenue would not cover variable costs.  In other words, the firm would shut down if producer surplus is negative.</data></node>
    <node id="#25:284" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Perfectly competitive markets in the long run differ in significant ways from the short run.&lt;p&gt;
1) All inputs are variable and, as a result, there are no fixed costs.  Total costs and variable costs are, therefore, identical.  Likewise long run average total costs (LATC) and average variable costs (LAVC) are the same.&lt;p&gt;
2) In the long run, the firm shuts down if production is unprofitable and price is below the minimum of the long run average total cost curve.  The shutdown price is given by &lt;em&gt;P=minimum LATC&lt;/em&gt; where the firm is indifferent between leaving the market and continuing to operate.</data></node>
    <node id="#25:285" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A firm will enter the market if it expects to make a profit. This means that, for entry to occur, price would have to exceed long-run average total cost (LATC). The entry of a new firm in the market will increase supply in the market and put downward pressure on the market price. As more and more firms enter the market, the price is eventually reduced to the long run competitive equilibrium where &lt;em&gt;P=LMC=minimum LATC&lt;/em&gt; where LMC is long run marginal cost.  At this point no potential entrant will choose to enter the market, since expected profit is zero.
&lt;p&gt;
In a perfectly competitive market in equilibrium no firm makes any profit, in the sense of economic profit. The accounting profit they make is just enough to keep them in business and make them equally as well off as any outside option, but no more than that.</data></node>
    <node id="#25:286" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Suppose the market price is below the level of minimum average total cost. In such a case, firms already in the industry are making losses and will choose to exit.  As the number of firms diminishes, the supply curve shifts up and to the left and this will put upward pressure on the market price until the long run competitive equilibrium is attained in which price now equals the minimum average total cost, losses are eliminated and profits are zero. It is realistic to assume that there are cost differences between firms and the firms with costlier production will be those who exit first.</data></node>
    <node id="#25:287" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">An appealing property of perfectly competitive markets is that they produce the quantity of output which maximises total surplus.  In a competitive market, price equals marginal cost in equilibrium.  This means that all output for which the value to buyers (the price) exceeds the cost to sellers (the marginal cost) is produced. Moreover, no output for which the value to buyers (the price) is less than the cost to sellers (the marginal cost) is produced.  As a result social welfare is maximised.</data></node>
    <node id="#25:288" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A monopoly is a single seller who, therefore, faces all of the market demand for their product. This is why a monopolist’s demand curve is downward sloping.  The monopolist has market power to set the price of its output.</data></node>
    <node id="#25:289" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Barriers to entry are factors which prevent firms from easily entering a market and competing profitably.  They are the source of market power which permit monopoly profits to persist.</data></node>
    <node id="#25:290" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Natural monopoly refers to a context in which the average total cost curve of a firm exhibits economies of scale. In other words, the average total cost of the monopolist will fall as quantity increases. Average total costs are the sum of average fixed costs and average variable costs.
$$ ATC = AFC + AVC $$
Equivalently:
$$ ATC = \frac{FC}{Q} + AVC $$
Assuming that fixed costs (FC) are high and average variable costs (AVC) are fairly constant as output changes, then average total costs (ATC) are dominated by fixed costs. As output increases, AFC decline and so do ATC. If an incumbent firm monopolises the market and so benefits from very low ATC it will be difficult for another firm to enter the market and compete for market share as the entrant’s ATC will be much higher given its smaller level of production. In this sense, the existence of a natural monopoly acts as a barrier to entry. Nevertheless, it is socially efficient for such an industry to have only one single producer, as every other firm would have to duplicate very high fixed costs.&lt;p&gt;
There are several industries which are good examples of natural monopolies. Among them are electricity transmission, nationwide railways and postal services. The fixed costs in these industries are huge and the presence of more than one firm sharing the market would raise average costs substantially. Given their market dominance, natural monopolists are often regulated by governments to prevent firms from extracting excessive profits from their market power.</data></node>
    <node id="#25:291" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Switching costs are a barrier to entry. They refer to barriers which discourage a customer from switching to a competitor product. An example would be a customer who receives frequent flyer benefits from an airline. Even if a competitor company offers lower prices, the customer will be reluctant to use their services for fear of losing their existing frequent flyer status and the benefits it generates. Consumers’ switching costs may be sufficient in some cases to deter competitors from entering a market.&lt;p&gt;
An important case of switching costs is found in network goods – goods whose value to the consumer rises with the number of other customers who use them. An example of a network good is social media such as Facebook. Users are typically reluctant to switch from a social network with billions of users to another with only a few.</data></node>
    <node id="#25:292" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Consumers do not necessarily see all products on a market as perfect substitutes for each other and often have a preference for a particular brand, for example, Apple products, and are willing to pay a price premium to purchase the good.  Such loyalty generates a degree of market power for the favoured brand and a barrier to successful competition from rivals.</data></node>
    <node id="#25:293" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">If a firm manages to control a key input to production, it can make it costly for every potential competitor to obtain this input, and thus prevent them from entering the market.</data></node>
    <node id="#25:294" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Patents are also barriers to entry in that they provide legal protection from market competition and so confer monopoly power on an inventor. The intention of patents is to incentivise innovation and technological progress. Innovation creates a public good since it either makes production processes more efficient and lowers prices or else introduces new products to the market, adding to consumer surplus in both cases. Innovation however, often comes with high research and development (R&amp;D) costs and requires the use of expensive, highly-qualified labour input. These very large fixed costs require the incentive of monopoly profits to make R&amp;D investment worthwhile. Patenting an innovation provides the inventor with a monopoly over the production and sale of the new technology or product for a number of years (16 years in the UK). The patent thus generates a welfare trade-off.  There is a (deadweight) loss of surplus arising from monopoly pricing during the patent period but also a gain arising from the benefits of new innovations.</data></node>
    <node id="#25:295" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In a perfectly competitive market, the additional (marginal) revenue generated by the sale of one more unit of a good equals the price of that product.  However, the monopolist faces a downward sloping demand curve.  This means that in order to sell an additional unit the firm must reduce the price.  There are two opposite effects on total revenue.  First, additional revenue is generated from the sale of the extra unit equal to the selling price.  But, second, the price also declines for all other the units sold which were previously on sale at a higher price.  The net result is that marginal revenue will be less than price for a monopolist.
&lt;p&gt;
Assume the following linear form of the inverse demand function:
$$ P = a - bQ$$
Where a and b are constants. The slope is given by:
$$ \frac{\Delta P}{\Delta Q} = - b &lt; 0$$
Marginal revenue equals the slope of total revenue.
$$ MR = \frac{\Delta TR}{\Delta Q}$$
Total revenue can be written:
$$ TR = P\times Q = (a - bQ)Q = aQ - bQ^2$$
The slope of this quadratic total revenue function is marginal revenue and is given by (you do not need to know how to derive this slope but it will be obvious to those familiar with calculus):
$$ MR = a - 2bQ$$
The important point is that marginal revenue itself has a slope of &lt;em&gt;-2b&lt;/em&gt;, that is, it is twice the slope of the inverse demand function. The inverse demand curve and the MR curve also have the same intercept on the vertical axis at &lt;em&gt;a&lt;/em&gt;.
&lt;p&gt;
As in all market structures, profit is maximised at that level of output Q* where marginal cost equals marginal revenue:
$$ MC = MR $$
Substituting for MR, we have:
$$ MC = a - 2bQ^*$$
Since
$$ P = a - bQ^*$$
It is the case that under monopoly:
$$ P &gt; MC$$
&lt;p&gt;
To see this note that:
$$ P-MC=(a-bQ^*)-(a-2bQ^*)=bQ^*&gt;0$$
The difference between price and marginal cost bQ* is known as the firm’s price &lt;em&gt;markup&lt;/em&gt;.&lt;p&gt;
As usual, profit is the difference between the total revenue and the total cost of the firm.
$$ \Pi = TR - TC$$
Total revenue is equal to the product of the market price and quantity sold:
$$ TR = P\times Q$$
So we can express profit as follows:
$$ \Pi = P\times Q - TC$$
Since
$$ ATC = \frac{TC}{Q} \implies TC = ATC\times Q$$
$$ \implies \Pi = P\times Q - ATC\times Q$$
$$ \Pi = (P - ATC)Q$$
A &lt;em&gt;monopolist will never choose an output level where demand is price inelastic&lt;/em&gt;.  The reason is that if it does so the monopolist can always increase profits, increase revenue and reduce costs by choosing a lower output level and a higher price.  To see this, note that total revenue is maximised at the output level where marginal revenue is zero:
$$ MR = a - 2bQ  = 0 \implies Q = \frac{a}{2b}$$
This revenue maximising output level is at the midpoint of the demand curve where the price elasticity of demand equals one.  Any other output level will generate lower total revenue.  A higher output level, say $$Q^H$$, on the inelastic portion of the demand curve, not only reduces revenue but also increases costs.  Contrast this with a lower output level, say $$Q^L$$ on the elastic portion of the demand curve, which happens to give the same revenue as at $$Q^H$$  Producing less output at $$Q^L$$ will necessarily have lower costs than at $$Q^H$$  If total revenue is the same at each of these two output levels then profit must be higher at $$Q^L$$ than $$Q^H$$.</data></node>
    <node id="#25:297" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Compared to competitive markets, monopolists increase price and reduce quantity produced.  As a result, there are fewer gains from trade which causes a loss in social welfare.  More specifically, since under monopoly price is greater than marginal cost, &lt;em&gt;P&gt;MC&lt;/em&gt;, there are transactions which would be of mutual benefit to both parties, as the value to the buyer (P) exceeds the costs to the seller (MC), but which do not occur.  Monopoly then creates a deadweight loss.  The higher prices under monopoly reduce consumer surplus and increase producer surplus compared to perfect competition.  Welfare is further adversely affected by the incentives which firms face to invest resources in acquiring a monopoly status or protecting a monopoly position.  Firms may spend large sums, for example, in lobbying governments to make decisions which favour them.  This activity is known as rent seeking (rent here refers to profit) and is a social waste since it is essentially attempting to benefit one firm at the expense of rivals.</data></node>
    <node id="#25:298" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Given that monopoly generates losses in social welfare, governments are active in regulating market power in order to protect the consumer.</data></node>
    <node id="#25:299" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Prices may be directly regulated in cases of natural monopoly in order to prevent a firm from using its market power to exploit consumers.  This can be achieved by the government placing a cap on the market price. Such price regulation would be fully socially efficient if price is set equal to the firm’s marginal cost.
&lt;p&gt;
However, there is a serious problem with such regulation in that it would result in the natural monopolist making sustained losses. 
&lt;p&gt;
Consider a total cost function for a natural monopoly given by:
$$ TC = a + bQ$$
Where &lt;em&gt;a&lt;/em&gt; is greater than 0 and represents the firm’s fixed costs. The associated average cost function is:
$$ ATC = \frac{a}{Q} + b $$
As &lt;em&gt;Q&lt;/em&gt; rises,$$\frac{a}{Q}$$ decreases and so do average total costs.  This is the case of economies of scale which is a defining characteristic of a natural monopoly.
&lt;p&gt;
By setting price equal to marginal cost, the government regulator imposes:
$$ P = MC = b$$
The reason why marginal cost is equal to b is because this is the slope of the total cost curve:
$$ TC = a + bQ$$
The profit of the firm equals its total revenue minus total costs:
$$\Pi=TR-TC=P×Q-TC=bQ-(a+bQ)=-a $$
And because &lt;em&gt;a&lt;/em&gt; is always greater than 0 the firm will face loses. To put it another way, as output increases, ATC converge towards b as $$\frac{a}{Q}$$ diminishes:
$$ ATC = \frac{a}{Q} + b$$
but always remain above &lt;em&gt;b&lt;/em&gt;. If price is set at:
$$ P = MC = b$$
then price exceeds ATC and profit must be negative:
$$ \Pi = (P - ATC)Q &lt; 0$$

If the government can directly observe the marginal cost of the natural monopolist (a case of symmetric information), the firm will additionally have no incentive to reduce the costs of production and make it more efficient, since the government will respond by further decreasing the equilibrium price which will eat up any gain the firm obtains from the increased efficiency. Conversely, if the government cannot directly observe the firm’s marginal cost (a case of &lt;em&gt;asymmetric information&lt;/em&gt;), the firm has an incentive to report higher marginal costs to the government than is actually true in order for the price to be set above the actual marginal cost and for the firm to make a profit.</data></node>
    <node id="#25:300" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Antitrust legislation (also called competition policy) is intended to promote competition within markets by restricting firms from acting in a way that prevents competitors from entering and thriving in the market. Such legislation is particularly often used in industries where there are one or a few established firms with market power. Antitrust laws can, for example, prevent a big firm from acquiring some of its competitors, or mandate the break-up of a large firm which is deemed to have too much market power. Antitrust legislation tends to be very strong in high-income countries but weaker elsewhere.
&lt;p&gt;
One of the strongest prohibitions in most antitrust legislation is the ban on &lt;em&gt;collusion&lt;/em&gt; – cooperation between competing firms in the market. In the US, for example, discussing pricing strategies with your competitors is a criminal act.
&lt;p&gt;
A problem arises with antitrust legislation if it prevents mergers and acquisitions (M&amp;As) which would actually make the market more efficient and make consumers better off. At times, these ‘good’ M&amp;As are hard to distinguish from ‘bad’ M&amp;As which would harm customers.</data></node>
    <node id="#25:301" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A market structure where all firms have some market power, but do not have complete market power. In the sense of, they can control their prices to extract some abnormal (nonzero) economic profit but the presence of other firms in the market prevents them from being able to extract monopoly levels of profit.</data></node>
    <node id="#25:302" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Oligopoly is a market in which a small number of firms compete. The name is derived from the Greek words &lt;i&gt;oligos&lt;/i&gt; (‘several’) and &lt;i&gt;polein&lt;/i&gt; (‘to sell’).</data></node>
    <node id="#25:303" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Collusion is defined as behaviour in which firms coordinate their actions and collectively act as a monopoly in order to extract monopoly profits. A cartel is a form of collusion in which firms collectively act as a monopoly in the market. In some contexts, the term cartel refers to cases where collusion arises in an explicit written agreement between the firms.
&lt;p&gt;
&lt;i&gt;Cartels tend to be unstable since&lt;/i&gt;, once in a cartel, every company can achieve higher profits by breaking the cartel agreement and selling their produce at a slightly lower price. This, however, is contingent on all other cartel members not breaching the agreement themselves. If every company acts on the incentive to breach the agreement, outputs will grow, prices will go down, eventually stabilizing at the competitive level, and profits will be decreased as a result. This will, in turn, create a new incentive to form a cartel.</data></node>
    <node id="#25:304" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Cournot oligopoly is a model of the market where firms sell identical products and every company chooses what quantity to produce. All goods are sold for the same price, which is determined by the total quantity produced by all firms in the market. Firms choose quantities simultaneously and there is no communication between them.
&lt;p&gt;
&lt;i&gt;Equilibrium in a Cournot oligopoly&lt;/i&gt;:
Suppose we have two firms in a Cournot competitive oligopoly. (an oligopoly with two firms is also called duopoly). They produce an identical good which has the following demand curve:
$$ P = a - bQ$$
The marginal cost of Firm 1 is $$mc1$$ and the marginal cost of Firm 2 is $$mc2$$
Let’s call the quantity the first firm produces Q1 and the quantity the second firm produces Q2. Obviously:
$$ Q = Q_1 + Q_2$$
We can plug that into our first equation which will yield:
$$ P = a - bQ_1 - bQ_2$$
Now, we have to look at the market from the perspective of each firm. Let’s start with Firm 1. Firm 1 does not know the quantity Firm 2 is intending to produce, so it is going to treat Q2 as a constant. For convenience we’re going to rewrite the price equation as follows:
$$ P = (a - bQ_2) - bQ_1$$
$$Let A = a - bQ_2$$
$$ P = A - bQ_1$$
This equation is called Firm 1’s &lt;b&gt;residual demand curve&lt;/b&gt;.
&lt;p&gt;
On the basis of this residual demand curve, Firm 1 can maximise its profits by equating marginal revenue to marginal cost. The &lt;b&gt;residual marginal revenue of Firm 1&lt;/b&gt; has twice the slope of the residual demand curve.
$$ MR_1 = A - 2bQ_1$$
After setting it equal to  MC:
$$ MR_1 = MC_1$$
$$A - 2bQ_1 = mc_1$$
$$Q_1 = \frac{A - mc_1}{2b}$$
Substituting for our A:
$$ Q_1 = \frac{a - bQ_2 - mc_1}{2b}$$
$$ Q_1 = \frac{a - bQ_2 - mc_1}{2b}$$
$$ Q_1 = \frac{a - mc_1}{2b} - \frac{1}{2}Q_2$$
We get an expression of the optimal quantity of Q1 as a function of Q2. This equation is called Firm 1’s &lt;b&gt;reaction curve&lt;/b&gt;. By convention, Q2 is plotted on the vertical axis and Q1, so let’s rewrite it in terms of Q1:
$$ Q_2 = \frac{a - mc_1}{b} - 2Q_1$$
In the same way we used for Firm 1, we can derive Firm 2’s reaction curve:
$$ Q_2 = \frac{a - mc_2}{2b} - \frac{1}{2}Q_1$$
If we set the two equations above equal to each other, we can derive the optimal quantities of Q1 and Q2, which are the best responses of each firm to the actions of its competitor.
$$ \frac{a- mc_1}{b} - 2Q_1 = \frac{a- mc_2}{2b} - \frac{1}{2}Q_1$$
$$ -1.5 Q_1 = \frac{a - mc_2}{2b} - \frac{a - mc_1}{b}$$
$$ Q_1 = \frac{a - mc_1}{1.5b} - \frac{a - mc_2}{3b} = \frac{a - 2mc_1 + mc_2}{3b} $$
$$ Q_2 = \frac{a - mc_2}{2b} - \frac{1}{2}(\frac{a - 2mc_1 + mc_2}{3b})$$
$$ Q_2 = \frac{a - mc_2}{2b} - \frac{a - 2mc_1 + mc_2}{6b} = \frac{a - 2mc_2 + mc_1}{3b} $$
The ordered pair:
$$ (Q_1, Q_2) = (\frac{a - 2mc_1 + mc_2}{3b}, \frac{a - 2mc_2 + mc_1}{3b} )$$
represents the best response of each firm to the other one’s action. These are the quantities which the firms will end up producing on the market in the long run. They define what is called the C&lt;i&gt;ournot equilibrium&lt;/i&gt; in this duopolistic market.
The total quantity produce on this market will be:
$$ Q= Q_1 + Q_2 = \frac{2a - mc_1 - mc_2}{3b}$$
Which means the market price will be:
$$ P = a - bQ = a - b\frac{2a - mc_1 - mc_2}{3b}$$
$$ P = A - \frac{2a - mc_1 - mc_2}{3} $$
&lt;p&gt;
&lt;I&gt;Numerical Example&lt;/i&gt;
Apple (with iOS) and Google (with Android) have a joint share of almost 98% of the smartphone operation system market, making it one of the most prominent examples of a real-life duopoly. Suppose the demand-curve in the smartphone operation system market is P=20-0.5Q. The cost of fitting an additional phone with an operational system is 12 for Android and 10 for iOS. The fixed costs are 2 (million) for Android and 3 (million) for iOS. Find the number of phones which will be fitted with each operation system, the market price of the operation systems, and the amount of profit Apple and Google will be generating. 
&lt;p&gt;
Let $$Q_A$$be the number of phones fitted with Android and $$Q_I$$ be the number of phones fitted with iOS (quantities are in millions). The total demand on the market will be:
$$ Q = Q_A + Q_I$$
We can thus rewrite the demand curve as follows:
$$P=20-0.5(Q_A+Q_I)$$
Android will treat iOS’s supply as a constant, so it’s helpful to define $$A_1=20-0.5Q_I$$
Therefore $$ P = A_1 - 0.5Q_A$$
This is Android’s &lt;i&gt;residual demand curve&lt;/i&gt;. From it, we can derive Android’s &lt;i&gt;residual marginal revenue&lt;/i&gt;:
$$ MR_1 =  A_1 - Q_A$$
Android’s profit will be maximized when its residual marginal revenue equals its marginal cost:
$$MR_1=A_1 - Q_A=12$$
$$MR_1=20 - 0.5Q_I - Q_A=12$$
$$Q_A = 8-  0.5Q_I$$
This is Android’s &lt;i&gt;reaction curve&lt;/i&gt;. It shows what quantity Android would be best off putting out in response to whatever quantity iOS puts out. It tracks Android’s best response to any strategy of iOS.
For iOS, the residual demand curve is the following:
$$ P = A_2 - 0.5Q_I$$
Where $$A_2 = 20 - 0.5Q_A$$
Its residual marginal revenue is therefore: 
$$MR_2 = A_2 - Q_I$$
Again, profit is maximised where residual marginal revenue equals marginal cost:
$$MR_2 = A_2 - Q_A = 10$$
$$MR_2 = 20 - 0.5Q_A - Q_I = 10$$
$$Q_I = 10 - 0.5Q_A$$
This is iOS’s &lt;i&gt;reaction curve&lt;/i&gt;. It shows what quantity iOS would be best off putting out in response to whatever quantity Android puts out. It tracks iOS’s best response to any strategy of Android.&lt;p&gt;
The two reaction curves (of Android and iOS) are a system of equation which can be solved for the optimal values of QA and QI – the only pair of values which satisfies both best response conditions. And since each firm will try to respond to its opponent in the best possible way, these are the quantities that will end up being produced.
$$ Q_A = 8 - 0.5Q_I$$
$$ Q_I = 10 - 0.5Q_A$$
The solution to this system is $$Q_A=4, Q_I=8.$$ This means, at equilibrium, 8 million phones will be fitted with iOS and 4 million will be fitted with Android. The total quantity in the market will be Q=12. The systems will be sold for $$P=20-0.5Q  = 20 - 0.5\times 12 = 20 - 6 = 14$$ (while in reality Android sells its software to phone manufacturers, we can assume Apple sells iOS to itself, by adding the costs of it to the price of an iPhone).
To find the profits of Google (through Android), we first need to identify their total cost function. The fitting of every additional phone with Android costs 12, so the fitting of an amount of phones QA will cost 12QA. The fixed costs of Android are 2. Therefore: $$TC = 12Q_A + 2$$
Which means:
$$ \Pi_A  = TR -TC = P \times Q_A - 12Q_A - 2$$
$$ \Pi_A = 14 \times 4 - 12\times 4 - 2 = 6 (millions)$$
Similarly, the total cost function of Android is:
$$ TC =  10Q_I + 3 $$
And its profit function is:
$$ \Pi_I = TR - TC = P \times Q_I - 14Q_I - 3 $$
$$ \Pi_I = 14 \times 8 - 10 \times 8 - 3 = 29 (millions)$$
&lt;p&gt;
&lt;i&gt; Reflection&lt;/i&gt;
&lt;p&gt;
The numbers chosen in this example are arbitrary and not based on real-world data but show an important discrepancy with reality – iOS makes way less profit than Android, seriously? And as probably every person who’s ever looked to buy a phone knows, iPhones cost substantially more than Android phones – something which is totally inconsistent with the Cournot model, which assumes all firms sell their produce at the same market price. So, the real-world market for smartphone operation systems must not be a Cournot oligopoly – it should be a market in which firms can freely choose their price. Moreover, while iPhones and Android phones have the same basic functionality, consumers do not consider them perfect substitutes – iPhones have certain features which are deemed better, are thought to be more aesthetic and are to some extent a status symbol. Therefore, we need a model which encompasses the idea of product differentiation – the ability of producers to distinguish their products from similar products in order to make them more appealing to customers.
Such models do exist and are briefly explored in the “Other types of oligopoly” section on ViLO, and in more detail in your textbook.</data></node>
    <node id="#25:305" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The Bertrand model of competition is similar to the Cournot model but has one key difference: instead of choosing the quantities which they want to produce, firms choose (simultaneously) the prices at which they want to sell their goods. The total demand in the market is then determined by the pricing decisions of the two firms and the firms produce enough to meet it. &lt;p&gt;
The Bertrand model can be adapted both for markets with identical and for markets with differentiated goods.</data></node>
    <node id="#25:306" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">The Stackelberg model is also similar to Cournot in that the firms choose the quantities at which to produce and the price is determined by the total quantity the firms put out on the market. The difference is that unlike in Cournot, where the two firms choose the production quantities at the same time, independent of each other, in Stackelberg the firms choose to produce one after another (sequentially). One of the firms is a first mover in this game and chooses a production quantity. The other one observes this move and chooses its production quantity based on that first move.</data></node>
    <node id="#25:307" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A market with a large number of firms, which sell similar but differentiated products which customers do not consider perfect substitutes. For example, all the cafes in St Andrews can be said to operate in a monopolistically competitive market. Every café draws from essentially the same customer base but they all offer products which are sufficiently different for every café to be able to set its own prices to an extent. These prices do not, however, influence the pricing of their competitors and generally stay within a narrow band for comparable products.  In other words, there is no strategic interaction. It is also relatively easy to set up a new café which will increase supply and decrease profits on the market. New cafés will stop appearing once one cannot expect to make any economic profit out of the creation of a new café.
Firms are free to enter or exit a monopolistically competitive market, which means all of them make zero economic profit in the long run (entry stops when the economic profit for all firms equals 0). 
&lt;p&gt;&lt;i&gt;Numerical Example&lt;/i&gt;
&lt;p&gt;
Lisa is a farmer who produces organic acai berries. She operates in a monopolistically competitive market and faces a demand curve $$ P = 130- 2Q$$
She operates with a constant marginal cost of 10 per pack, and her total cost function is:
$$ TC = 10Q + f$$ where f is the firm&apos;s fixed costs.
&lt;ul&gt;
&lt;li&gt;Maximise Lisa’s profit&lt;/li&gt;
&lt;li&gt;Find the price at which Lisa will sell a pack of acai berry&lt;/li&gt;
&lt;li&gt;Find how much profit Lisa will be earning&lt;/li&gt;
&lt;li&gt;Find a value of f such that the market Lisa is operating in is in long-run equilibrium&lt;/li&gt;
&lt;/ul&gt;
Profit is maximized the usual way, by setting marginal revenue equal to marginal cost.
$$ MR = 130 - 4Q$$
$$ MC = 10$$
$$MR = MC$$
$$130 - 4Q = 10$$
$$Q^* = 30$$
The profit-maximizing price we obtain by plugging the profit maximizing quantity (30) into the demand function:
$$ P^* = 120 - 2Q^*$$
$$ P^* = 120 - 2\times30 = 60$$
The maximum profit can be obtained via our usual profit function:
$$ \Pi = TR - TC$$
$$ \Pi = =P^* Q^* - ( 10Q^* + f)$$
$$ \Pi = 60\times 30 - (10\times 30 + f )$$
$$ \Pi = 1800 - 300 - f$$
$$ \Pi = 1500 - f$$
In a long-run equilibrium, a monopolistically competitive firm should be earning &lt;i&gt;zero economic profit&lt;/i&gt;. Therefore, in order to ensure that the market is in long-run equilibrium, π should be set to 0.
$$ \Pi = 1500 - f = 0$$
$$ f = 1500 $$
Notice that in long run equilibrium, even though profits are zero, it is still the case that PcMC=MR because the demand curve is downward sloping.  In order to sell more goods, the firm must reduce the price on all goods sold.  This implies the standard result that MR&lt;P and so MC&lt;P as MR=MC in equilibrium.  In competitive markets, it is also the case that long run profits are zero but in that case MC=P.</data></node>
    <node id="#25:308" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Firms can exploit market power to increase profits either through price discrimination or else through clever strategies to convert consumer surplus into producer surplus.</data></node>
    <node id="#25:309" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Price discrimination is a pricing strategy in which a firm sells units of a good at different prices to different customers to take advantage of their different willingness to pay. An example would be a shop offering a discount to students on certain items but not to other customers. The reason for this is that students are, generally speaking, poorer than working adults and more precarious in their spending, and so have a lower willingness to pay. By offering a lower price to students the shop may be able to achieve higher sales and generate more profits.&lt;p&gt;
There are two conditions that must hold for price discrimination to be viable:
&lt;ul&gt;
&lt;li&gt;The firm must have market power – without market power, the firm cannot choose its price at all, let alone manipulate it to its own advantage.&lt;/li&gt;
&lt;li&gt;The firm must prevent resale – if resale of the good is possible, those who buy the good at its lowest price can try to resell the item to those paying a higher price.  The two parties could negotiate a deal between the low and high prices which makes both of them better off.  The act of reselling an item at a price higher than you paid for it is an example of arbitrage. Ball ticket sales in St Andrews present an opportunity for arbitrage – once a ball ticket is bought at its original price, it is often re-sold at a (substantially) higher price, generating profit for the original buyer.&lt;/li&gt;
&lt;/ul&gt;</data></node>
    <node id="#25:310" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Also called &lt;i&gt;perfect price discrimination&lt;/i&gt;, this occurs when the firm knows the exact maximum price at which every customer on the market is willing to buy a product and charges them that exact price. A firm which manages to perfectly price discriminate among its customers is able to eliminate all consumer surplus in the market and transfer it into its producer surplus. This is because consumer surplus, is the difference between the maximum price the consumer is willing to pay for a good and the price they actually pay for it. Since under first-degree price discrimination everyone pays the maximum price they are willing to pay, the consumer surplus is zero. The producer surplus will be the sum of the differences between the maximum willingness of the consumer to pay for a good and the minimum price at which the producer is willing to sell each unit of the good, which equals the marginal cost of producing that good. The producer surplus will therefore be equal to the area enclosed between the demand curve and the marginal cost curve. Note that first-degree price discrimination does not create any deadweight loss and is therefore socially efficient.&lt;p&gt;
Perfect price discrimination is rarely if ever achievable in the real world as it requires plausible information about the maximum willingness to pay of every customer on the market. Such information can be incredibly costly to obtain for a firm and customers have an incentive to misstate their true maximum willingness to pay. One of the closest real-life examples are college tuition fees. By requiring information about an applicant’s family income, a college can obtain an accurate estimate of the price which the family would be willing to set aside for the higher education of their child. On the basis of that knowledge, the college can devise an individualized financial assistance package, which essentially tailors the actual price the family will have to pay for college to its willingness to pay.</data></node>
    <node id="#25:311" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Since perfect price discrimination is often infeasible to impose in the real world, an often-applied approach is to divide the market into several groups which have different elasticities of demand.  A higher price is charged to those who are less price sensitive and a lower price to those with a higher price sensitivity.  This approach is called &lt;i&gt;third-degree price discrimination&lt;/i&gt; or &lt;i&gt;segmenting&lt;/i&gt;. Think of a museum that charges different prices for adults, students and children under 7.&lt;p&gt;
Unlike first-degree price discrimination, third-degree generates some consumer surplus. Consider a student discount. Some students are better off than other students, so the richer students would be generating a consumer surplus out of the fact that the discounted student price is below the maximum price they are willing to pay for the good. Third-degree price discrimination, however, also generates a deadweight loss, which makes it socially inefficient. 
&lt;p&gt;
&lt;i&gt;Numerical Example&lt;/i&gt;&lt;p&gt;
The Postojna Cave in Western Slovenia is one of the biggest cave systems in Europe that is open for tourists – in fact, it is one of Slovenia’s top tourism sites. It is a place of outstanding natural beauty where you take a 2km train journey into the depths of the cave before beginning your tour of its galleries, but clearly not everyone can afford to visit it at the same price. 
Assume that the cave management has to deal with two distinct groups of customers - working adults and students. The management also knows that the inverse demand curve for working adults is:
$$ P = 24 - 2Q_1$$
and the inverse demand curve for students is:
$$ P = 18 - Q_2$$
Suppose the marginal cost of servicing an additional visitor is MC=10, and the total cost function is TC=10Q+10.&lt;p&gt;
First, assume both groups are charged the same price. It is easier to build intuition if we convert the inverse demand curves we have into actual demand curves of the form Q=Q(P).
$$ P = 24 - 2Q_1 \implies Q_1 = 12 - 0.5P$$
$$ P = 18 - Q_2 \implies Q_2 = 18 - P$$
At price P a total of Q=Q1+Q2 visits to the cave will be demanded:
$$ Q = Q_1 + Q_2$$
$$ Q = 12 - 0.5P + 18 - P$$
$$Q = 30 - 1.5P$$
$$P = 20 - \frac{2}{3}Q$$
The cave’s marginal revenue is (remember MR has twice the slope of the inverse demand function):
$$ MR = 20 - \frac{4}{3}Q$$
To maximize the cave’s profit, set MR equal to MC.
$$ MR = MC$$
$$20 - \frac{4}{3}Q = 10$$
$$\frac{4}{3}Q = 10$$
$$Q = 7.5$$

Profit will be maximized when exactly 7.5 visits are made to the cave in total. Let’s plug that into the inverse demand function to find the entrance fee that will be set in this case:
$$ P=20-\frac{2}{3}\times 7.5=15$$
Therefore, the cave will generate a total revenue of:
$$ TR = P\times Q = 15 \times 7.5 = 112.5$$
The profit without price discrimination will thus be:
$$ \Pi = TR - TC = 112.5 - 10Q - 10 = 112.5 - 75 - 10 = 27.5$$
Now, let’s charge each group different prices according to their respective willingness to pay. We are essentially going to break down the market into two constituent markets – one for adult tickets and one for student tickets and we will maximize profit in both of them.&lt;p&gt;
The first market (for adult tickets) will have the following demand and marginal cost curves:
$$ P_1 = 24 - 2Q_1$$
$$ MC = 10$$
From the demand curve we can derive the following marginal revenue curve for this market:
$$ MR = 24 - 4Q_1$$
As always, we maximize profit by setting MR equal to MC:
$$ MR = MC$$
$$ 24 - 4Q_1 = 10$$
$$Q_1 = 14$$
$$Q_1 = 3.5$$
The price this market faces (i.e. the price of an adult ticket) would be:
$$ P_1 = 24 - 2Q_1 = 24 - 2\times 3.5 = 24 - 7 = 17$$
The total revenue in this market would be:
$$ TR_1 = P_1\times Q_1 = 17\times 3.5 = 59.5$$
By performing analogous calculations, we can derive that the profit-quantity in the student ticket market would be 4 and the student ticket price would be 14. This means the total revenue from student tickets would be:
$$ TR_2 = P_2 \times Q_2 = 14\times 4 = 56$$
The grand total revenue would naturally be the sum of the revenue from adult tickets and the revenue from student tickets:
$$ TR = TR_1 + TR_2 = 59.5 + 56 = 115.5$$
The profit with price discrimination will be:
$$ \Pi = TR - TC = 115.5 -10Q - 10 = 115.5 - 10\times (3.5 + 4) - 10 = 115.5 - 75 - 10 = 30.5$$
As the profit without price discrimination was 27.5, it is clear that segmenting the market with third degree price discrimination has raised profits as 30.5 &gt; 27.5.</data></node>
    <node id="#25:312" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Second-degree price discrimination (also called &lt;i&gt;indirect price discrimination&lt;/i&gt;) relates to cases when the firm cannot directly observe the demand of its customers and therefore cannot divide them into categories with different price elasticities. So, it gives consumers the option to define themselves by providing a menu of pricing options to choose from. The idea is that customers with more inelastic demands would choose the more expensive option(s) while the customers with more elastic demands would choose the less expensive option(s). &lt;p&gt;
These are two of the most commonly employed types of second-degree price discrimination:
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Quantity discounting&lt;/i&gt; – a pricing strategy where people who buy a larger quantity of a good pay a lower per-unit price for the good. It is applied when some of the customers have more elastic demand curves than others. Say you discover that Jane demands only one slice of pizza at a per-unit price of £3 but five at a per-unit price £1. Her friend Amanda prefers healthy food, so she demands one slice of pizza at £3 but only 1.5 slices at price £1. So, you price pizza as follows: £3 per slice but 5 slices cost £5. Jane will immediately jump to buy 5 slices at £5, because they will cover her total demand at that per-unit price. Her friend Amanda will, however, buy one slice at £3 and be happy with it.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Versioning&lt;/i&gt; – offering a range of products that are all versions of the same core product but suit different demand categories. Ths is most readily observed in airlines who sell, for example, Economy, Business and First Class tickets. It is the same journey for all but some passengers would prefer a few more amenities on board and are willing to pay extra for them – a fact which airlines are happy to exploit for their own benefit. &lt;/li&gt;
&lt;/ul&gt;</data></node>
    <node id="#25:313" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Two-part tariffs are a pricing strategy whereby the customer is first charged a lump-sum payment (e.g. a membership fee) and then a flat fee for every unit they consume. Via the lump-sum payment the producer can claim the whole consumer surplus and then set the per-unit flat fee equal to the marginal cost. This way the firm can turn the whole consumer surplus into producer surplus and avoid any deadweight loss.
&lt;p&gt;
&lt;i&gt;Numerical Example&lt;/i&gt;&lt;p&gt;
Let’s consider a demand curve for rounds of golf given by:
$$ P = 100 - 10Q$$
P=100-10Q
Assume that the marginal cost for each round of golf is MC=10, which is also set as the price for a round of golf. Therefore:
$$ P = 100 - 10Q = 10$$
$$ Q = 9$$
Under those conditions, nine rounds of golf will be purchased on the market. At what price should the golf club set its membership fee? The idea is that in order to maximize its producer surplus, the golf course should set its membership fee equal to the consumer surplus of the golfer. Recall that the consumer surplus is the sum of the differences between the maximum price the customer is willing to pay for a good at a given quantity and what they actually pay. As such a producer can safely claim the whole consumer surplus of a customer without reducing their consumption. In this case, the consumer surplus of a golfer is given by.
$$ CS = (Demand choke price - P^*)\times Q^*$$
$$  cs = (100 - 10)\times 9 = 90\times 9 = 810$$
The membership fee the golf course will set in this case will equal 810.</data></node>
    <node id="#25:314" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Game theory is the study of strategic decisions and interactions between rational decision makers. A game is defined as a situation in which there are two or more people (players) who can each choose between possible decisions (strategies) and the outcomes of each decision for the player are contingent on the strategies which their opponents choose.</data></node>
    <node id="#25:315" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A game theoretical analysis of any real-life strategic interaction starts with the identification of the players. There can be a potentially infinite number of players, but we often restrict their number to two if possible, because it is most convenient to work with two-player games.</data></node>
    <node id="#25:316" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A sequence of actions available to each player is known as a &lt;i&gt;strategy&lt;/i&gt;. Every &lt;i&gt;combination&lt;/i&gt; of strategies produces an &lt;i&gt;outcome&lt;/i&gt;, and in each outcome each player receives a payoff. Sometimes these payoffs are readily quantifiable, like an amount of money, but most often they simply represent the order of preference which the player has for the possible outcomes of the game. For example, in a game with 6 possible outcomes, 6 can be assigned to the most preferred outcome, 5 to the second most preferred, and so on. Most games are set up so that higher payoffs are preferred but there are some exceptions.
&lt;p&gt;
Consider a game with two players, A and B, each of whom has 2 strategies at their disposal – Strategy 1 and Strategy 2, and they are both choosing their strategy at the same time, not knowing what the other side will choose.  This is known as a &lt;b&gt;simultaneous game&lt;/b&gt;.  In this game there are 4 possible outcomes, written in the form (Strategy of Player A, Strategy of Player B), and the payoffs are written as (Payoff of Player A, Payoff of Player B).
&lt;ul&gt;
&lt;li&gt;(Strategy 1, Strategy 1) -&gt; (3, 3)&lt;/li&gt;
&lt;li&gt;(Strategy 1, Strategy 2) -&gt; (1, 4)&lt;/li&gt;
&lt;li&gt;(Strategy 2, Strategy 1) -&gt; (4, 1)&lt;/li&gt;
&lt;li&gt;(Strategy 2, Strategy 2) -&gt; (2, 2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
A convenient way to represent strategies and payoffs is a &lt;b&gt;payoff matrix&lt;/b&gt;. This is a table in which (by convention) the rows represent the strategies available to the Player A and the columns represent the strategies available to Player B. Each cell represents the outcome defined by the choice of the strategies in the respective row and column. In every cell we write the payoffs for the respective outcome. For the game we defined above, the payoff matrix will look like this:
&lt;p&gt;
&lt;table class=&quot;table&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 44px&quot;&gt;
&lt;col style=&quot;width: 100px&quot;&gt;
&lt;col style=&quot;width: 104px&quot;&gt;
&lt;col style=&quot;width: 143px&quot;&gt;
&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;PLAYER B&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 1&lt;/td&gt;
    &lt;td&gt;Strategy 2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;P&lt;br&gt;L&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 1&lt;/td&gt;
    &lt;td&gt;3, 3&lt;/td&gt;
    &lt;td&gt;1, 4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Y&lt;br&gt;E&lt;br&gt;R&lt;br&gt;&lt;br&gt;&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 2&lt;/td&gt;
    &lt;td&gt;4, 1&lt;/td&gt;
    &lt;td&gt;2, 2&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
So how do we analyse it?  Player A does not know whether Player B will choose Strategy 1 or Strategy 2, so the best they can do is look what their &lt;b&gt;best response&lt;/b&gt; will be in each case. If Player B plays Strategy 1, Player A would be best playing Strategy 2 as it will give them a higher payoff (4&gt;3). Similarly, if Player B plays Strategy 2, Player A’s best response is Strategy 2 (2&gt;1). We put a checkmark next to Player A’s optimal choice in each case:
&lt;p&gt;
&lt;table class=&quot;table&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 44px&quot;&gt;
&lt;col style=&quot;width: 100px&quot;&gt;
&lt;col style=&quot;width: 104px&quot;&gt;
&lt;col style=&quot;width: 143px&quot;&gt;
&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;PLAYER B&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 1&lt;/td&gt;
    &lt;td&gt;Strategy 2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;P&lt;br&gt;L&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 1&lt;/td&gt;
    &lt;td&gt;3, 3&lt;/td&gt;
    &lt;td&gt;1, 4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Y&lt;br&gt;E&lt;br&gt;R&lt;br&gt;&lt;br&gt;&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 2&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;&amp;#10004;&lt;/span&gt; 4, 1&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;&amp;#10004; &lt;/span&gt;2, 2&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
If we analyse Player B’s choices in a similar fashion, we discover that they will also always prefer Strategy 2 over Strategy 1 (4&gt;3 and 2&gt;1):
&lt;p&gt;
&lt;table class=&quot;table&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 44px&quot;&gt;
&lt;col style=&quot;width: 100px&quot;&gt;
&lt;col style=&quot;width: 104px&quot;&gt;
&lt;col style=&quot;width: 207px&quot;&gt;
&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;PLAYER B&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 1&lt;/td&gt;
    &lt;td&gt;Strategy 2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;P&lt;br&gt;L&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 1&lt;/td&gt;
    &lt;td&gt;3, 3&lt;/td&gt;
    &lt;td&gt;1, 4&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;&amp;#10004;&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Y&lt;br&gt;E&lt;br&gt;R&lt;br&gt;&lt;br&gt;&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 2&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;&amp;#10004;&lt;/span&gt; 4, 1&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;&amp;#10004; &lt;/span&gt;2, 2&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt; &amp;#10004;&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
We thus proved that both Player 1 and Player 2 are better off playing Strategy 2. So, if they are rational, the only outcome that will ever occur in this game is (Strategy 2, Strategy 2) and the payoffs to the players will always be (2,2). This outcome is an equilibrium since each player is playing their best response and neither has an incentive to change.  It is known as a &lt;b&gt;Nash equilibrium&lt;/b&gt; after John Nash, the Princeton mathematician who introduced it.</data></node>
    <node id="#25:317" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Let’s examine a game in which we have two players (A and B), each with 3 strategies at their disposal: Strategy 1, Strategy 2 and Strategy 3.
&lt;p&gt;
&lt;table class=&quot;table&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 45px&quot;&gt;
&lt;col style=&quot;width: 103px&quot;&gt;
&lt;col style=&quot;width: 107px&quot;&gt;
&lt;col style=&quot;width: 213px&quot;&gt;
&lt;col style=&quot;width: 198px&quot;&gt;
&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;PLAYER B&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 1&lt;/td&gt;
    &lt;td&gt;Strategy 2&lt;/td&gt;
    &lt;td&gt;Strategy 3&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;P&lt;br&gt;L&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 1&lt;/td&gt;
    &lt;td&gt;7, 3&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✔&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✔&lt;/span&gt;6, 2&lt;/td&gt;
    &lt;td&gt;7, 1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Y&lt;br&gt;E&lt;br&gt;R&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Strategy 2&lt;/td&gt;
    &lt;td&gt;5, 6&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✔&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;4, 3&lt;/td&gt;
    &lt;td&gt;8, 2&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;A&lt;/td&gt;
    &lt;td&gt;Strategy 3&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✔&lt;/span&gt;8, 5&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✔&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;2, 4&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✔&lt;/span&gt;9, 1&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
Look at Player B first. We can see that their best response is always Strategy 1 no matter what Player A chooses. Such a strategy is called a &lt;b&gt;dominant strategy&lt;/b&gt;. Strategies 2 and 3 always produce worse payoffs for Player B than Strategy 1 – strategies 2 and 3 are said to be &lt;b&gt;dominated by&lt;/b&gt; Strategy 1. But we can also observe that Strategy 2 always gives better payoffs than Strategy 3, therefore Strategy 3 is also dominated by Strategy 2, even though Strategy 2 is not a dominant strategy. We can thus conclude that &lt;i&gt;if a strategy is dominated by another strategy, the latter strategy is not necessarily dominant&lt;/i&gt;.
For Player A, we observe that Strategy 2 is never chosen. However, neither Strategy 1 nor Strategy 3 always produce better payoffs than Strategy 2. This means that Strategy 2 is not dominated by any strategy for Player A.  Still, while it is not dominated, Strategy 2 is &lt;b&gt;never a best response&lt;/b&gt; for Player A.</data></node>
    <node id="#25:318" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">In the case when a player chooses the specific strategy which maximizes their payoff, we say that they follow a &lt;b&gt;pure strategy&lt;/b&gt;.
If they choose a strategy randomly from the set of strategies available to them (which sometimes does make sense), we then say the Player follows a &lt;b&gt;mixed strategy&lt;/b&gt;.
Only pure-strategy games will be examined in first-year microeconomics.</data></node>
    <node id="#25:319" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A &lt;b&gt;zero-sum game&lt;/b&gt; is a game in which the gains of one player are perfectly balanced out by the losses of other players. A classic zero-sum game arises when cutting a cake – the amount by which one person’s slice gets bigger is the amount by which everyone else’s slices will shrink in total. The sum of the payoffs of the players in any given outcome of a zero-sum game equals zero – this is why the game is called zero-sum. Therefore, for a zero-sum game with two players, if a player’s payoff in one outcome is A, then the payoff of their opponent in that outcome must be -A.
A &lt;b&gt;non-zero-sum game&lt;/b&gt; is any game in which the sum of the payoffs in at least one outcome does not equal zero.</data></node>
    <node id="#25:320" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A classic game is the Prisoner’s Dilemma. The story goes as follows: two people were caught by the police and are suspected to have committed a crime. The police decide to interrogate them separately and not allow them to communicate before their interrogations. The suspects are presented with the following two choices:
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;Admit to the crime&lt;/li&gt;
&lt;li&gt;Deny the crime&lt;/li&gt;
&lt;/ul&gt;
Their choices generate the following payoffs:
&lt;ul&gt;
&lt;li&gt;If both deny, each of them gets 3 years in jail&lt;/li&gt;
&lt;li&gt;If one admits and one denies, the one who admits gets 1 year, and the one who denies gets 10 years&lt;/li&gt;
&lt;li&gt;If both admit, each of them gets 5 years&lt;/li&gt;
&lt;/ul&gt;
Let’s assume that &lt;i&gt;n&lt;/i&gt; years in jail give a suspect utility of &lt;i&gt;-n&lt;/i&gt;, so that we keep the usual rule in game theory that higher payoffs are preferred. This yields the following payoff matrix:
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;SUSPECT&lt;/th&gt;
    &lt;th&gt;B&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Deny&lt;/td&gt;
    &lt;td&gt;Admit&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;S&lt;br&gt;U&lt;br&gt;S&lt;br&gt;P&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Deny&lt;/td&gt;
    &lt;td&gt;-3, -3&lt;/td&gt;
    &lt;td&gt;-10, -1 &lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✔&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;E&lt;br&gt;C&lt;br&gt;T&lt;br&gt;&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Admit&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✔&lt;/span&gt; -1, -10&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✔&lt;/span&gt; -5, -5 &lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✔&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
As we can see, both suspects are always better off admitting to the crime, therefore Admit is a dominant strategy and Deny is a dominated strategy for both of them, and the Nash equilibrium will be (Admit, Admit). So, even though denying will give them both a more favourable (efficient) outcome, their regard for their own self-interest will lead them to choose a suboptimal outcome.
&lt;p&gt;
The reason why the Prisoner’s Dilemma is probably the most famous game in game theory is that there is a vast number of real-life situations where a person or an entity is required to make a choice between cooperating or not cooperating (defecting/cheating) and many of these situations can be modelled according to the framework of the Prisoner’s Dilemma.
&lt;p&gt;
&lt;i&gt;Free-riding and environmental legislation&lt;/i&gt;
&lt;p&gt;
Imagine a treaty to cut carbon emissions has been signed between USA and China. Cutting emissions will incur a cost of 3 to a country and will bring a benefit of 2.5. However, the benefits of cutting emissions are enjoyed by both countries equally, therefore if one of them cuts emissions, the other will also receive a benefit of 2.5, and if both cut emissions, both will receive a benefit of 5 (2x2.5). In other words, emissions reduction is a public good.  The payoff matrix of this game is given by:
&lt;p&gt;
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;USA&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Cut&lt;/td&gt;
    &lt;td&gt;Don&apos;t Cut&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;C&lt;br&gt;H&lt;br&gt;I&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Cut&lt;/td&gt;
    &lt;td&gt;2, 2&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;-0.5, 2.5&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✔&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;N&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Don&apos;t Cut&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✔&lt;/span&gt; 2.5, -0.5&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✔&lt;/span&gt; 0, 0 &lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✔&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
As in the classic Prisoner’s Dilemma, here both parties have an incentive to choose a strategy which leads to a suboptimal outcome – (Don’t cut, Don’t cut). In the context of environmental legislation, reaping the benefits of other countries cutting emissions while not cutting your own emissions is called &lt;b&gt;free riding&lt;/b&gt;.
One way to discourage free-riding is to use sanctions. In our case, assume that the treaty has a clause stating that a country which free rides has to pay a fine of f. Our goal is to find the minimum amount f should be in order to ensure that the Nash equilibrium is (Cut, Cut). 
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;USA&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Cut&lt;/td&gt;
    &lt;td&gt;Don&apos;t Cut&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;C&lt;br&gt;H&lt;br&gt;I&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Cut&lt;/td&gt;
    &lt;td&gt;2, 2&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(0, 0, 0)&quot;&gt;-0.5, 2.5&lt;/span&gt;&lt;span style=&quot;font-style:italic;color:rgb(0, 0, 0)&quot;&gt;-f&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;N&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Don&apos;t Cut&lt;/td&gt;
    &lt;td&gt;2.5&lt;span style=&quot;font-style:italic&quot;&gt;-f&lt;/span&gt;, -0.5&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;font-style:italic&quot;&gt;-f, -f&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
Assume USA cuts emissions. For China to cut emissions as well, the following must hold:
$$ 2 &gt; 2.5 - f \implies f &gt; 0.5 $$
If USA doesn’t cut emissions, then for China to cut emissions:
$$ -0.5 &gt; -f \implies f &gt; 0.5 $$
If China cuts emissions, then for USA to cut emissions:
$$ 2 &gt; 2.5 - f \implies f &gt; 0.5 $$
If China doesn’t cut emissions, then for USA to cut emissions:
$$ - 0.5 \implies -f \implies f  0.5 $$
Overall, we find that any fine for free riding f exceeding 0.5 will be effective in incentivizing the countries to cut emissions. Let’s see the effect of f=1 on our payoff matrix:
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;USA&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Cut&lt;/td&gt;
    &lt;td&gt;Don&apos;t Cut&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;C&lt;br&gt;H&lt;br&gt;I&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Cut&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt;2, 2&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;span style=&quot;color:rgb(0, 0, 0)&quot;&gt;-0.5, 1.5&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;N&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Don&apos;t Cut&lt;/td&gt;
    &lt;td&gt;1.5, -0.5&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;-1, -1&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
The dominant strategy is now Cut for both sides and the Nash equilibrium is (Cut, Cut).</data></node>
    <node id="#25:321" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Games may have more than one equilibrium. The key question then becomes  which equilibrium is selected and why?</data></node>
    <node id="#25:322" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">A pure coordination game occurs when both players have the same two strategies at their disposal and have the same preferences over them. They, however, receive less utility if they choose a different strategy than in any configuration where they pick the same strategy. 
&lt;p&gt;
Let’s consider the following example – two friends discuss whether to go to Costa or Starbucks. Assume coordinating on either coffee shop gives both of them utility of 10. Not coordinating gives both of them utility of 0.
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;MIKE&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Starbucks&lt;/td&gt;
    &lt;td&gt;Costa&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;L&lt;br&gt;I&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Starbucks&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt;10, 10&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(0, 0, 0)&quot;&gt;0, 0&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;A&lt;br&gt;M&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Costa&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;0, 0&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt;10, 10&lt;span style=&quot;color:rgb(192, 192, 192)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
The problem of choosing an equilibrium in a pure coordination game was explored by economist Thomas Schelling, who argued that the solution was often what he termed the &lt;b&gt;focal point&lt;/b&gt;– the thing which is customary to do – e.g. “We always meet in Costa, so we’ll do it there this time as well.”. Alternatively, the game is solved by &lt;b&gt;pre-game communication&lt;/b&gt; – the two friends agreeing where to go.</data></node>
    <node id="#25:323" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">An &lt;i&gt;assurance game&lt;/i&gt; (alternatively called stag hunt) is a game with two equilibria, one is bad for both players, the other is superior for both players. Selection of the good equilibrium requires mutual assurance that both players will choose strategies consistent with this equilibrium.  Without such assurance, they have incentives to choose strategies consistent with the bad equilibrium.
&lt;p&gt;
An example of an assurance game is &lt;i&gt;mutually assured destruction&lt;/i&gt; (MAD). USA and USSR both have two strategies at their disposal – Develop (nuclear weapons) and Not Develop:
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;USSR&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Develop&lt;/td&gt;
    &lt;td&gt;Not Develop&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;U&lt;br&gt;S&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Develop&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt;&lt;span style=&quot;color:rgb(0, 0, 0)&quot;&gt;2, 2&lt;/span&gt;&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;3, 1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Not Develop&lt;/td&gt;
    &lt;td&gt;1, 3&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt;4, 4&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
Not Develop is preferred to Develop since money spent on a nuclear program could be better spent on education, science, social welfare, Domino’s pizza for everyone, etc. 
&lt;p&gt;
There are two Nash equilibria in this game – (Develop, Develop) and (Not Develop, Not Develop). The most favourable (efficient) outcome is (Not Develop, Not Develop) but a country will choose Not Develop only if it is assured that the other side will also choose Not Develop. If the USSR chooses Not Develop but the USA chooses Develop then the USSR would end up with its worst outcome (a payoff of 1).  The USSR will only choose Not Develop then if it trusts the USA to do the same (and vice versa). No such assurance existed during the Cold War, therefore countries chose (Develop, Develop).</data></node>
    <node id="#25:324" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">“Chicken” (also known as the Hawk Dove game) is a game which is played as follows: two people set off on a collision course at high speeds at two opposite ends of the same street. The first one to swerve is called a chicken and loses the game. Of course, if no one swerves, there’s going to be quite a mess, to put it mildly.
&lt;p&gt;
Let’s assign the following payoffs to the game:
&lt;ul&gt;
&lt;li&gt;A tie (both swerving) gives both a payoff of 0&lt;/li&gt;
&lt;li&gt;A win gives a payoff of 1&lt;/li&gt;
&lt;li&gt;A loss (chicken) gives a payoff of -1&lt;/li&gt;
&lt;li&gt;A crash (both straight) gives both a payoff of -10&lt;/li&gt;
&lt;/ul&gt;
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;PLAYER&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;TWO&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Swerve&lt;/td&gt;
    &lt;td&gt;Straight&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;O&lt;br&gt;N&lt;br&gt;E&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Swerve&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(0, 0, 0)&quot;&gt;0, 0&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt;-1, 1&lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Straight&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt; 1, -1 &lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;-10, -10&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
The Nash equilibria are (Swerve, Straight) and (Straight, Swerve). Chicken is an example of an anti-coordination game, where a player benefits more if they choose a different strategy to their opponent than if they choose the same strategy.
&lt;p&gt;
Equilibrium selection in the Chicken game is solved via pre-game communication (e.g. an agreement that one player lets the other win and then the second player lets the first win when playing the game repeatedly) or a commitment mechanism such as reputation (e.g. you’re playing against someone who is known never to swerve).</data></node>
    <node id="#25:325" labels=":Discussion"><data key="labels">:Discussion</data><data key="Label">null</data><data key="Body">Battle of the Sexes is an example of a coordination game where the two players are always better off playing the same strategy but they have differing preferences over strategies.
&lt;p&gt;
Let’s assume we have a couple: Anna and Bob. Anna loves to watch football while Bob likes to go to rock concerts. There’s an exciting football fixture tonight and a concert of Bob’s favourite rock band. They have different interests but, at the same time, Anna and Bob prefer to be together rather than go somewhere alone. This yields the following payoff matrix:
&lt;p&gt;
&lt;table class=&quot;table&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;th&gt;Bob&lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Football&lt;/td&gt;
    &lt;td&gt;Concert&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;A&lt;br&gt;N&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Football&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt;3, 2 &lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;1, 1&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;N&lt;br&gt;A&lt;br&gt;&lt;/td&gt;
    &lt;td&gt;Concert&lt;/td&gt;
    &lt;td&gt;0, 0&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color:rgb(49, 102, 255)&quot;&gt;✓&lt;/span&gt;2, 3 &lt;span style=&quot;color:rgb(254, 0, 0)&quot;&gt;✓&lt;/span&gt;&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
Equilibrium selection in a Battle of the Sexes game is solved the same way as a game of Chicken – through pre-game communication or by reputation.</data></node>
    <node id="#26:0" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">1</data></node>
    <node id="#26:1" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">2</data></node>
    <node id="#26:2" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">3</data></node>
    <node id="#26:3" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">4</data></node>
    <node id="#26:4" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">5</data></node>
    <node id="#26:5" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">7</data></node>
    <node id="#26:6" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">6</data></node>
    <node id="#26:8" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">8</data></node>
    <node id="#26:9" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">9</data></node>
    <node id="#26:10" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">10</data></node>
    <node id="#26:11" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">1</data></node>
    <node id="#26:12" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">2</data></node>
    <node id="#26:13" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">3</data></node>
    <node id="#26:14" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">4</data></node>
    <node id="#26:15" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">5</data></node>
    <node id="#26:16" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">6</data></node>
    <node id="#26:17" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">2</data></node>
    <node id="#26:18" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">5</data></node>
    <node id="#26:19" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">6</data></node>
    <node id="#26:20" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">12</data></node>
    <node id="#26:21" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">13</data></node>
    <node id="#26:22" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">20</data></node>
    <node id="#26:23" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">3</data></node>
    <node id="#26:24" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">7</data></node>
    <node id="#26:25" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">8</data></node>
    <node id="#26:26" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">11</data></node>
    <node id="#26:28" labels=":Lecture"><data key="labels">:Lecture</data><data key="Number">11</data></node>
    <node id="#28:3" labels=":Entity"><data key="labels">:Entity</data><data key="Label">Java</data></node>
    <node id="#28:4" labels=":Entity"><data key="labels">:Entity</data><data key="Label">Python</data></node>
    <node id="#28:8" labels=":Entity"><data key="labels">:Entity</data><data key="Label">Design</data></node>
    <node id="#28:11" labels=":Entity"><data key="labels">:Entity</data><data key="Label">Microeconomics</data></node>
    <node id="#34:2" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Control Structures</data></node>
    <node id="#34:3" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Data Structures</data></node>
    <node id="#34:4" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Program Structure</data></node>
    <node id="#34:5" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Program Structure</data></node>
    <node id="#34:6" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Data</data></node>
    <node id="#34:8" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Object Oriented Programming</data></node>
    <node id="#34:9" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Code Quality</data></node>
    <node id="#34:11" labels=":Theme"><data key="labels">:Theme</data><data key="Name">External Data Storage</data></node>
    <node id="#34:12" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Program Designing</data></node>
    <node id="#34:13" labels=":Theme"><data key="labels">:Theme</data><data key="Name">UML</data></node>
    <node id="#34:14" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Program Correctness</data></node>
    <node id="#34:15" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Control Structures</data></node>
    <node id="#34:16" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Maintainability</data></node>
    <node id="#34:22" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Demand and Supply</data></node>
    <node id="#34:24" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Consumer Choice</data></node>
    <node id="#34:25" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Production</data></node>
    <node id="#34:26" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Market Structures</data></node>
    <node id="#34:27" labels=":Theme"><data key="labels">:Theme</data><data key="Name">Game Theory</data></node>
    <node id="#35:0" labels=":Module"><data key="labels">:Module</data><data key="ModuleCode">CS1002</data></node>
    <node id="#35:1" labels=":Module"><data key="labels">:Module</data><data key="ModuleCode">MT2xxx</data></node>
    <node id="#35:3" labels=":Module"><data key="labels">:Module</data><data key="ModuleCode">CS1003</data></node>
    <node id="#40:0" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class IterationExample {

    public static int[] numbers = {0, 1, 4, 6, 8, 3, 7, 5, -5, 18, 6, 54, -3, -5};

    /* Result:
     * &quot;0 1 4 6 8 3 7 5&quot;
     * Try varying the numbers array to see how the output differs.
     *
     * Notice that despite, for n = 0, numbers[0] &lt;= 0 it still repeats the loop.
     * This is because the check happens at the end. After the addition.
     *
     * Also try moving the n++ (line 21) to before the print statement to see the results.
     */
    public static void main(String[] args){
        int n = 0;
        do{
            System.out.print(numbers[n] + &quot; &quot;);
            n++;
        }while(numbers[n] &gt; 0);

    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:1" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class IterationExample {

    public static int[] numbers = {0, 1, 4, 6, 8, 3, 7, 5, -5, 18, 6, 54, -3, -5};

    /* Result:
     * &quot;0 1 4 6 8 3 7 5 -5 18 6 54 -3 -5
     *  0 4 8 7 -5 6 -3&quot;
     * Try varying the numbers array to see how the output differs.
     */
    public static void main(String[] args){

        for(int n: numbers){
            System.out.print(n + &quot; &quot;);
        }

        System.out.println(&quot;&quot;); //Separator

        for(int i = 0; i &lt; numbers.length; i += 2){
            System.out.print(numbers[i] + &quot; &quot;);
        }

    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:2" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class IterationExample {

    public static int[] numbers = {0, 1, 4, 6, 8, 3, 7, 5, -5, 18, 6, 54, -3, -5};

    /* Result:
     * &quot; &quot;
     * Try varying the numbers array to see how the output differs.
     *
     * NB: This is suppose to be empty.
     * This is because the check happens at the start.
     *
     * Additionally try changing our default value of n to see what happens. 
     */
    public static void main(String[] args){
        int n = 0;
        while(numbers[n] &gt; 0){
            System.out.print(numbers[n] + &quot; &quot;);
            n++;
        }

    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:3" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Oscar {
    public final String name;
    public final int year;

    public Oscar(String name, int year) {
        this.name = name;
        this.year = year;
    }


    /*
     * Prints:
     * &quot;Moonlight
     * Spotlight
     * Birdman
     * 12 Years a Slave
     * Argo&quot;
     *
     * This is an incredibly superfluous way to iterate over a list, but it does demonstrate a lot of the
     * inner workings inside iterators. In general you do not ever need to implement your own.
     * There are **far** easier ways we could have done this. 
     */
    public static void main(String[] args) {
        //Best picture winners from: https://en.wikipedia.org/wiki/Academy_Award_for_Best_Picture#2010s
        //Apparently the Academy does not publish their own list
        OscarWinner bestPicture = new OscarWinner();
        bestPicture.add(&quot;Moonlight&quot;, 2016);
        bestPicture.add(&quot;Spotlight&quot;, 2015);
        bestPicture.add(&quot;Birdman&quot;, 2014);
        bestPicture.add(&quot;12 Years a Slave&quot;, 2013);
        bestPicture.add(&quot;Argo&quot;, 2012);

        for (Oscar winner: bestPicture){
            System.out.println(winner.name);
        }
    }
}</data><data key="Class2">import java.util.ArrayList;
import java.util.Iterator;


public class OscarWinner implements Iterable&lt;Oscar&gt; {
    private ArrayList&lt;Oscar&gt; winners;

    public OscarWinner() {
        winners = new ArrayList&lt;&gt;();
    }

    public OscarWinner(ArrayList&lt;Oscar&gt; winners) {
        this.winners = winners;
    }

    public void add(Oscar o) {
        winners.add(o);
    }

    public void add(String name, int year) {
        winners.add(new Oscar(name, year));
    }

    @Override
    public Iterator&lt;Oscar&gt; iterator() {
        return new OscarIterator(winners.toArray(new Oscar[winners.size()]));
    }

}</data><data key="Class3">import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;

public class OscarIterator implements Iterator&lt;Oscar&gt; {

    private final Oscar[] oscars;
    private int position = 0;

    public OscarIterator(Oscar[] oscars) {
        this.oscars = oscars;
    }

    @Override
    public boolean hasNext() {
        return position &lt; oscars.length;
    }

    @Override
    public Oscar next() throws NoSuchElementException {
        if (!hasNext()) throw new NoSuchElementException();

        position++;
        return oscars[position - 1];
    }

    //NB: Both remove() and forEachRemaining() have default implementations.
    //These are sufficient.
}</data></node>
    <node id="#40:5" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class ExceptionExample {


    /*
     * If we run this our output is: &quot;Please log in&quot;
     *
     * To experiment try:
     * Deleting the comment start (the &apos;//&apos;) on line 14.
     * Re-adding the comment on line 14, and delete the comment start (&apos;//&apos;) on line 15.
     * Try running the program (in its original state with both comments) without the try catch block.
     */
    public static void main(String[] args){
        Account q = new Account(&quot;Q&quot;, &quot;SpectreWasAnAccident&quot;);
        try {
            //q.login(&quot;Q&quot;, &quot;SpectreWasAnAccident&quot;);
            //q.login(&quot;B&quot;, &quot;SkyfallWasBetter&quot;);
            System.out.println(q.getSecretData());
            //Here we catch the exception. It is the outermost layer and is exposed directly to user input
            //If we use args to pass in the username and password
        }catch(NotLoggedInException e){
            System.out.println(&quot;Please log in&quot;);
        }
    }
}</data><data key="Class2">public class Account {

    private String username;
    private String password; //PLEASE DO NOT EVER STORE UNENCRYPTED PASSWORDS. THIS IS AN EXAMPLE.
    private boolean loggedIn = false;
    private final String secretData = &quot;The double agent is Andrews&quot;; //This is literally the dumbest way ever to transmit secret data.

    public Account(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public boolean login(String user, String pwd){
        if (username.equals(user) &amp;&amp; password.equals(pwd)) { //PLEASE NEVER ACTUALLY DO THIS.
            loggedIn = true;
            return true;
        }
        return false;
    }

    //Notice that in here we throw the exception. Realistically we should not handle the exception here. It
    //would cause poor separation of functionality if we did handle it here.
    public String getSecretData() throws NotLoggedInException{
        if (loggedIn) return secretData;
        throw new NotLoggedInException();
    }
}</data><data key="Class3">public class NotLoggedInException extends Exception {
}</data></node>
    <node id="#40:6" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class FlowControlExample {

    public static String method3(){
        return &quot;Method 3 invoked&quot;;
    }

    /*
     * This main method is always output first no matter what!
     * The program outputs:
       &quot;Invoking main
        Invoking method 1
        Method 2 part 1 invoked
        Method 3 invoked
        Method 2 part 2 invoked!
        Method 3 invoked
        Method 2 part 2 invoked!
        Method 3 invoked
        Method 2 part 1 invoked
        Method 3 invoked
        Method 2 part 2 invoked!
        Method 3 invoked
        Ending main&quot;
     *
     * Notice that the order of the methods is not important within the file. Try changing where each method is
     * in this file to demonstrate that.
     *
     */
    public static void main(String args[]){
        System.out.println(&quot;Invoking main&quot;);
        method1();
        System.out.println(&quot;Ending main&quot;);
    }

    public static void method1(){
        System.out.println(&quot;Invoking method 1&quot;);
        for (int i = 0; i &lt;= 9; i++){
            if (i % 2 == 0){
                System.out.println(method2(i));
            }else{
                System.out.println(method3());
            }
        }
    }

    /*
     * Notice that we do not need an else statement when we have a return inside an if.
     * Why?
     */
    public static String method2(int n){
       if (n % 3 == 0){
           return &quot;Method 2 part 1 invoked&quot;;
       }
       return &quot;Method 2 part 2 invoked!&quot;;
    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:7" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class LogicExample{

    public static boolean booleanVar = true;
    public static int intVar = 150;

    public static boolean booleanMethod(){
        return false;
    }


    /*
     * Outputs:
     &quot;Conditional 1
      Conditional 3
      Conditional 4
     &quot;
     * Try varying the result of the method and the values of the variables to see what happens.
     */
    public static void main(String... args){
        int testNumber = 79;
        if(testNumber &gt; intVar || booleanVar){
            System.out.println(&quot;Conditional 1&quot;);
        }else if(testNumber &lt; intVar){
            System.out.println(&quot;Conditional 2&quot;);
        }

        testNumber += 71;

        if (testNumber &gt;= intVar &amp;&amp; !booleanMethod()){
            System.out.println(&quot;Conditional 3&quot;);
        }

        if (booleanVar  != booleanMethod()){
            System.out.println(&quot;Conditional 4&quot;);
        }

    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:8" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class ArthOperatorsExample {

    public static void main(String[] args) {
        System.out.println(&quot;3 + 2: &quot; + (3 + 2));
        System.out.println(&quot;3 - 2: &quot; + (3 - 2));
        System.out.println(&quot;3 * 2: &quot; + (3 * 2));
        System.out.println(&quot;3 / 2: &quot; + (3 / 2));
        System.out.println(&quot;3 % 2: &quot; + (3 % 2));
        System.out.println(&quot;&quot;);
        System.out.println(&quot;1.75 + 3.01: &quot; + (1.75 + 3.01));
        System.out.println(&quot;1.75 - 3.01: &quot; + (1.75 - 3.01));
        System.out.println(&quot;1.75 * 3.01: &quot; + (1.75 * 3.01));
        System.out.println(&quot;1.75 / 3.01: &quot; + (1.75 / 3.01));
        System.out.println(&quot;1.75 % 3.01: &quot; + (1.75 % 3.01));
    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:9" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class PrimitiveTypeExample {
    public static final byte a = 31;
    public static short b = 415;
    public int c = 9265358;
    private final long d = 979323846;
    protected float e = 2.7182f;

    public static void main(String[] args) {
        double f = 264.3383279;
        boolean g = true;
        final char h = &apos;a&apos;;
    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:10" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;

public class JavaCollectionExample {

    public static void main(String[] args) {
        Person a = new Person(&quot;Ville Virtanen&quot;, 41);
        Person b = new Person(&quot;Don Walsh&quot;, 85);
        Person c = new Person(&quot;Lee Sang-hyeok&quot;, 21);

        //Try uncommenting line 15 or 16 and have the rest commented.
        //Notice that our code still works?
        ArrayList&lt;Person&gt; people = new ArrayList&lt;&gt;();
        //LinkedList&lt;Person&gt; people = new LinkedList&lt;&gt;();
        //Vector&lt;Person&gt; people = new Vector&lt;Person&gt;();
        people.add(a);
        people.add(b);
        people.add(c);

        sortPeople(people);
    }

    public static void sortPeople(List&lt;Person&gt; p){
        //Lambda expressions!
        //Try changing the minus to a plus.
        //Even try making it a multiplication sign.
        //Try changing the order of p1 and p2.
        p.sort((p1, p2) -&gt; p1.age - p2.age);
        p.forEach((p1) -&gt; System.out.println(p1.name));
    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:11" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;

public class JavaCollectionExample {

    public static void main(String[] args) {
        Person a = new Person(&quot;Ville Virtanen&quot;, 41);
        Person b = new Person(&quot;Don Walsh&quot;, 85);
        Person c = new Person(&quot;Lee Sang-hyeok&quot;, 21);

        //Try uncommenting line 15 or 16 and have the rest commented.
        //Notice that our code still works?
        ArrayList&lt;Person&gt; people = new ArrayList&lt;&gt;();
        //LinkedList&lt;Person&gt; people = new LinkedList&lt;&gt;();
        //Vector&lt;Person&gt; people = new Vector&lt;Person&gt;();
        people.add(a);
        people.add(b);
        people.add(c);

        System.out.println(&quot;List at the start&quot;);
        printPeople(people);

        System.out.println(&quot;\nSorted list&quot;);
        sortPeople(people);
        printPeople(people);

        System.out.println(&quot;\nIncrementing all ages&quot;);
        updateYear(people);
        printPeople(people);

        System.out.println(&quot;\nThe problem using mutable data types&quot;);
        b.age = 17;
        printPeople(people);
        System.out.println(&quot;Our order is not guaranteed!&quot;);

        System.out.println(&quot;\nBut we can&apos;t outright replace people by assignment&quot;);
        Person d = new Person(&quot;Ingrid Kosar&quot;, 69);
        a = d;
        printPeople(people);
    }

    public static void sortPeople(List&lt;Person&gt; p){
        //Lambda expressions!
        //Try changing the minus to a plus.
        //Even try making it a multiplication sign.
        //Try changing the order of p1 and p2.
        p.sort((p1, p2) -&gt; p1.age - p2.age);
    }

    public static void printPeople(List&lt;Person&gt; p){
        p.forEach((p1) -&gt; System.out.println(p1.name +&quot;: &quot; + p1.age));
    }

    public static void updateYear(List&lt;Person&gt; p ){
        p.forEach((p1) -&gt; p1.age++);
    }
}</data><data key="Class2">public class Person {
    public String name;
    public int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
}</data><data key="Class3">null</data></node>
    <node id="#40:12" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">import java.util.*;

public class JavaCollectionExample {

    public static void main(String[] args) {
        Person a = new Person(&quot;Bob Graham&quot;, 1894);
        Person b = new Person(&quot;Bertha Benz&quot;, 1849);
        Person c = new Person(&quot;Bob Graham&quot;, 1894); //A different one born in the same year

        Person d = new Person(&quot;Ericia Graham&quot;, 1901);
        Person f = new Person(&quot;Karl Benz&quot;, 1844);
        Person g = new Person(&quot;Walter White&quot;, 1899);

        Map&lt;Person, Person&gt; marriages = new HashMap&lt;&gt;();
        marriages.put(a, d);
        marriages.put(b, f);

        System.out.println(&quot;Let&apos;s see our progress after adding two couples&quot;);
        viewMarriages(marriages);

        System.out.println(&quot;\nLet&apos;s try adding the different Bob Graham!&quot;);
        marriages.put(c, g);

        System.out.println(&quot;\nHow did that change anything?&quot;);
        viewMarriages(marriages);

        System.out.println(&quot;\nOh no! Walter White wants a divorce and this Bob Graham wants to marry his deceased son&apos;s girlfriend&quot;);
        Person h = new Person(&quot;Alicia Andrews&quot;, 1909);
        marriages.replace(a, h);

        System.out.println(&quot;\nCan we look up just that marriage?&quot;);
        System.out.println(a.name + &quot; remarried &quot; + marriages.get(a).name);
    }

    public static void viewMarriages(Map&lt;Person, Person&gt; marriages){
        marriages.forEach((k, v) -&gt; System.out.println(k.name + &quot; married &quot; + v.name));
    }
}</data><data key="Class2">public class Person {
    public final String name;
    public final int yearOfBirth;

    public Person(String name, int yearOfBirth) {
        this.name = name;
        this.yearOfBirth = yearOfBirth;
    }
}</data><data key="Class3">null</data></node>
    <node id="#40:13" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">import java.util.HashSet;

public class SetExample {

    public static void main(String[] args) {
        GroupElement e0 = new GroupElement(0, 3);
        GroupElement e1 = new GroupElement(1, 3);
        GroupElement e2 = new GroupElement(2, 3);

        HashSet&lt;GroupElement&gt; group = new HashSet&lt;&gt;();
        group.add(e0);
        group.add(e1);
        group.add(e2);

        System.out.println(&quot;Let&apos;s find out some properties&quot;);
        System.out.println(&quot;Adding e0 again: &quot;+ group.add(e0));
        System.out.println(&quot;Adding equivalent to e0: &quot;+ group.add(new GroupElement(0, 3)));
        System.out.println(&quot;Adding a different equivalent to e0: &quot;+group.add(new GroupElement(3, 3)));
        System.out.println(&quot;Cardinality (size) of group: &quot;+ group.size());
        System.out.println(&quot;Removing e0: &quot; + group.remove(e0));
        System.out.println(&quot;Cardinality (size) of group: &quot;+ group.size());
        System.out.println(&quot;Readding e0: &quot;+ group.add(e0));
        System.out.println(&quot;Removing equivalent to e0: &quot; + group.remove(new GroupElement(0, 3)));
    }
}</data><data key="Class2">public class GroupElement {
    public final int value;
    private final int mod;

    public GroupElement(int value, int mod) {
        this.value = value % mod;
        this.mod = mod;
    }

    public int add(GroupElement e){
        assert(e.mod == mod);
        return (e.value + value) % mod;
    }

    public int subtract(GroupElement e){
        assert(e.mod == mod);
        return (e.value - value) % mod;
    }

    public int multiply(GroupElement e){
        assert(e.mod == mod);
        int res = value;
        for(int i = 0; i &lt; e.value; i++){
            res = add(e);
        }
        return res;
    }

    /*
     * We have to override equals and hashcode because of Java&apos;s &quot;contract&quot; between the two.
     * If two objects are equal then they should have the same hashcode.
     */
    @Override
    public boolean equals(Object o){
        System.out.println(&quot;Invoking equality&quot;);
        if (!(o instanceof GroupElement)) return false;
        GroupElement e = (GroupElement)o;
        return (e.value == value &amp;&amp; e.mod == mod);
    }

    @Override
    public int hashCode(){
        return new Integer(Integer.toString(value)  + Integer.toString(mod));
    }
}</data><data key="Class3">null</data></node>
    <node id="#40:14" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">import java.util.LinkedList;

public class LinkedListExample {

    public static void main(String[] args) {
        Person p0 = new Person(&quot;Sterling Archer&quot;);
        Person p1 = new Person(&quot;Malory Archer&quot;);
        Person p2 = new Person(&quot;Cyril Figgis&quot;);
        Person p3 = new Person(&quot;Pamela Poovey&quot;);

        LinkedList&lt;Person&gt; queue = new LinkedList&lt;Person&gt;(){{
                                                        add(p0);
                                                        add(p1);
                                                        add(p2);
                                                        }};


        System.out.println(&quot;Notice the order of output compared to the order of addition&quot;);
        for (Person p: queue){
            System.out.println(p.name);
        }
        System.out.println(&quot;\nLet&apos;s pop the top from the queue and then add someone new to the start&quot;);
        queue.pop();
        queue.addFirst(p3);
        for (Person p: queue){
            System.out.println(p.name);
        }

    }
}</data><data key="Class2">public class Person {
    public final String name;

    public Person(String name) {
        this.name = name;
    }
}</data><data key="Class3">null</data></node>
    <node id="#40:15" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class OperationsExample {

    public static void main(String[] args) {
        int x = 5;
        System.out.println(&quot;x is: &quot; + x);
        if(true){
            x = 8;
            System.out.println(&quot;Inside the if x is: &quot; + x);
        }
        System.out.println(&quot;Outside the if x is: &quot; + x);

        //Try changing x to a String and see what happens
        //String x = &quot;5&quot;;
        System.out.println(&quot;But we cannot change its type: &quot; + x);
    }

}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:16" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Animal {
    protected String name;
    protected int age;

    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString(){
        return &quot;This animal is called &quot; + name + &quot; is &quot; + age + &quot; years old&quot;;
    }

    public String getName(){
        return name;
    }

    public static void main(String[] args) {
        Person p = new Person(&quot;Harold&quot;, 53, 172);
        System.out.println(p);

        Dolphin d = new Dolphin(&quot;Fin&quot;, 3, 150);
        System.out.println(d);

        Animal a = new Animal(&quot;John&quot;, 37);
        System.out.println(a);

        //Cast p to an animal
        Animal p2 = (Animal)p;
        //Notice the toString method it uses
        System.out.println(p2);
        //Uncomment the line below and notice how we are not allowed to use
        //The getAGe() method that only exists in Person and not in Animal
        //System.out.println(p2.getAge());

        //Yet we can use getName()
        System.out.println(p2.getName());

        //We can perform an explicit cast to make our int age become a double
        double doubleAge = p2.age;
        System.out.println(doubleAge);

        doubleAge += 0.8;
        System.out.println(doubleAge);

        //But has to be explicit in the other direction because we may lose information
        int realAge = (int)doubleAge;
        System.out.println(realAge);
    }
}</data><data key="Class2">public class Person extends Animal{
    protected int height;

    public Person(String name, int age, int height) {
        super(name, age);
        this.height = height;
    }

    @Override
    public String toString(){
        return name + &quot; is &quot; + height + &quot;cm tall and &quot; + age + &quot; years old&quot;;
    }

    public int getAge(){
        return age;
    }
}</data><data key="Class3">public class Dolphin extends Animal{
    protected int length;

    public Dolphin(String name, int age, int length) {
        super(name, age);
        this.length = length;
    }

    @Override
    public String toString(){
        return &quot;This dolphin is &quot; + length + &quot;cm long at age &quot; + age;
    }
}</data></node>
    <node id="#40:17" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class DataAccessExample {

    public static int f(int x){
        return x + 3;
    }

    public static void main(String[] args) {
        System.out.println(f(5));
        System.out.println(f(-2));
        System.out.println(f(10));
        System.out.println(f(0));
    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:18" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class VariableExample {

    private static final int x = 5;
    protected static String y = &quot;Hello&quot;;
    public int z = 9;
    double u = 3.7;

    public int f(final int x){
        return x - 3;
    }

    public static void main(String[] args) {
        System.out.println(x);
        System.out.println(y);
        VariableExample v = new VariableExample();
        System.out.println(v.z);
        System.out.println(v.u);
        System.out.println(v.f(x));
    }

}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:19" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {

	public static void main(String[] args) {
		int x = 3;
		System.out.println(x);
		//Update x
		x = 17;
		System.out.println(x);
	}

}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:20" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		Movie laLaLand = new Movie(&quot;La La Land&quot;, 2016, 443.9);
		System.out.println(&quot;Gross sales: &quot; + laLaLand.getGross());
		//Update sales
		incrementSales(laLaLand, 1.3);
		System.out.println(&quot;Updates gross sales: &quot; + laLaLand.getGross());
	}
	
	public static void incrementSales(Movie m, double amount){
		m.incrementGross(amount);
	}

}</data><data key="Class2">public class Movie {
	public final String name;
	public final int year;
	private double gross;
	
	public Movie(String name, int year, double gross) {
		super();
		this.name = name;
		this.year = year;
		this.gross = gross;
	}

	public double getGross() {
		return gross;
	}

	public void incrementGross(double increase) {
		this.gross += increase;
	}
	
}</data><data key="Class3">null</data></node>
    <node id="#40:21" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		Movie[] emmaStoneFilms = new Movie[5];
		emmaStoneFilms[0] = new Movie(&quot;La La Land&quot;, 2016, 443.9);
		emmaStoneFilms[1] = new Movie(&quot;Birdman&quot;, 2014, 103.2);
		emmaStoneFilms[2] = new Movie(&quot;Zombieland&quot;, 2009, 102.4);
		emmaStoneFilms[3] = new Movie(&quot;Superbad&quot;, 2007, 169.9);
		emmaStoneFilms[4] = new Movie(&quot;Movie 43&quot;, 2013, 32.4);
		
		for(Movie m: emmaStoneFilms){
			System.out.println(m);
		}

	}

}</data><data key="Class2">public class Movie {
	public final String name;
	public final int year;
	private double gross;
	
	public Movie(String name, int year, double gross) {
		super();
		this.name = name;
		this.year = year;
		this.gross = gross;
	}

	public double getGross() {
		return gross;
	}

	public void incrementGross(double increase) {
		this.gross += increase;
	}
	
	@Override
	public String toString(){
		return name + &quot;(&quot; + year + &quot;) grossed $&quot; + gross +&quot; million&quot;;  
	}
	
}</data><data key="Class3">null</data></node>
    <node id="#40:22" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		Movie[][] oscarWinners = new Movie[2][];
		oscarWinners[0] = new Movie[3];
		oscarWinners[0][0] = new Movie(&quot;Moonlight&quot;, 2016, 65);
		oscarWinners[0][1] = new Movie(&quot;Manchester By the Sea&quot;, 2016, 74.6);
		oscarWinners[0][2] = new Movie(&quot;Hacksaw Ridge&quot;, 2016, 175.3);
		oscarWinners[1] = new Movie[4];
		oscarWinners[1][0] = new Movie(&quot;Spotlight&quot;, 2015, 92.2);
		oscarWinners[1][1] = new Movie(&quot;Spotlight&quot;, 2015, 92.2);
		oscarWinners[1][2] = new Movie(&quot;Mad Max: Fury Road&quot;, 2015, 378.9);
		oscarWinners[1][3] = new Movie(&quot;Room&quot;, 2015, 36.3);
		
		//Notice the data type
		for (Movie[] year: oscarWinners){
			System.out.println(year);
			for(Movie m: year){
				System.out.println(m);
			}
			System.out.println(&quot;--&quot;);
		}
		
	}

}</data><data key="Class2">public class Movie {
	public final String name;
	public final int year;
	private double gross;
	
	public Movie(String name, int year, double gross) {
		super();
		this.name = name;
		this.year = year;
		this.gross = gross;
	}

	public double getGross() {
		return gross;
	}

	public void incrementGross(double increase) {
		this.gross += increase;
	}
	
	@Override
	public String toString(){
		return name + &quot;(&quot; + year + &quot;) grossed $&quot; + gross +&quot; million&quot;;  
	}
	
}</data><data key="Class3">null</data></node>
    <node id="#40:23" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		Movie m1 = new Movie(&quot;The Grand Budapest Hotel&quot;, 2014, 174.8);
		Movie m2 = new Movie(&quot;Ocean&apos;s Eleven&quot;, 2001, 450.7);
		Movie m3 = new Movie(&quot;Ocean&apos;s 11&quot;, 1960, 5);
		Movie m4 = new Movie(&quot;The Grand Budapest Hotel&quot;, 2014, 174.8);
		
		System.out.println(&quot;Does m1 == m4? - &quot; + (m1 == m4));
		System.out.println(&quot;Does m1 equal m4? - &quot; + (m1.equals(m4)));
		System.out.println(&quot;Does m1 == m2? - &quot; + (m1 == m2));
		System.out.println(&quot;Does m2 equal m3? - &quot; + (m2.equals(m3)));
		
	}

}</data><data key="Class2">public class Movie {
	public final String name;
	public final int year;
	private double gross;
	
	public Movie(String name, int year, double gross) {
		super();
		this.name = name;
		this.year = year;
		this.gross = gross;
	}

	public double getGross() {
		return gross;
	}

	public void incrementGross(double increase) {
		this.gross += increase;
	}
	
	@Override
	public String toString(){
		return name + &quot;(&quot; + year + &quot;) grossed $&quot; + gross +&quot; million&quot;;  
	}
	
	@Override
	public boolean equals(Object o){
		if (!(o instanceof Movie)) return false;
		Movie m = (Movie)o;
		return m.name == name &amp;&amp; m.year == year &amp;&amp; m.gross == gross;
	}
	
}</data><data key="Class3">null</data></node>
    <node id="#40:24" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		Movie m1 = null;
		
		System.out.println(&quot;Can we de-reference nulls?&quot;);
		try{
			m1.getGross();
		}catch(NullPointerException e){
			System.out.println(&quot;Nope&quot;);
		}
		
	}

}</data><data key="Class2">public class Movie {
	public final String name;
	public final int year;
	private double gross;
	
	public Movie(String name, int year, double gross) {
		super();
		this.name = name;
		this.year = year;
		this.gross = gross;
	}

	public double getGross() {
		return gross;
	}

	public void incrementGross(double increase) {
		this.gross += increase;
	}
	
	@Override
	public String toString(){
		return name + &quot;(&quot; + year + &quot;) grossed $&quot; + gross +&quot; million&quot;;  
	}
	
	@Override
	public boolean equals(Object o){
		if (!(o instanceof Movie)) return false;
		Movie m = (Movie)o;
		return m.name == name &amp;&amp; m.year == year &amp;&amp; m.gross == gross;
	}
	
}</data><data key="Class3">null</data></node>
    <node id="#40:25" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		String s = &quot;This is a string!&quot;;
		
		System.out.println(s);
		
	}

}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:26" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		StringBuilder sb = new StringBuilder((int)(&apos;z&apos;-&apos;a&apos;)); //There are many constructors to choose from
		for (char i=&apos;a&apos;; i&lt;=&apos;z&apos;; i++){
			sb.append(i);
		}
		System.out.println((sb.reverse()).toString());	
	}

}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:27" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		Node&lt;Integer&gt; n1 = new Node&lt;&gt;(null, null, 5);
		Node&lt;Integer&gt; n2 = new Node&lt;&gt;(null, null, 8);
		Node&lt;Integer&gt; n3 = new Node&lt;&gt;(n1, n2, 6); //root node
		
		System.out.println(n3.getValue());
		
		//Let&apos;s change the type
		Node&lt;Double&gt; n4 = new Node&lt;&gt;(null, null, 3.14);
		Node&lt;Double&gt; n5 = new Node&lt;&gt;(null, null, 2.71);
		Node&lt;Double&gt; n6 = new Node&lt;&gt;(n4, n5, 1.41);
		
		System.out.println(n6.getValue());
		
		//What would happen if we replace n4 with n1 when we define n6?
	}

}</data><data key="Class2">public class Node&lt;T&gt; {
	public Node&lt;T&gt; left;
	public Node&lt;T&gt; right;
	private final T value;
	
	public Node(Node&lt;T&gt; left, Node&lt;T&gt; right, T value) {
		this.left = left;
		this.right = right;
		this.value = value;
	}

	public T getValue() {
		return value;
	}

}</data><data key="Class3">null</data></node>
    <node id="#40:28" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	public static void main(String[] args){
		Coffee origin = Coffee.YIRGACHEFFEE;
		
		System.out.println(origin);
	}

}</data><data key="Class2">public enum Coffee{
    YIRGACHEFFEE, JAVA, COLOMBIA
}</data><data key="Class3">null</data></node>
    <node id="#40:29" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		Animal a1 = new Animal(&quot;Cara&quot;, 4);
		
		System.out.println(a1);
		
		//Let&apos;s try updating using our update functions
		a1.update(&quot;Davey&quot;);
		a1.update(5);
		
		System.out.println(a1);
	}

}</data><data key="Class2">public class Animal {
	private String name;
	private int age;
	
	
	/**
	 * @param name
	 * @param age
	 */
	public Animal(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	public void update(String name){
		this.name = name;
	}
	
	public void update(int age){
		this.age = age;
	}
	
	@Override
	public String toString(){
		return &quot;This animal is &quot; + age + &quot;years old and called &quot; + name; 
	}
}</data><data key="Class3">null</data></node>
    <node id="#40:30" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		System.out.println(&quot;I am always executed first no matter what&quot;);
	}

}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:31" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		System.out.println(product(1.0, 2.5, 3.1));
		System.out.println(product(-1.0, -2.5, 6.3, 5.1)); //This **MAY** give an unexpected result
		System.out.println(product());
	}
	
	public static double product(double... numbers){
		double sum = 0;
		for (double n: numbers){
			sum += n;
		}
		return sum;
	}

}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:32" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	
	public static void main(String[] args){
		Animal p1 = new Person(&quot;Emily&quot;, 37, 66.5, 170); //We cannot cannot create an &apos;Animal&apos; but can its subtype
		//Try removing the comments to see what happens
		//Animal p2 = new Animal(&quot;Fredrick&quot;, 1);
	}
}</data><data key="Class2">public abstract class Animal {
	private String name;
	private int age;
	
	
	/**
	 * @param name
	 * @param age
	 */
	public Animal(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	public void update(String name){
		this.name = name;
	}
	
	public void update(int age){
		this.age = age;
	}
	
	@Override
	public String toString(){
		return &quot;This animal is &quot; + age + &quot;years old and called &quot; + name; 
	}
}</data><data key="Class3">public class Person extends Animal {
	public double weight;
	public int height;

	//If a Person is defined without weight and height then we assign these default values implicitly
	public Person(String name, int age) {
		super(name, age);
	}
	
	public Person(String name, int age, double weight, int height){
		super(name, age);
		this.weight = weight;
		this.height = height;
	}
	
}</data></node>
    <node id="#40:33" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public interface Ageable {
	void birthday();
	
	default boolean isAgeable(){
		return true;
	}
	
	public static void main(String[] args){
		Person p1 = new Person(&quot;Gemma&quot;, 3, 10.2, 70);
		System.out.println(&quot;Can we age this Person?&quot; + p1.isAgeable());
		
		System.out.println(&quot;This person is this number of years old: &quot; + p1.age);
		
		p1.birthday();
		
		System.out.println(&quot;After their birthday they are now: &quot; + p1.age);
	}
}</data><data key="Class2">public class Person extends Animal {
	public double weight;
	public int height;

	//If a Person is defined without weight and height then we assign these default values implicitly
	public Person(String name, int age) {
		super(name, age);
	}
	
	public Person(String name, int age, double weight, int height){
		super(name, age);
		this.weight = weight;
		this.height = height;
	}

	//Notice that we do not need to override a method with the default keyword
	//Further notice that we do not need to say we implement the interface in the child class
	@Override
	public void birthday() {
		age++;
	}
	
}</data><data key="Class3">public abstract class Animal implements Ageable{
	private String name;
	protected int age;
	
	public Animal(String name, int age) {
		this.name = name;
		this.age = age;
	}
	
	public void update(String name){
		this.name = name;
	}
	
	public void update(int age){
		this.age = age;
	}
	
	public int getAge(){
		return age;
	}
	
	@Override
	public String toString(){
		return &quot;This animal is &quot; + age + &quot;years old and called &quot; + name; 
	}
	
	//Notice that we do not have to define the interface methods within an abstract class
	//This is because interface methods are implicitly abstract
}</data></node>
    <node id="#40:34" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Example {
	
	public static void main(String[] args){
		SprintRunner sr1 = new SprintRunner(10.32);
		SprintRunner sr2 = new SprintRunner(10.01);
		
		System.out.println(&quot;How does sr1 compare to sr2? &quot; + sr1.compareTo(sr2));
	}
}</data><data key="Class2">public class SprintRunner implements Comparable&lt;SprintRunner&gt;{
	public double bestTime;
	
	public SprintRunner(double bestTime){
		this.bestTime = bestTime;
	}

	@Override
	public int compareTo(SprintRunner o) {
		if (bestTime == o.bestTime) return 0;
		if (bestTime &gt; o.bestTime) return 1;
		return -1;
	}

}</data><data key="Class3">null</data></node>
    <node id="#40:35" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Movie {
	public String name;
	public int year;
	
	public String getInformation(){
		return name + &quot;(&quot; + year + &quot;)&quot;;
	}

	public Movie(String name, int year) {
		this.name = name;
		this.year = year;
	}

	
	public static void main(String[] args){
		DramaMovie d = new DramaMovie(&quot;Hidden Figures&quot;, 2016, Rating.PG);
		Movie m = d;
		
		//In both cases we get the &apos;DramaMovie&apos; method invoked despite the types.  We can only do this because getINformation() is inthe superclass - this means it is guaranteed to exist. 

		
		System.out.println(m.getInformation());
		
		Movie m2 = new DramaMovie(&quot;Hidden Figures&quot;, 2016, Rating.PG);
		System.out.println(m2.getInformation());
	}
}</data><data key="Class2">public class DramaMovie extends Movie {
	public Rating rating;

	public DramaMovie(String name, int year, Rating rating) {
		super(name, year);
		this.rating = rating;
	}
	
	@Override
	public String getInformation(){
		return name + &quot;(&quot; + year + &quot;). Rated &quot; + rating;
	}

}</data><data key="Class3">public enum Rating {
	U, PG, TWELVE, FIFTEEN, EIGHTEEN
	
}</data></node>
    <node id="#40:36" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Movie {
	public String name;
	public int year;
	
	public String getInformation(){
		return name + &quot;(&quot; + year + &quot;)&quot;;
	}

	public Movie(String name, int year) {
		this.name = name;
		this.year = year;
	}

	
	public static void main(String[] args){
		DramaMovie d = new DramaMovie(&quot;Hidden Figures&quot;, 2016, Rating.PG);
		Object m = d; //Implicit cast
		
		System.out.println(&quot;Does d equal m? &quot; + d.equals(m));
		System.out.println(&quot;Does m equal d? &quot; + m.equals(d));
	}
}</data><data key="Class2">public class DramaMovie extends Movie {
	public Rating rating;

	public DramaMovie(String name, int year, Rating rating) {
		super(name, year);
		this.rating = rating;
	}
	
	@Override
	public String getInformation(){
		return name + &quot;(&quot; + year + &quot;). Rated &quot; + rating;
	}
	
	@Override
	public boolean equals(Object o){
		System.out.println(&quot;Using the equals method in DramaMovie.&quot;);
		if (!(o instanceof DramaMovie)) return false;
		DramaMovie m = (DramaMovie)o; //Explicit cast. Safe because of the line above. 
		return m.name == name &amp;&amp; m.year == year &amp;&amp; m.rating == rating;
	}

}</data><data key="Class3">public enum Rating {
	U, PG, TWELVE, FIFTEEN, EIGHTEEN
	
}</data></node>
    <node id="#40:37" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Movie {
	public String name;
	public int year;
	
	public String getInformation(){
		return name + &quot;(&quot; + year + &quot;)&quot;;
	}

	public Movie(String name, int year) {
		this.name = name;
		this.year = year;
	}

	
	public static void main(String[] args){
		DramaMovie d = new DramaMovie(&quot;Hidden Figures&quot;, 2016, Rating.PG);
		
		System.out.println(d.getInformation());
		System.out.println(d);
	}
}</data><data key="Class2">public class DramaMovie extends Movie {
	public Rating rating;

	public DramaMovie(String name, int year, Rating rating) {
		super(name, year);
		this.rating = rating;
	}
	
	
	//Notice that this method also exists in Movie
	//We could commonly use toString for this purpose. It exists in Object.
	@Override
	public String getInformation(){
		return name + &quot;(&quot; + year + &quot;). Rated &quot; + rating;
	}
	
	@Override
	public String toString(){
		return getInformation();
	}
	
	@Override
	public boolean equals(Object o){
		System.out.println(&quot;Using the equals method in DramaMovie.&quot;);
		if (!(o instanceof DramaMovie)) return false;
		DramaMovie m = (DramaMovie)o; //Explicit cast. Safe because of the line above. 
		return m.name == name &amp;&amp; m.year == year &amp;&amp; m.rating == rating;
	}

}</data><data key="Class3">public enum Rating {
	U, PG, TWELVE, FIFTEEN, EIGHTEEN
	
}</data></node>
    <node id="#40:38" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public abstract class Movie { //This is an abstract class. We cannot create objects of this type.
	public String name;
	public int year;
	
	public String getInformation(){
		return name + &quot;(&quot; + year + &quot;)&quot;;
	}

	public Movie(String name, int year) {
		this.name = name;
		this.year = year;
	}

	
	public static void main(String[] args){
		//When we have Movie = non-Movie type we are guaranteeing it has all methods in Movie but nothing else. 
		//Thanks to Late Binding it will invoke the correct method. 
		Movie d = new DramaMovie(&quot;Hidden Figures&quot;, 2016, Rating.PG);
		
		System.out.println(d.getInformation());
		System.out.println(d);
	}
}</data><data key="Class2">public class DramaMovie extends Movie { //This is a class. We can create objects of this type.
	public Rating rating;

	public DramaMovie(String name, int year, Rating rating) {
		super(name, year);
		this.rating = rating;
	}
	
	
	//Notice that this method also exists in Movie
	//We could commonly use toString for this purpose. It exists in Object.
	@Override
	public String getInformation(){
		return name + &quot;(&quot; + year + &quot;). Rated &quot; + rating;
	}
	
	@Override
	public String toString(){
		return getInformation();
	}
	
	@Override
	public boolean equals(Object o){
		System.out.println(&quot;Using the equals method in DramaMovie.&quot;);
		if (!(o instanceof DramaMovie)) return false;
		DramaMovie m = (DramaMovie)o; //Explicit cast. Safe because of the line above. 
		return m.name == name &amp;&amp; m.year == year &amp;&amp; m.rating == rating;
	}

}</data><data key="Class3">public enum Rating {
	U, PG, TWELVE, FIFTEEN, EIGHTEEN
	
}</data></node>
    <node id="#40:39" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public interface ReadableInterface {
	public void read();
	
	//Default allows us to create a default implementation of a method in an interface
	public default boolean readable(){
		return true;
	}
	
	public static void main(String[] args){
		System.out.println(&quot;So far we have: &quot; + Book.getNumberOfBooks() + &quot; books so far&quot;);
		Novel b = new Novel(&quot;The Great Gatsby&quot;, &quot;F. Scott Fitzgerald&quot;, 1925, 180);
		
		//After creating a book
		System.out.println(&quot;So far we have: &quot; + Book.getNumberOfBooks() + &quot; books so far&quot;);
		
		//Let&apos;s see what the default information is.
		System.out.println(b.novelInformation());
		
		//Let&apos;s read some pages
		b.read();
		b.read();
		b.read();
		
		//Has the information updated?
		System.out.println(b.novelInformation());
		
		//Can we update the author? Try deleting the comment start below.
		//Book.books++;
		
		//Try changing the settings to see what happens. 
	}
}</data><data key="Class2">public class Novel extends Book{ //Notice we do not need the interface here if it is in the superclass. It is implicit. 
	int page = 0; //We can assign default values here. No modifier means it can be accessed by anything in the same package. 
	private final int pages; //Private means we can only access it within this class.
	
	
	public Novel(String name, String author, int year, int pages) {
		super(name, author, year);
		this.pages = pages;
	}

	@Override
	public void read() {
		if (page &lt; pages){
			page++;
		}else{
			page = 0;
		}
	}
	
	@Override
	public String toString(){
		return name + &quot;(&quot; + getYear() + &quot;) is &quot; + pages + &quot; and written by &quot; + author;
	}
	
	public String novelInformation(){
		return toString() + &quot;\nYou are on page &quot; + page;
	}

}</data><data key="Class3">public abstract class Book implements ReadableInterface{ //Abstract means we cannot create this type (ie we cannot do new Book()). 
	protected String name;
	protected String author; //Protected means it can only be accessed by this class and its subclasses (and within this package).
	private final int year; //Final means it cannot be changed once it is set. Private methods are not inherited.
	private static int books = 0;

	// We can have constructors in abstract classes too.
	public Book(String name, String author, int year) {
		this.name = name;
		this.author = author;
		this.year = year;
		books++;
	}
	
	//Protected is inherited. 
	protected int getYear(){
		return year;
	}
	
	public static int getNumberOfBooks(){
		return books;
	}
}</data></node>
    <node id="#40:40" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">public class Book { 
	private String name;
	private String author; 
	private final int year;
	
	public Book(String name, String author, int year) {
		this.name = name;
		this.author = author;
		this.year = year;
	}
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAuthor() {
		return author;
	}
	public void setAuthor(String author) {
		this.author = author;
	}
	public int getYear() {
		return year;
	} 
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:41" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        //System.in is our input; it is the command line
        Scanner input = new Scanner(System.in);
        System.out.println(&quot;What is your name?&quot;);
        String name = input.next();
        System.out.println(&quot;Hello &quot; + name);
    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:42" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">//Try running this with and without a file.txt in the root directory
import java.io.FileNotFoundException;
import java.io.PrintWriter;

public class Main {

    public static void main(String[] args) {
        String fileName = &quot;file.txt&quot;;
        try {
            PrintWriter writer = new PrintWriter(fileName);
            writer.println(&quot;Don&apos;t forget your towel!&quot;);
        }catch(FileNotFoundException e){
            System.out.println(&quot;File does not exist!&quot;);
        }
    }
}</data><data key="Class2">import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class Main {

    public static void main(String[] args){
        String fileName = &quot;memes/hot_memes_2k18.txt&quot;;
        try {
            FileReader r = new FileReader(fileName);
            BufferedReader file = new BufferedReader(r); //Notice r and not our filename
            System.out.println(file.readLine()); //Returns the first line (up to &apos;\n&apos;)
        }catch(FileNotFoundException e){
            System.out.println(&quot;Try creating some data in memes/hot_memes_2k18.txt file and see what happens&quot;);
        }catch(IOException e){
            System.out.println(&quot;You broke it :(&quot;);
        }
    }
}</data><data key="Class3">null</data></node>
    <node id="#40:43" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">/**
 * This class contains a representation of a Penguin animal
 * This is a demonstration of readable code
 */
public class Penguin {
    //The penguin&apos;s name cannot be changed because that could be confusing for it
    private final String name;
    private int age;

    /*
     * Initalise a penguin
     * @param name the penguin&apos;s name
     * @param age the current age of the penguin
     */
    public Penguin(String name, int age){
        this.name = name;
        this.age = age;
    }

    /*
     * Returns whether two penguins will be friends if introduced to each other
     * This is deterministic and penguin ordering is not important
     * @param a the first penguin
     * @param b the second penguin
     *
     * @return true if the penguins will become friends, false otherwise
     */
    public static boolean willBefriend(Penguin a, Penguin b){
        return Math.abs(a.age - b.age) &lt; 3;
    }
}</data><data key="Class2">public class Penguin {
    private String n;
    public int A;

    public Penguin(String q, int R){
        this.n = q;
        this.A = R;
    }

    public static boolean FRIEndly(Penguin a, Penguin B){
        if (a.A - B.A &gt;= 3){
            return false;
        }else if (B.A - a.A &gt;= 3){
            return false;
        }
        return true;
    }
}</data><data key="Class3">null</data></node>
    <node id="#40:44" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">/**
 * Create the newest Bugatti car
 */
public class BugattiFactory {

    public static Bugatti createNewCar(String owner, String plate){
        return new Chiron(owner, plate);
    }
}</data><data key="Class2">/**
 * Represents the newly minted Bugatti Chiron
 * https://www.bugatti.com/chiron/
 * NB: We are not in any way affiliated or sponsored by Bugatti (yet?)
 */
public class Chiron extends Bugatti {
    private String owner;
    private String plate;

    public Chiron(String owner, String plate){
        this.owner = owner;
        this.plate = plate;
    }
}</data><data key="Class3">public abstract class Bugatti {
    /*
     * If I was more original there would be code here
     * Perhaps such as the other cars or a complex example demonstrating the worth of the factory design pattern
     * Alas I limited myself to three classes per example a long time ago, so you&apos;ll just have to pretend
     * this demonstrates the full utility of FDP.
     */
}</data></node>
    <node id="#40:45" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">/**
 * Example JavaDoc
 * @author Pepe Silvia
 */
public class Main {

    /*
     * Example multiline comment usually used to describe or explain something about how the method works or runs,
     * perhaps to comment on any assumptions made or to describe the reason for its return type
     */
    public static void main(String[] args) {
        double start_pos = 3.0; //comment used to describe why start_pos is 3
        int x = 5; //x = 5 is a bad comment. EXPLAIN why. Any one can see that x = 5. This DOES NOT HELP.
    }
}</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:46" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1"># This is for Python version 2.x
# You can check your version by typing &apos;python --version&apos; into the command line
# This demonstrates a while loop being used like a for loop
# Whilst this is possible to do it is generally not recommended
x = 0
while x &lt; 3:
    print &quot;This value of x is: {}&quot;.format(x)
    x = x + 1

print &quot;\n&quot;

# Try changes these values to see what happens
a = 145
b = 15
while b:
    a, b = b, a%b
print &quot;The GCD of {}&quot;.format(a)
print &quot;\n&quot;

# This is an object. You can read more about them if you don&apos;t understand how
# or why we would use them.
class Person:

    def __init__(self, pets):
        self.pets = pets
        self._count = 0

    def get_pet(self):
        pet = self.pets[self._count]
        self._count = self._count + 1
        return pet

    def has_pet(self):
        return len(self.pets) &gt; self._count

# Try adding or removing names from the list
leo = Person([&apos;Alice&apos;, &apos;Billy&apos;, &apos;Cate&apos;])
while leo.has_pet():
    print &quot;Leo has a pet called: {}&quot;.format(leo.get_pet())</data><data key="Class2"># This is for Python version 3.x
# You can check your version by typing &apos;python --version&apos; into the command line
# This demonstrates a while loop being used like a for loop
# Whilst this is possible to do it is generally not recommended
x = 0
while x &lt; 3:
    print(&quot;This value of x is: {}&quot;.format(x))
    x = x + 1

print(&quot;\n&quot;)

# Try changes these values to see what happens
a = 145
b = 15
while b:
    a, b = b, a%b
print(&quot;The GCD of {}&quot;.format(a))
print(&quot;\n&quot;)

# This is an object. You can read more about them if you don&apos;t understand how
# or why we would use them.
class Person:

    def __init__(self, pets):
        self.pets = pets
        self._count = 0

    def get_pet(self):
        pet = self.pets[self._count]
        self._count = self._count + 1
        return pet

    def has_pet(self):
        return len(self.pets) &gt; self._count

# Try adding or removing names from the list
leo = Person([&apos;Alice&apos;, &apos;Billy&apos;, &apos;Cate&apos;])
while leo.has_pet():
    print(&quot;Leo has a pet called: {}&quot;.format(leo.get_pet()))</data><data key="Class3">null</data></node>
    <node id="#40:47" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1"># This is for Python version 2.x
# You can check your version by typing &apos;python --version&apos; into the command line
import timeit
MAX = 500 #Try turning this up larger to really see the values diverge
gen = xrange(MAX) #THis creates a generator
lst = range(MAX) #This actually stores in memory all values 0 .. MAX

# Loop version (Java/C style)
def c_style_loop(lst):
    for i in range(len(lst)):
        lst[i] /= 1

# Generator Style (Pythonic)
def gen_style(gen):
    for g in gen:
        g /= 1 #Notice we cannot update the actually list here

# Enumerate Style (Pythonic)
def enumerate_style(lst):
    for g, i in enumerate(lst):
        lst[i] /= 1

# This will take a few minutes to run and demonstrate why we write Pythonic
# code in Python instead of what we might want to do
print &quot;For C-style loop a list of {} took: {}&quot; \
            .format(MAX, timeit.timeit(&quot;c_style_loop(lst)&quot;, \
                            setup=&quot;from __main__ import c_style_loop, lst&quot;))

print &quot;For a generator style loop it took: {}&quot;.format( timeit.timeit(\
            &quot;gen_style(gen)&quot;, setup = &quot;from __main__ import gen_style, gen&quot;))

print &quot;For an enumerated style loop it took: {}&quot;.format( timeit.timeit(\
            &quot;enumerate_style(lst)&quot;, setup = &quot;from __main__ import enumerate_style, lst&quot;))</data><data key="Class2"># This is for Python version 3.x
# You can check your version by typing &apos;python --version&apos; into the command line
# This doesn&apos;t work as well in Python 3 because xrange became range
import timeit
MAX = 500 #Try turning this up larger to really see the values diverge
gen = [x for x in range(MAX)] #Go read about generators they are amazing

# Loop version (Java/C style)
def c_style_loop(gen):
    for i in range(len(gen)):
        gen[i] /= 1

# Generator Style (Pythonic)
def gen_style(gen):
    for g in gen:
        g /= 1 #Notice we cannot actually update the list in here

# Enumerate Style (Pythonic)
def enumerate_style(gen):
    for i, g in enumerate(gen):
        gen[i] /= 1

# This will take a few minutes to run and demonstrate why we write Pythonic
# code in Python instead of what we might want to do
print(&quot;For C-style loop a list of {} took: {}&quot; \
            .format(MAX, timeit.timeit(&quot;c_style_loop(gen)&quot;, \
                            setup=&quot;from __main__ import c_style_loop, gen&quot;)))

print(&quot;For a generator style loop it took: {}&quot;.format( timeit.timeit(\
            &quot;gen_style(gen)&quot;, setup = &quot;from __main__ import gen_style, gen&quot;)))

print(&quot;For a generator style loop it took: {}&quot;.format( timeit.timeit(\
            &quot;enumerate_style(gen)&quot;, setup = &quot;from __main__ import enumerate_style, gen&quot;)))</data><data key="Class3">null</data></node>
    <node id="#40:48" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">from __future__ import print_function #This code will work on Python 2 and 3.


# Try changing these values to see what happens
x = 0
y = 5
z = 0
a = &quot;Hello&quot;
b = &quot;World&quot;
c = &quot;Hello&quot;
l1 = (x for x in range(100))
l2 = (x for x in range(100))


# NOTE: The &apos;is&apos; keyword is nuanced. I would strongly suggest reading more
# about it before using it. There are some examples here.

if (x &gt; y):
    print(&quot;{} is greater than {}&quot;.format(x, y))
else:
    print(&quot;{} is not greater than {}&quot;.format(x, y))

if (x == z):
    print(&quot;{} is numerically equal to {}&quot;.format(x, z))

if (x != y):
    print(&quot;{} and {} are not equal&quot;.format(x, y))

if (x is z):
    print(&quot;{} is {}&quot;.format(x, z))

x = z

if (x is z):
    print(&quot;{} is {} when assigned together&quot;.format(x, z))

if (a == c):
    print(&quot;{} and {} are equal&quot;.format(a, c))

if (a is c):
    print(&quot;{} is {}&quot;.format(a, c))

a = c

if (a is c):
    print(&quot;{} is {} after assignment&quot;.format(a, c))

if (list(l1) &lt; list(l2)):
    print(&quot;l1 is &lt; l2&quot;)

if (list(l2) &gt; list(l1)):
    print(&quot;l2 is &lt; l1&quot;)

if (l1 == l2):
    print(&quot;l1 and l2 are equal&quot;)

if (l1 is l2):
    print(&quot;l1 is l2&quot;)

l1 = l2

if (l1 is l2):
    print(&quot;l1 is l2 after assignment&quot;)</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:49" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">from __future__ import print_function #This code will work on Python 2 and 3.

# Try changing these values to see what happens
x = 0
lst = []

# An example of an IF
if x == 0:
    lst.append(&quot;Hello&quot;);

# AN example of an IF-Else
if len(lst) == 0:
    print(&quot;List is empty!&quot;)
else:
    print(&quot;List is not empty!&quot;)

# We can add if statements to generators and list comprehension
even_numbers = [n for n in range(100) if n % 2 == 0]
print(&quot;even_numbers is: {}&quot;.format(even_numbers))</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:50" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">from __future__ import print_function #This code will work on Python 2 and 3.

# Try changing these values to see what happens
x = 0
lst = []

# An example of an IF
if x == 0:
    lst.append(&quot;Hello&quot;);
elif x &lt; 1:
    lst.append(&quot;World!&quot;)

#Notice how the if matches and it then ignores the elif.
print(&quot;lst is: {}&quot;.format(lst))

# AN example of an IF-Else
if len(lst) == 0:
    print(&quot;List is empty!&quot;)
elif len(lst) == 1:
    print(&quot;List has one item!&quot;)

# We can add if statements to generators and list comprehension
even_numbers = [n  if n % 2 == 0 else -1 for n in range(100)]
print(&quot;even_numbers is: {}&quot;.format(even_numbers))</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:51" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">from __future__ import print_function #This code will work on Python 2 and 3.

evens = set((x for x in range(100) if x % 2 == 0))
others = set((1, 2, 3, 4, 5, 10, 101, 1487, 7, -5))
small_evens = set((x for x in range(25) if x % 2 == 0))

# We can then do cool things such as
# Test if an element is in a set
print(&quot;5 in evens? {}&quot;.format(5 in evens))
print(&quot;What about others? {}&quot;.format(5 in others))

# Test for proper subsets
print(&quot;small_evens a proper subset of evens? {} &quot;.format(small_evens &lt; evens))

# Or regular subsets
print(&quot;small_evens is a subset of evens? {}&quot;.format(small_evens &lt;= evens))

# What about unions?
print(&quot;small_evens U others: {}&quot;.format(small_evens | others))

# Or intersections?
print(&quot;evens intersect others: &quot;.format(evens &amp; others))

# And **MANY** more https://docs.python.org/2/library/stdtypes.html#set</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <node id="#40:52" labels=":FullExample"><data key="labels">:FullExample</data><data key="Class1">from __future__ import print_function #This code will work on Python 2 and 3.

classes = {
	&apos;MT2501&apos;: &apos;Linear Algebra&apos;,
	&apos;MT2502&apos;: &apos;Analysis&apos;,
	&apos;MT2503&apos;: &apos;Multivariate Calculus&apos;
	}

print(classes)

print(classes[&apos;MT2502&apos;])

# We can also do dictionary comprehension
squared = {x: x**2 for x in range(20)}
print(squared)
print(squared[10])</data><data key="Class2">null</data><data key="Class3">null</data></node>
    <edge id="#12:0" label="teaches" source="#26:0" target="#13:10"><data key="label">teaches</data></edge>
    <edge id="#12:1" label="teaches" source="#26:0" target="#14:7"><data key="label">teaches</data></edge>
    <edge id="#12:2" label="teaches" source="#26:0" target="#13:15"><data key="label">teaches</data></edge>
    <edge id="#12:3" label="teaches" source="#26:0" target="#13:21"><data key="label">teaches</data></edge>
    <edge id="#12:4" label="teaches" source="#26:1" target="#13:22"><data key="label">teaches</data></edge>
    <edge id="#12:6" label="teaches" source="#26:1" target="#14:24"><data key="label">teaches</data></edge>
    <edge id="#12:7" label="teaches" source="#26:1" target="#14:12"><data key="label">teaches</data></edge>
    <edge id="#12:8" label="teaches" source="#26:1" target="#13:32"><data key="label">teaches</data></edge>
    <edge id="#12:9" label="teaches" source="#26:1" target="#14:8"><data key="label">teaches</data></edge>
    <edge id="#12:13" label="teaches" source="#26:2" target="#13:29"><data key="label">teaches</data></edge>
    <edge id="#12:17" label="teaches" source="#26:3" target="#13:25"><data key="label">teaches</data></edge>
    <edge id="#12:18" label="teaches" source="#26:3" target="#14:11"><data key="label">teaches</data></edge>
    <edge id="#12:20" label="teaches" source="#26:4" target="#14:11"><data key="label">teaches</data></edge>
    <edge id="#12:21" label="teaches" source="#26:5" target="#14:3"><data key="label">teaches</data></edge>
    <edge id="#12:22" label="teaches" source="#26:5" target="#13:11"><data key="label">teaches</data></edge>
    <edge id="#12:24" label="teaches" source="#26:6" target="#14:23"><data key="label">teaches</data></edge>
    <edge id="#12:26" label="teaches" source="#26:6" target="#13:21"><data key="label">teaches</data></edge>
    <edge id="#12:27" label="teaches" source="#26:8" target="#13:15"><data key="label">teaches</data></edge>
    <edge id="#12:28" label="teaches" source="#26:8" target="#13:10"><data key="label">teaches</data></edge>
    <edge id="#12:29" label="teaches" source="#26:8" target="#13:11"><data key="label">teaches</data></edge>
    <edge id="#12:30" label="teaches" source="#26:8" target="#14:4"><data key="label">teaches</data></edge>
    <edge id="#12:31" label="teaches" source="#26:8" target="#14:3"><data key="label">teaches</data></edge>
    <edge id="#12:32" label="teaches" source="#26:9" target="#14:15"><data key="label">teaches</data></edge>
    <edge id="#12:35" label="teaches" source="#26:10" target="#14:16"><data key="label">teaches</data></edge>
    <edge id="#12:36" label="teaches" source="#26:11" target="#13:46"><data key="label">teaches</data></edge>
    <edge id="#12:37" label="teaches" source="#26:11" target="#14:25"><data key="label">teaches</data></edge>
    <edge id="#12:38" label="teaches" source="#26:11" target="#13:35"><data key="label">teaches</data></edge>
    <edge id="#12:39" label="teaches" source="#26:11" target="#14:32"><data key="label">teaches</data></edge>
    <edge id="#12:40" label="teaches" source="#26:12" target="#13:54"><data key="label">teaches</data></edge>
    <edge id="#12:41" label="teaches" source="#26:13" target="#13:41"><data key="label">teaches</data></edge>
    <edge id="#12:42" label="teaches" source="#26:13" target="#14:29"><data key="label">teaches</data></edge>
    <edge id="#12:43" label="teaches" source="#26:13" target="#14:43"><data key="label">teaches</data></edge>
    <edge id="#12:44" label="teaches" source="#26:14" target="#13:43"><data key="label">teaches</data></edge>
    <edge id="#12:45" label="teaches" source="#26:15" target="#14:30"><data key="label">teaches</data></edge>
    <edge id="#12:46" label="teaches" source="#26:15" target="#14:41"><data key="label">teaches</data></edge>
    <edge id="#12:47" label="teaches" source="#26:16" target="#14:36"><data key="label">teaches</data></edge>
    <edge id="#12:48" label="teaches" source="#26:16" target="#14:33"><data key="label">teaches</data></edge>
    <edge id="#12:49" label="teaches" source="#26:16" target="#13:42"><data key="label">teaches</data></edge>
    <edge id="#12:51" label="teaches" source="#26:6" target="#13:60"><data key="label">teaches</data></edge>
    <edge id="#12:52" label="teaches" source="#26:1" target="#13:60"><data key="label">teaches</data></edge>
    <edge id="#12:53" label="teaches" source="#26:17" target="#13:58"><data key="label">teaches</data></edge>
    <edge id="#12:54" label="teaches" source="#26:17" target="#34:11"><data key="label">teaches</data></edge>
    <edge id="#12:55" label="teaches" source="#26:18" target="#13:65"><data key="label">teaches</data></edge>
    <edge id="#12:56" label="teaches" source="#26:19" target="#13:70"><data key="label">teaches</data></edge>
    <edge id="#12:57" label="teaches" source="#26:20" target="#14:50"><data key="label">teaches</data></edge>
    <edge id="#12:58" label="teaches" source="#26:20" target="#13:63"><data key="label">teaches</data></edge>
    <edge id="#12:59" label="teaches" source="#26:20" target="#13:63"><data key="label">teaches</data></edge>
    <edge id="#12:60" label="teaches" source="#26:21" target="#13:62"><data key="label">teaches</data></edge>
    <edge id="#12:61" label="teaches" source="#26:22" target="#13:73"><data key="label">teaches</data></edge>
    <edge id="#12:62" label="teaches" source="#26:4" target="#14:48"><data key="label">teaches</data></edge>
    <edge id="#12:63" label="teaches" source="#26:23" target="#13:84"><data key="label">teaches</data></edge>
    <edge id="#12:64" label="teaches" source="#26:24" target="#13:82"><data key="label">teaches</data></edge>
    <edge id="#12:65" label="teaches" source="#26:25" target="#13:82"><data key="label">teaches</data></edge>
    <edge id="#12:66" label="teaches" source="#26:26" target="#13:86"><data key="label">teaches</data></edge>
    <edge id="#12:67" label="teaches" source="#26:26" target="#13:91"><data key="label">teaches</data></edge>
    <edge id="#12:68" label="teaches" source="#26:8" target="#34:13"><data key="label">teaches</data></edge>
    <edge id="#12:69" label="teaches" source="#26:10" target="#34:13"><data key="label">teaches</data></edge>
    <edge id="#12:70" label="teaches" source="#26:6" target="#13:80"><data key="label">teaches</data></edge>
    <edge id="#12:71" label="teaches" source="#26:2" target="#13:111"><data key="label">teaches</data></edge>
    <edge id="#12:72" label="teaches" source="#26:2" target="#13:114"><data key="label">teaches</data></edge>
    <edge id="#12:73" label="teaches" source="#26:10" target="#13:114"><data key="label">teaches</data></edge>
    <edge id="#12:74" label="teaches" source="#26:10" target="#13:23"><data key="label">teaches</data></edge>
    <edge id="#12:76" label="teaches" source="#26:1" target="#13:56"><data key="label">teaches</data></edge>
    <edge id="#12:77" label="teaches" source="#26:2" target="#13:57"><data key="label">teaches</data></edge>
    <edge id="#12:78" label="teaches" source="#26:2" target="#13:15"><data key="label">teaches</data></edge>
    <edge id="#12:79" label="teaches" source="#26:3" target="#13:26"><data key="label">teaches</data></edge>
    <edge id="#12:80" label="teaches" source="#26:3" target="#13:12"><data key="label">teaches</data></edge>
    <edge id="#12:81" label="teaches" source="#26:4" target="#13:25"><data key="label">teaches</data></edge>
    <edge id="#12:82" label="teaches" source="#26:4" target="#13:111"><data key="label">teaches</data></edge>
    <edge id="#12:83" label="teaches" source="#26:5" target="#13:97"><data key="label">teaches</data></edge>
    <edge id="#12:84" label="teaches" source="#26:6" target="#13:68"><data key="label">teaches</data></edge>
    <edge id="#12:85" label="teaches" source="#26:8" target="#14:11"><data key="label">teaches</data></edge>
    <edge id="#12:86" label="teaches" source="#26:28" target="#13:100"><data key="label">teaches</data></edge>
    <edge id="#19:6" label="contain" source="#13:11" target="#14:4"><data key="label">contain</data></edge>
    <edge id="#19:7" label="contain" source="#13:11" target="#13:12"><data key="label">contain</data></edge>
    <edge id="#19:11" label="contain" source="#13:15" target="#14:7"><data key="label">contain</data></edge>
    <edge id="#19:12" label="contain" source="#14:7" target="#14:8"><data key="label">contain</data></edge>
    <edge id="#19:28" label="contain" source="#13:15" target="#14:15"><data key="label">contain</data></edge>
    <edge id="#19:35" label="contain" source="#13:25" target="#14:18"><data key="label">contain</data></edge>
    <edge id="#19:36" label="contain" source="#13:25" target="#14:19"><data key="label">contain</data></edge>
    <edge id="#19:38" label="contain" source="#13:26" target="#14:20"><data key="label">contain</data></edge>
    <edge id="#19:40" label="contain" source="#13:26" target="#14:22"><data key="label">contain</data></edge>
    <edge id="#19:43" label="contain" source="#13:28" target="#14:23"><data key="label">contain</data></edge>
    <edge id="#19:48" label="contain" source="#13:23" target="#13:33"><data key="label">contain</data></edge>
    <edge id="#19:51" label="contain" source="#13:23" target="#13:34"><data key="label">contain</data></edge>
    <edge id="#19:148" label="contain" source="#34:3" target="#13:16"><data key="label">contain</data></edge>
    <edge id="#19:151" label="contain" source="#28:3" target="#34:2"><data key="label">contain</data></edge>
    <edge id="#19:152" label="contain" source="#28:3" target="#34:3"><data key="label">contain</data></edge>
    <edge id="#19:153" label="contain" source="#28:3" target="#34:4"><data key="label">contain</data></edge>
    <edge id="#19:164" label="contain" source="#13:41" target="#14:29"><data key="label">contain</data></edge>
    <edge id="#19:168" label="contain" source="#13:54" target="#14:33"><data key="label">contain</data></edge>
    <edge id="#19:169" label="contain" source="#13:54" target="#14:35"><data key="label">contain</data></edge>
    <edge id="#19:170" label="contain" source="#13:54" target="#14:26"><data key="label">contain</data></edge>
    <edge id="#19:171" label="contain" source="#13:54" target="#14:42"><data key="label">contain</data></edge>
    <edge id="#19:172" label="contain" source="#13:54" target="#14:40"><data key="label">contain</data></edge>
    <edge id="#19:173" label="contain" source="#13:55" target="#13:42"><data key="label">contain</data></edge>
    <edge id="#19:174" label="contain" source="#13:55" target="#14:38"><data key="label">contain</data></edge>
    <edge id="#19:175" label="contain" source="#13:55" target="#14:41"><data key="label">contain</data></edge>
    <edge id="#19:176" label="contain" source="#14:42" target="#13:50"><data key="label">contain</data></edge>
    <edge id="#19:177" label="contain" source="#14:30" target="#13:47"><data key="label">contain</data></edge>
    <edge id="#19:178" label="contain" source="#14:30" target="#14:39"><data key="label">contain</data></edge>
    <edge id="#19:179" label="contain" source="#13:35" target="#14:36"><data key="label">contain</data></edge>
    <edge id="#19:180" label="contain" source="#14:30" target="#13:36"><data key="label">contain</data></edge>
    <edge id="#19:181" label="contain" source="#13:35" target="#14:34"><data key="label">contain</data></edge>
    <edge id="#19:182" label="contain" source="#13:35" target="#14:32"><data key="label">contain</data></edge>
    <edge id="#19:187" label="contain" source="#34:6" target="#13:55"><data key="label">contain</data></edge>
    <edge id="#19:188" label="contain" source="#34:6" target="#13:54"><data key="label">contain</data></edge>
    <edge id="#19:192" label="contain" source="#28:4" target="#34:6"><data key="label">contain</data></edge>
    <edge id="#19:193" label="contain" source="#28:4" target="#34:5"><data key="label">contain</data></edge>
    <edge id="#19:198" label="contain" source="#28:3" target="#34:8"><data key="label">contain</data></edge>
    <edge id="#19:200" label="contain" source="#34:2" target="#13:27"><data key="label">contain</data></edge>
    <edge id="#19:201" label="contain" source="#34:2" target="#13:29"><data key="label">contain</data></edge>
    <edge id="#19:202" label="contain" source="#34:2" target="#13:26"><data key="label">contain</data></edge>
    <edge id="#19:203" label="contain" source="#34:2" target="#13:25"><data key="label">contain</data></edge>
    <edge id="#19:204" label="contain" source="#34:8" target="#13:23"><data key="label">contain</data></edge>
    <edge id="#19:205" label="contain" source="#34:8" target="#13:11"><data key="label">contain</data></edge>
    <edge id="#19:206" label="contain" source="#13:23" target="#14:16"><data key="label">contain</data></edge>
    <edge id="#19:207" label="contain" source="#34:8" target="#13:10"><data key="label">contain</data></edge>
    <edge id="#19:209" label="contain" source="#34:3" target="#13:56"><data key="label">contain</data></edge>
    <edge id="#19:210" label="contain" source="#34:3" target="#13:57"><data key="label">contain</data></edge>
    <edge id="#19:211" label="contain" source="#13:57" target="#14:11"><data key="label">contain</data></edge>
    <edge id="#19:212" label="contain" source="#13:57" target="#14:24"><data key="label">contain</data></edge>
    <edge id="#19:213" label="contain" source="#13:57" target="#13:31"><data key="label">contain</data></edge>
    <edge id="#19:214" label="contain" source="#13:57" target="#14:12"><data key="label">contain</data></edge>
    <edge id="#19:215" label="contain" source="#13:16" target="#13:32"><data key="label">contain</data></edge>
    <edge id="#19:217" label="contain" source="#28:3" target="#34:9"><data key="label">contain</data></edge>
    <edge id="#19:219" label="contain" source="#35:0" target="#26:0"><data key="label">contain</data></edge>
    <edge id="#19:220" label="contain" source="#35:0" target="#26:1"><data key="label">contain</data></edge>
    <edge id="#19:221" label="contain" source="#35:0" target="#26:2"><data key="label">contain</data></edge>
    <edge id="#19:222" label="contain" source="#35:0" target="#26:3"><data key="label">contain</data></edge>
    <edge id="#19:223" label="contain" source="#35:0" target="#26:4"><data key="label">contain</data></edge>
    <edge id="#19:224" label="contain" source="#35:0" target="#26:5"><data key="label">contain</data></edge>
    <edge id="#19:225" label="contain" source="#35:0" target="#26:6"><data key="label">contain</data></edge>
    <edge id="#19:226" label="contain" source="#35:0" target="#26:8"><data key="label">contain</data></edge>
    <edge id="#19:227" label="contain" source="#35:0" target="#26:9"><data key="label">contain</data></edge>
    <edge id="#19:228" label="contain" source="#35:0" target="#26:10"><data key="label">contain</data></edge>
    <edge id="#19:229" label="contain" source="#35:1" target="#26:11"><data key="label">contain</data></edge>
    <edge id="#19:230" label="contain" source="#35:1" target="#26:12"><data key="label">contain</data></edge>
    <edge id="#19:231" label="contain" source="#35:1" target="#26:13"><data key="label">contain</data></edge>
    <edge id="#19:232" label="contain" source="#35:1" target="#26:14"><data key="label">contain</data></edge>
    <edge id="#19:233" label="contain" source="#35:1" target="#26:15"><data key="label">contain</data></edge>
    <edge id="#19:234" label="contain" source="#35:1" target="#26:16"><data key="label">contain</data></edge>
    <edge id="#19:235" label="contain" source="#34:3" target="#13:58"><data key="label">contain</data></edge>
    <edge id="#19:237" label="contain" source="#13:58" target="#14:44"><data key="label">contain</data></edge>
    <edge id="#19:238" label="contain" source="#13:58" target="#14:45"><data key="label">contain</data></edge>
    <edge id="#19:239" label="contain" source="#13:58" target="#14:46"><data key="label">contain</data></edge>
    <edge id="#19:240" label="contain" source="#13:58" target="#14:47"><data key="label">contain</data></edge>
    <edge id="#19:241" label="contain" source="#14:11" target="#14:48"><data key="label">contain</data></edge>
    <edge id="#19:242" label="contain" source="#13:25" target="#14:17"><data key="label">contain</data></edge>
    <edge id="#19:244" label="contain" source="#34:4" target="#13:14"><data key="label">contain</data></edge>
    <edge id="#19:245" label="contain" source="#34:4" target="#13:15"><data key="label">contain</data></edge>
    <edge id="#19:246" label="contain" source="#34:4" target="#13:59"><data key="label">contain</data></edge>
    <edge id="#19:248" label="contain" source="#34:9" target="#13:19"><data key="label">contain</data></edge>
    <edge id="#19:249" label="contain" source="#34:9" target="#13:21"><data key="label">contain</data></edge>
    <edge id="#19:250" label="contain" source="#34:9" target="#13:28"><data key="label">contain</data></edge>
    <edge id="#19:252" label="contain" source="#34:9" target="#13:60"><data key="label">contain</data></edge>
    <edge id="#19:253" label="contain" source="#28:3" target="#34:11"><data key="label">contain</data></edge>
    <edge id="#19:254" label="contain" source="#34:11" target="#13:61"><data key="label">contain</data></edge>
    <edge id="#19:255" label="contain" source="#13:61" target="#13:62"><data key="label">contain</data></edge>
    <edge id="#19:256" label="contain" source="#13:61" target="#13:63"><data key="label">contain</data></edge>
    <edge id="#19:257" label="contain" source="#13:61" target="#13:64"><data key="label">contain</data></edge>
    <edge id="#19:258" label="contain" source="#13:63" target="#14:49"><data key="label">contain</data></edge>
    <edge id="#19:260" label="contain" source="#13:56" target="#13:66"><data key="label">contain</data></edge>
    <edge id="#19:261" label="contain" source="#14:12" target="#14:50"><data key="label">contain</data></edge>
    <edge id="#19:262" label="contain" source="#34:9" target="#13:68"><data key="label">contain</data></edge>
    <edge id="#19:263" label="contain" source="#34:9" target="#13:69"><data key="label">contain</data></edge>
    <edge id="#19:265" label="contain" source="#34:2" target="#13:70"><data key="label">contain</data></edge>
    <edge id="#19:266" label="contain" source="#13:26" target="#14:52"><data key="label">contain</data></edge>
    <edge id="#19:267" label="contain" source="#14:7" target="#14:53"><data key="label">contain</data></edge>
    <edge id="#19:268" label="contain" source="#13:59" target="#14:54"><data key="label">contain</data></edge>
    <edge id="#19:269" label="contain" source="#13:59" target="#14:55"><data key="label">contain</data></edge>
    <edge id="#19:270" label="contain" source="#34:4" target="#13:71"><data key="label">contain</data></edge>
    <edge id="#19:271" label="contain" source="#13:25" target="#14:56"><data key="label">contain</data></edge>
    <edge id="#19:272" label="contain" source="#34:4" target="#13:72"><data key="label">contain</data></edge>
    <edge id="#19:273" label="contain" source="#13:72" target="#13:22"><data key="label">contain</data></edge>
    <edge id="#19:274" label="contain" source="#13:72" target="#13:73"><data key="label">contain</data></edge>
    <edge id="#19:275" label="contain" source="#35:3" target="#26:19"><data key="label">contain</data></edge>
    <edge id="#19:276" label="contain" source="#35:3" target="#26:18"><data key="label">contain</data></edge>
    <edge id="#19:277" label="contain" source="#35:3" target="#26:21"><data key="label">contain</data></edge>
    <edge id="#19:278" label="contain" source="#35:3" target="#26:22"><data key="label">contain</data></edge>
    <edge id="#19:279" label="contain" source="#35:3" target="#26:17"><data key="label">contain</data></edge>
    <edge id="#19:280" label="contain" source="#35:3" target="#26:20"><data key="label">contain</data></edge>
    <edge id="#19:281" label="contain" source="#34:4" target="#13:74"><data key="label">contain</data></edge>
    <edge id="#19:292" label="contain" source="#13:16" target="#13:75"><data key="label">contain</data></edge>
    <edge id="#19:293" label="contain" source="#13:16" target="#13:76"><data key="label">contain</data></edge>
    <edge id="#19:294" label="contain" source="#13:16" target="#13:77"><data key="label">contain</data></edge>
    <edge id="#19:295" label="contain" source="#28:8" target="#34:12"><data key="label">contain</data></edge>
    <edge id="#19:296" label="contain" source="#28:8" target="#34:13"><data key="label">contain</data></edge>
    <edge id="#19:297" label="contain" source="#34:12" target="#13:78"><data key="label">contain</data></edge>
    <edge id="#19:298" label="contain" source="#28:8" target="#34:14"><data key="label">contain</data></edge>
    <edge id="#19:299" label="contain" source="#34:14" target="#13:80"><data key="label">contain</data></edge>
    <edge id="#19:301" label="contain" source="#13:80" target="#13:81"><data key="label">contain</data></edge>
    <edge id="#19:302" label="contain" source="#34:12" target="#13:82"><data key="label">contain</data></edge>
    <edge id="#19:303" label="contain" source="#13:82" target="#13:83"><data key="label">contain</data></edge>
    <edge id="#19:304" label="contain" source="#34:12" target="#13:84"><data key="label">contain</data></edge>
    <edge id="#19:305" label="contain" source="#34:12" target="#13:85"><data key="label">contain</data></edge>
    <edge id="#19:307" label="contain" source="#13:80" target="#13:87"><data key="label">contain</data></edge>
    <edge id="#19:308" label="contain" source="#13:82" target="#13:88"><data key="label">contain</data></edge>
    <edge id="#19:309" label="contain" source="#34:12" target="#13:86"><data key="label">contain</data></edge>
    <edge id="#19:310" label="contain" source="#13:78" target="#13:89"><data key="label">contain</data></edge>
    <edge id="#19:311" label="contain" source="#13:84" target="#13:90"><data key="label">contain</data></edge>
    <edge id="#19:312" label="contain" source="#34:12" target="#13:91"><data key="label">contain</data></edge>
    <edge id="#19:313" label="contain" source="#34:12" target="#13:92"><data key="label">contain</data></edge>
    <edge id="#19:314" label="contain" source="#13:84" target="#13:93"><data key="label">contain</data></edge>
    <edge id="#19:315" label="contain" source="#13:80" target="#13:94"><data key="label">contain</data></edge>
    <edge id="#19:316" label="contain" source="#13:80" target="#13:95"><data key="label">contain</data></edge>
    <edge id="#19:317" label="contain" source="#34:12" target="#13:96"><data key="label">contain</data></edge>
    <edge id="#19:318" label="contain" source="#34:13" target="#13:97"><data key="label">contain</data></edge>
    <edge id="#19:319" label="contain" source="#13:80" target="#13:98"><data key="label">contain</data></edge>
    <edge id="#19:320" label="contain" source="#13:82" target="#13:99"><data key="label">contain</data></edge>
    <edge id="#19:321" label="contain" source="#34:13" target="#13:100"><data key="label">contain</data></edge>
    <edge id="#19:322" label="contain" source="#34:13" target="#13:101"><data key="label">contain</data></edge>
    <edge id="#19:323" label="contain" source="#34:13" target="#13:102"><data key="label">contain</data></edge>
    <edge id="#19:324" label="contain" source="#34:13" target="#13:103"><data key="label">contain</data></edge>
    <edge id="#19:325" label="contain" source="#34:13" target="#13:104"><data key="label">contain</data></edge>
    <edge id="#19:326" label="contain" source="#34:13" target="#13:105"><data key="label">contain</data></edge>
    <edge id="#19:327" label="contain" source="#34:13" target="#13:106"><data key="label">contain</data></edge>
    <edge id="#19:328" label="contain" source="#34:13" target="#13:107"><data key="label">contain</data></edge>
    <edge id="#19:329" label="contain" source="#34:13" target="#13:108"><data key="label">contain</data></edge>
    <edge id="#19:330" label="contain" source="#34:12" target="#13:39"><data key="label">contain</data></edge>
    <edge id="#19:331" label="contain" source="#28:4" target="#34:15"><data key="label">contain</data></edge>
    <edge id="#19:332" label="contain" source="#34:15" target="#13:41"><data key="label">contain</data></edge>
    <edge id="#19:333" label="contain" source="#34:15" target="#13:110"><data key="label">contain</data></edge>
    <edge id="#19:334" label="contain" source="#13:110" target="#14:31"><data key="label">contain</data></edge>
    <edge id="#19:335" label="contain" source="#14:42" target="#14:25"><data key="label">contain</data></edge>
    <edge id="#19:336" label="contain" source="#34:15" target="#13:43"><data key="label">contain</data></edge>
    <edge id="#19:337" label="contain" source="#13:41" target="#14:43"><data key="label">contain</data></edge>
    <edge id="#19:339" label="contain" source="#28:4" target="#34:16"><data key="label">contain</data></edge>
    <edge id="#19:340" label="contain" source="#34:16" target="#13:48"><data key="label">contain</data></edge>
    <edge id="#19:341" label="contain" source="#34:16" target="#13:44"><data key="label">contain</data></edge>
    <edge id="#19:342" label="contain" source="#34:16" target="#13:46"><data key="label">contain</data></edge>
    <edge id="#19:343" label="contain" source="#34:16" target="#13:37"><data key="label">contain</data></edge>
    <edge id="#19:344" label="contain" source="#34:16" target="#13:38"><data key="label">contain</data></edge>
    <edge id="#19:345" label="contain" source="#34:5" target="#14:30"><data key="label">contain</data></edge>
    <edge id="#19:346" label="contain" source="#34:5" target="#13:45"><data key="label">contain</data></edge>
    <edge id="#19:347" label="contain" source="#34:5" target="#13:35"><data key="label">contain</data></edge>
    <edge id="#19:348" label="contain" source="#34:5" target="#14:28"><data key="label">contain</data></edge>
    <edge id="#19:349" label="contain" source="#35:3" target="#26:23"><data key="label">contain</data></edge>
    <edge id="#19:350" label="contain" source="#35:3" target="#26:24"><data key="label">contain</data></edge>
    <edge id="#19:351" label="contain" source="#35:3" target="#26:25"><data key="label">contain</data></edge>
    <edge id="#19:352" label="contain" source="#35:3" target="#26:26"><data key="label">contain</data></edge>
    <edge id="#19:353" label="contain" source="#14:7" target="#13:111"><data key="label">contain</data></edge>
    <edge id="#19:355" label="contain" source="#13:110" target="#14:27"><data key="label">contain</data></edge>
    <edge id="#19:358" label="contain" source="#34:14" target="#13:113"><data key="label">contain</data></edge>
    <edge id="#19:359" label="contain" source="#13:11" target="#13:114"><data key="label">contain</data></edge>
    <edge id="#19:360" label="contain" source="#13:114" target="#14:62"><data key="label">contain</data></edge>
    <edge id="#19:361" label="contain" source="#13:114" target="#14:61"><data key="label">contain</data></edge>
    <edge id="#19:362" label="contain" source="#13:114" target="#14:65"><data key="label">contain</data></edge>
    <edge id="#19:363" label="contain" source="#13:114" target="#14:59"><data key="label">contain</data></edge>
    <edge id="#19:364" label="contain" source="#13:114" target="#14:58"><data key="label">contain</data></edge>
    <edge id="#19:365" label="contain" source="#13:114" target="#14:60"><data key="label">contain</data></edge>
    <edge id="#19:366" label="contain" source="#13:114" target="#14:57"><data key="label">contain</data></edge>
    <edge id="#19:367" label="contain" source="#13:114" target="#14:64"><data key="label">contain</data></edge>
    <edge id="#19:368" label="contain" source="#13:114" target="#14:3"><data key="label">contain</data></edge>
    <edge id="#19:369" label="contain" source="#13:35" target="#14:66"><data key="label">contain</data></edge>
    <edge id="#19:370" label="contain" source="#13:54" target="#14:67"><data key="label">contain</data></edge>
    <edge id="#19:371" label="contain" source="#13:54" target="#14:68"><data key="label">contain</data></edge>
    <edge id="#19:372" label="contain" source="#13:54" target="#14:69"><data key="label">contain</data></edge>
    <edge id="#19:373" label="contain" source="#34:11" target="#13:115"><data key="label">contain</data></edge>
    <edge id="#19:374" label="contain" source="#13:115" target="#13:65"><data key="label">contain</data></edge>
    <edge id="#19:375" label="contain" source="#13:115" target="#13:112"><data key="label">contain</data></edge>
    <edge id="#19:381" label="contain" source="#13:116" target="#14:70"><data key="label">contain</data></edge>
    <edge id="#19:385" label="contain" source="#28:11" target="#34:22"><data key="label">contain</data></edge>
    <edge id="#19:389" label="contain" source="#34:22" target="#13:119"><data key="label">contain</data></edge>
    <edge id="#19:390" label="contain" source="#13:119" target="#13:120"><data key="label">contain</data></edge>
    <edge id="#19:391" label="contain" source="#13:120" target="#13:122"><data key="label">contain</data></edge>
    <edge id="#19:392" label="contain" source="#13:120" target="#13:123"><data key="label">contain</data></edge>
    <edge id="#19:393" label="contain" source="#13:123" target="#13:124"><data key="label">contain</data></edge>
    <edge id="#19:394" label="contain" source="#13:120" target="#13:125"><data key="label">contain</data></edge>
    <edge id="#19:395" label="contain" source="#13:125" target="#13:127"><data key="label">contain</data></edge>
    <edge id="#19:396" label="contain" source="#13:125" target="#13:126"><data key="label">contain</data></edge>
    <edge id="#19:397" label="contain" source="#13:120" target="#13:125"><data key="label">contain</data></edge>
    <edge id="#19:398" label="contain" source="#13:120" target="#13:122"><data key="label">contain</data></edge>
    <edge id="#19:399" label="contain" source="#13:120" target="#13:128"><data key="label">contain</data></edge>
    <edge id="#19:400" label="contain" source="#13:128" target="#13:129"><data key="label">contain</data></edge>
    <edge id="#19:401" label="contain" source="#13:128" target="#13:130"><data key="label">contain</data></edge>
    <edge id="#19:402" label="contain" source="#13:128" target="#13:131"><data key="label">contain</data></edge>
    <edge id="#19:403" label="contain" source="#13:119" target="#13:133"><data key="label">contain</data></edge>
    <edge id="#19:404" label="contain" source="#13:133" target="#13:134"><data key="label">contain</data></edge>
    <edge id="#19:405" label="contain" source="#13:133" target="#13:135"><data key="label">contain</data></edge>
    <edge id="#19:406" label="contain" source="#13:133" target="#13:136"><data key="label">contain</data></edge>
    <edge id="#19:407" label="contain" source="#13:119" target="#13:137"><data key="label">contain</data></edge>
    <edge id="#19:408" label="contain" source="#13:137" target="#13:139"><data key="label">contain</data></edge>
    <edge id="#19:409" label="contain" source="#13:137" target="#13:140"><data key="label">contain</data></edge>
    <edge id="#19:410" label="contain" source="#13:137" target="#13:138"><data key="label">contain</data></edge>
    <edge id="#19:411" label="contain" source="#34:22" target="#13:141"><data key="label">contain</data></edge>
    <edge id="#19:412" label="contain" source="#13:141" target="#13:142"><data key="label">contain</data></edge>
    <edge id="#19:413" label="contain" source="#13:142" target="#13:143"><data key="label">contain</data></edge>
    <edge id="#19:414" label="contain" source="#13:142" target="#13:144"><data key="label">contain</data></edge>
    <edge id="#19:415" label="contain" source="#13:144" target="#13:145"><data key="label">contain</data></edge>
    <edge id="#19:417" label="contain" source="#13:142" target="#13:146"><data key="label">contain</data></edge>
    <edge id="#19:418" label="contain" source="#13:142" target="#13:147"><data key="label">contain</data></edge>
    <edge id="#19:419" label="contain" source="#13:141" target="#13:148"><data key="label">contain</data></edge>
    <edge id="#19:420" label="contain" source="#13:141" target="#13:149"><data key="label">contain</data></edge>
    <edge id="#19:421" label="contain" source="#13:141" target="#13:150"><data key="label">contain</data></edge>
    <edge id="#19:422" label="contain" source="#13:141" target="#13:151"><data key="label">contain</data></edge>
    <edge id="#19:423" label="contain" source="#13:147" target="#13:152"><data key="label">contain</data></edge>
    <edge id="#19:424" label="contain" source="#13:152" target="#13:153"><data key="label">contain</data></edge>
    <edge id="#19:425" label="contain" source="#13:152" target="#13:154"><data key="label">contain</data></edge>
    <edge id="#19:426" label="contain" source="#13:152" target="#13:155"><data key="label">contain</data></edge>
    <edge id="#19:427" label="contain" source="#13:152" target="#13:156"><data key="label">contain</data></edge>
    <edge id="#19:428" label="contain" source="#13:152" target="#13:157"><data key="label">contain</data></edge>
    <edge id="#19:429" label="contain" source="#13:147" target="#13:158"><data key="label">contain</data></edge>
    <edge id="#19:430" label="contain" source="#34:11" target="#13:116"><data key="label">contain</data></edge>
    <edge id="#19:431" label="contain" source="#34:22" target="#13:159"><data key="label">contain</data></edge>
    <edge id="#19:432" label="contain" source="#13:159" target="#13:160"><data key="label">contain</data></edge>
    <edge id="#19:437" label="contain" source="#34:22" target="#13:164"><data key="label">contain</data></edge>
    <edge id="#19:438" label="contain" source="#13:164" target="#13:165"><data key="label">contain</data></edge>
    <edge id="#19:439" label="contain" source="#13:166" target="#25:224"><data key="label">contain</data></edge>
    <edge id="#19:440" label="contain" source="#13:164" target="#13:166"><data key="label">contain</data></edge>
    <edge id="#19:441" label="contain" source="#13:164" target="#13:165"><data key="label">contain</data></edge>
    <edge id="#19:442" label="contain" source="#34:22" target="#13:167"><data key="label">contain</data></edge>
    <edge id="#19:443" label="contain" source="#13:167" target="#13:168"><data key="label">contain</data></edge>
    <edge id="#19:444" label="contain" source="#13:167" target="#13:169"><data key="label">contain</data></edge>
    <edge id="#19:445" label="contain" source="#13:167" target="#13:170"><data key="label">contain</data></edge>
    <edge id="#19:446" label="contain" source="#13:167" target="#13:171"><data key="label">contain</data></edge>
    <edge id="#19:447" label="contain" source="#13:167" target="#13:172"><data key="label">contain</data></edge>
    <edge id="#19:448" label="contain" source="#13:167" target="#13:173"><data key="label">contain</data></edge>
    <edge id="#19:449" label="contain" source="#13:167" target="#13:174"><data key="label">contain</data></edge>
    <edge id="#19:450" label="contain" source="#13:174" target="#13:175"><data key="label">contain</data></edge>
    <edge id="#19:451" label="contain" source="#13:175" target="#13:176"><data key="label">contain</data></edge>
    <edge id="#19:452" label="contain" source="#13:167" target="#13:177"><data key="label">contain</data></edge>
    <edge id="#19:453" label="contain" source="#13:177" target="#13:178"><data key="label">contain</data></edge>
    <edge id="#19:454" label="contain" source="#13:164" target="#13:165"><data key="label">contain</data></edge>
    <edge id="#19:455" label="contain" source="#28:11" target="#34:24"><data key="label">contain</data></edge>
    <edge id="#19:456" label="contain" source="#34:24" target="#13:179"><data key="label">contain</data></edge>
    <edge id="#19:458" label="contain" source="#13:179" target="#13:180"><data key="label">contain</data></edge>
    <edge id="#19:459" label="contain" source="#13:180" target="#13:181"><data key="label">contain</data></edge>
    <edge id="#19:460" label="contain" source="#13:179" target="#13:182"><data key="label">contain</data></edge>
    <edge id="#19:461" label="contain" source="#13:182" target="#13:183"><data key="label">contain</data></edge>
    <edge id="#19:462" label="contain" source="#28:11" target="#34:25"><data key="label">contain</data></edge>
    <edge id="#19:463" label="contain" source="#34:25" target="#13:184"><data key="label">contain</data></edge>
    <edge id="#19:464" label="contain" source="#13:184" target="#13:185"><data key="label">contain</data></edge>
    <edge id="#19:465" label="contain" source="#13:185" target="#13:186"><data key="label">contain</data></edge>
    <edge id="#19:466" label="contain" source="#13:185" target="#13:187"><data key="label">contain</data></edge>
    <edge id="#19:467" label="contain" source="#13:185" target="#13:188"><data key="label">contain</data></edge>
    <edge id="#19:468" label="contain" source="#13:184" target="#13:189"><data key="label">contain</data></edge>
    <edge id="#19:469" label="contain" source="#13:185" target="#13:190"><data key="label">contain</data></edge>
    <edge id="#19:470" label="contain" source="#13:189" target="#13:191"><data key="label">contain</data></edge>
    <edge id="#19:471" label="contain" source="#13:191" target="#13:192"><data key="label">contain</data></edge>
    <edge id="#19:472" label="contain" source="#13:191" target="#13:193"><data key="label">contain</data></edge>
    <edge id="#19:473" label="contain" source="#13:191" target="#13:194"><data key="label">contain</data></edge>
    <edge id="#19:474" label="contain" source="#13:189" target="#13:195"><data key="label">contain</data></edge>
    <edge id="#19:475" label="contain" source="#13:189" target="#13:196"><data key="label">contain</data></edge>
    <edge id="#19:476" label="contain" source="#13:189" target="#13:197"><data key="label">contain</data></edge>
    <edge id="#19:477" label="contain" source="#13:189" target="#13:198"><data key="label">contain</data></edge>
    <edge id="#19:478" label="contain" source="#34:24" target="#13:199"><data key="label">contain</data></edge>
    <edge id="#19:479" label="contain" source="#34:24" target="#13:200"><data key="label">contain</data></edge>
    <edge id="#19:480" label="contain" source="#34:24" target="#13:201"><data key="label">contain</data></edge>
    <edge id="#19:481" label="contain" source="#34:24" target="#13:202"><data key="label">contain</data></edge>
    <edge id="#19:482" label="contain" source="#34:25" target="#13:203"><data key="label">contain</data></edge>
    <edge id="#19:483" label="contain" source="#13:203" target="#13:204"><data key="label">contain</data></edge>
    <edge id="#19:487" label="contain" source="#13:206" target="#13:207"><data key="label">contain</data></edge>
    <edge id="#19:488" label="contain" source="#13:203" target="#13:208"><data key="label">contain</data></edge>
    <edge id="#19:489" label="contain" source="#13:203" target="#13:209"><data key="label">contain</data></edge>
    <edge id="#19:490" label="contain" source="#13:203" target="#13:210"><data key="label">contain</data></edge>
    <edge id="#19:491" label="contain" source="#13:203" target="#13:211"><data key="label">contain</data></edge>
    <edge id="#19:492" label="contain" source="#13:204" target="#13:206"><data key="label">contain</data></edge>
    <edge id="#19:493" label="contain" source="#13:204" target="#13:205"><data key="label">contain</data></edge>
    <edge id="#19:494" label="contain" source="#13:204" target="#13:205"><data key="label">contain</data></edge>
    <edge id="#19:495" label="contain" source="#13:203" target="#13:212"><data key="label">contain</data></edge>
    <edge id="#19:496" label="contain" source="#13:203" target="#13:213"><data key="label">contain</data></edge>
    <edge id="#19:497" label="contain" source="#28:11" target="#34:26"><data key="label">contain</data></edge>
    <edge id="#19:498" label="contain" source="#34:26" target="#13:214"><data key="label">contain</data></edge>
    <edge id="#19:500" label="contain" source="#13:214" target="#13:216"><data key="label">contain</data></edge>
    <edge id="#19:501" label="contain" source="#13:214" target="#13:217"><data key="label">contain</data></edge>
    <edge id="#19:502" label="contain" source="#13:214" target="#13:218"><data key="label">contain</data></edge>
    <edge id="#19:503" label="contain" source="#13:214" target="#13:219"><data key="label">contain</data></edge>
    <edge id="#19:504" label="contain" source="#13:214" target="#13:220"><data key="label">contain</data></edge>
    <edge id="#19:505" label="contain" source="#13:214" target="#13:221"><data key="label">contain</data></edge>
    <edge id="#19:506" label="contain" source="#13:214" target="#13:222"><data key="label">contain</data></edge>
    <edge id="#19:507" label="contain" source="#13:214" target="#13:223"><data key="label">contain</data></edge>
    <edge id="#19:508" label="contain" source="#13:214" target="#13:224"><data key="label">contain</data></edge>
    <edge id="#19:509" label="contain" source="#13:224" target="#13:225"><data key="label">contain</data></edge>
    <edge id="#19:510" label="contain" source="#13:224" target="#13:226"><data key="label">contain</data></edge>
    <edge id="#19:511" label="contain" source="#13:224" target="#13:227"><data key="label">contain</data></edge>
    <edge id="#19:512" label="contain" source="#34:26" target="#13:228"><data key="label">contain</data></edge>
    <edge id="#19:514" label="contain" source="#13:229" target="#13:230"><data key="label">contain</data></edge>
    <edge id="#19:515" label="contain" source="#13:229" target="#13:231"><data key="label">contain</data></edge>
    <edge id="#19:516" label="contain" source="#13:229" target="#13:232"><data key="label">contain</data></edge>
    <edge id="#19:517" label="contain" source="#13:229" target="#13:233"><data key="label">contain</data></edge>
    <edge id="#19:518" label="contain" source="#13:229" target="#13:234"><data key="label">contain</data></edge>
    <edge id="#19:519" label="contain" source="#13:228" target="#13:229"><data key="label">contain</data></edge>
    <edge id="#19:520" label="contain" source="#13:228" target="#13:235"><data key="label">contain</data></edge>
    <edge id="#19:522" label="contain" source="#13:228" target="#13:236"><data key="label">contain</data></edge>
    <edge id="#19:523" label="contain" source="#13:228" target="#13:237"><data key="label">contain</data></edge>
    <edge id="#19:524" label="contain" source="#13:237" target="#13:238"><data key="label">contain</data></edge>
    <edge id="#19:525" label="contain" source="#13:237" target="#13:239"><data key="label">contain</data></edge>
    <edge id="#19:526" label="contain" source="#34:26" target="#13:240"><data key="label">contain</data></edge>
    <edge id="#19:527" label="contain" source="#34:26" target="#13:242"><data key="label">contain</data></edge>
    <edge id="#19:528" label="contain" source="#13:242" target="#13:241"><data key="label">contain</data></edge>
    <edge id="#19:529" label="contain" source="#13:241" target="#13:243"><data key="label">contain</data></edge>
    <edge id="#19:530" label="contain" source="#13:241" target="#13:244"><data key="label">contain</data></edge>
    <edge id="#19:531" label="contain" source="#13:241" target="#13:245"><data key="label">contain</data></edge>
    <edge id="#19:532" label="contain" source="#13:245" target="#13:246"><data key="label">contain</data></edge>
    <edge id="#19:533" label="contain" source="#13:245" target="#13:247"><data key="label">contain</data></edge>
    <edge id="#19:534" label="contain" source="#13:242" target="#13:248"><data key="label">contain</data></edge>
    <edge id="#19:535" label="contain" source="#34:26" target="#13:249"><data key="label">contain</data></edge>
    <edge id="#19:536" label="contain" source="#13:249" target="#13:250"><data key="label">contain</data></edge>
    <edge id="#19:537" label="contain" source="#13:250" target="#13:251"><data key="label">contain</data></edge>
    <edge id="#19:538" label="contain" source="#13:250" target="#13:252"><data key="label">contain</data></edge>
    <edge id="#19:539" label="contain" source="#13:250" target="#13:253"><data key="label">contain</data></edge>
    <edge id="#19:540" label="contain" source="#13:249" target="#13:254"><data key="label">contain</data></edge>
    <edge id="#19:541" label="contain" source="#28:11" target="#34:27"><data key="label">contain</data></edge>
    <edge id="#19:542" label="contain" source="#34:27" target="#13:255"><data key="label">contain</data></edge>
    <edge id="#19:543" label="contain" source="#34:27" target="#13:256"><data key="label">contain</data></edge>
    <edge id="#19:544" label="contain" source="#34:27" target="#13:257"><data key="label">contain</data></edge>
    <edge id="#19:545" label="contain" source="#34:27" target="#13:258"><data key="label">contain</data></edge>
    <edge id="#19:546" label="contain" source="#34:27" target="#13:259"><data key="label">contain</data></edge>
    <edge id="#19:547" label="contain" source="#34:27" target="#13:260"><data key="label">contain</data></edge>
    <edge id="#19:548" label="contain" source="#34:27" target="#13:261"><data key="label">contain</data></edge>
    <edge id="#19:549" label="contain" source="#13:261" target="#13:262"><data key="label">contain</data></edge>
    <edge id="#19:550" label="contain" source="#13:261" target="#13:263"><data key="label">contain</data></edge>
    <edge id="#19:551" label="contain" source="#13:261" target="#13:264"><data key="label">contain</data></edge>
    <edge id="#19:552" label="contain" source="#13:264" target="#25:324"><data key="label">contain</data></edge>
    <edge id="#19:553" label="contain" source="#13:261" target="#13:265"><data key="label">contain</data></edge>
    <edge id="#21:8" label="produce" source="#14:31" target="#16:57"><data key="label">produce</data></edge>
    <edge id="#22:2" label="require" source="#13:21" target="#16:19"><data key="label">require</data></edge>
    <edge id="#24:0" label="explain" source="#13:10" target="#25:0"><data key="label">explain</data></edge>
    <edge id="#24:2" label="explain" source="#13:11" target="#25:1"><data key="label">explain</data></edge>
    <edge id="#24:3" label="explain" source="#16:1" target="#17:1"><data key="label">explain</data></edge>
    <edge id="#24:6" label="explain" source="#14:3" target="#25:2"><data key="label">explain</data></edge>
    <edge id="#24:8" label="explain" source="#14:4" target="#25:3"><data key="label">explain</data></edge>
    <edge id="#24:12" label="explain" source="#13:12" target="#25:4"><data key="label">explain</data></edge>
    <edge id="#24:23" label="explain" source="#25:6" target="#17:8"><data key="label">explain</data></edge>
    <edge id="#24:24" label="explain" source="#25:6" target="#17:9"><data key="label">explain</data></edge>
    <edge id="#24:25" label="explain" source="#13:14" target="#25:7"><data key="label">explain</data></edge>
    <edge id="#24:31" label="explain" source="#14:7" target="#25:9"><data key="label">explain</data></edge>
    <edge id="#24:32" label="explain" source="#14:8" target="#25:10"><data key="label">explain</data></edge>
    <edge id="#24:33" label="explain" source="#13:16" target="#25:11"><data key="label">explain</data></edge>
    <edge id="#24:39" label="explain" source="#14:11" target="#25:14"><data key="label">explain</data></edge>
    <edge id="#24:41" label="explain" source="#14:12" target="#25:15"><data key="label">explain</data></edge>
    <edge id="#24:50" label="explain" source="#13:19" target="#25:17"><data key="label">explain</data></edge>
    <edge id="#24:54" label="explain" source="#13:21" target="#25:19"><data key="label">explain</data></edge>
    <edge id="#24:55" label="explain" source="#13:22" target="#25:20"><data key="label">explain</data></edge>
    <edge id="#24:56" label="explain" source="#14:15" target="#25:21"><data key="label">explain</data></edge>
    <edge id="#24:57" label="explain" source="#13:23" target="#25:22"><data key="label">explain</data></edge>
    <edge id="#24:59" label="explain" source="#14:16" target="#25:23"><data key="label">explain</data></edge>
    <edge id="#24:62" label="explain" source="#14:17" target="#25:24"><data key="label">explain</data></edge>
    <edge id="#24:67" label="explain" source="#14:19" target="#25:26"><data key="label">explain</data></edge>
    <edge id="#24:69" label="explain" source="#14:18" target="#25:25"><data key="label">explain</data></edge>
    <edge id="#24:70" label="explain" source="#14:20" target="#25:27"><data key="label">explain</data></edge>
    <edge id="#24:74" label="explain" source="#14:22" target="#25:29"><data key="label">explain</data></edge>
    <edge id="#24:75" label="explain" source="#13:27" target="#25:30"><data key="label">explain</data></edge>
    <edge id="#24:77" label="explain" source="#14:23" target="#25:31"><data key="label">explain</data></edge>
    <edge id="#24:78" label="explain" source="#14:24" target="#25:32"><data key="label">explain</data></edge>
    <edge id="#24:79" label="explain" source="#13:29" target="#25:33"><data key="label">explain</data></edge>
    <edge id="#24:80" label="explain" source="#13:31" target="#25:34"><data key="label">explain</data></edge>
    <edge id="#24:81" label="explain" source="#13:32" target="#25:35"><data key="label">explain</data></edge>
    <edge id="#24:85" label="explain" source="#13:33" target="#25:36"><data key="label">explain</data></edge>
    <edge id="#24:89" label="explain" source="#13:34" target="#25:37"><data key="label">explain</data></edge>
    <edge id="#24:92" label="explain" source="#13:35" target="#25:38"><data key="label">explain</data></edge>
    <edge id="#24:93" label="explain" source="#13:36" target="#25:39"><data key="label">explain</data></edge>
    <edge id="#24:97" label="explain" source="#14:25" target="#25:40"><data key="label">explain</data></edge>
    <edge id="#24:98" label="explain" source="#14:26" target="#25:41"><data key="label">explain</data></edge>
    <edge id="#24:99" label="explain" source="#13:37" target="#25:42"><data key="label">explain</data></edge>
    <edge id="#24:101" label="explain" source="#13:38" target="#25:43"><data key="label">explain</data></edge>
    <edge id="#24:103" label="explain" source="#13:39" target="#25:44"><data key="label">explain</data></edge>
    <edge id="#24:104" label="explain" source="#14:27" target="#25:45"><data key="label">explain</data></edge>
    <edge id="#24:107" label="explain" source="#14:28" target="#25:46"><data key="label">explain</data></edge>
    <edge id="#24:108" label="explain" source="#13:42" target="#25:47"><data key="label">explain</data></edge>
    <edge id="#24:110" label="explain" source="#14:29" target="#25:48"><data key="label">explain</data></edge>
    <edge id="#24:114" label="explain" source="#14:30" target="#25:49"><data key="label">explain</data></edge>
    <edge id="#24:117" label="explain" source="#14:31" target="#25:50"><data key="label">explain</data></edge>
    <edge id="#24:120" label="explain" source="#14:32" target="#25:51"><data key="label">explain</data></edge>
    <edge id="#24:123" label="explain" source="#14:33" target="#25:52"><data key="label">explain</data></edge>
    <edge id="#24:125" label="explain" source="#13:43" target="#25:53"><data key="label">explain</data></edge>
    <edge id="#24:126" label="explain" source="#13:44" target="#25:54"><data key="label">explain</data></edge>
    <edge id="#24:130" label="explain" source="#14:34" target="#25:55"><data key="label">explain</data></edge>
    <edge id="#24:131" label="explain" source="#14:35" target="#25:56"><data key="label">explain</data></edge>
    <edge id="#24:132" label="explain" source="#14:36" target="#25:57"><data key="label">explain</data></edge>
    <edge id="#24:134" label="explain" source="#13:45" target="#25:58"><data key="label">explain</data></edge>
    <edge id="#24:135" label="explain" source="#14:38" target="#25:59"><data key="label">explain</data></edge>
    <edge id="#24:136" label="explain" source="#13:46" target="#25:60"><data key="label">explain</data></edge>
    <edge id="#24:137" label="explain" source="#13:47" target="#25:61"><data key="label">explain</data></edge>
    <edge id="#24:140" label="explain" source="#14:39" target="#25:62"><data key="label">explain</data></edge>
    <edge id="#24:144" label="explain" source="#13:48" target="#25:63"><data key="label">explain</data></edge>
    <edge id="#24:145" label="explain" source="#14:40" target="#25:64"><data key="label">explain</data></edge>
    <edge id="#24:148" label="explain" source="#14:41" target="#25:66"><data key="label">explain</data></edge>
    <edge id="#24:149" label="explain" source="#14:42" target="#25:67"><data key="label">explain</data></edge>
    <edge id="#24:152" label="explain" source="#13:50" target="#25:68"><data key="label">explain</data></edge>
    <edge id="#24:155" label="explain" source="#14:43" target="#25:69"><data key="label">explain</data></edge>
    <edge id="#24:158" label="explain" source="#13:56" target="#25:12"><data key="label">explain</data></edge>
    <edge id="#24:159" label="explain" source="#13:57" target="#25:13"><data key="label">explain</data></edge>
    <edge id="#24:160" label="explain" source="#13:58" target="#25:70"><data key="label">explain</data></edge>
    <edge id="#24:161" label="explain" source="#14:44" target="#25:71"><data key="label">explain</data></edge>
    <edge id="#24:163" label="explain" source="#14:45" target="#25:72"><data key="label">explain</data></edge>
    <edge id="#24:164" label="explain" source="#14:46" target="#25:73"><data key="label">explain</data></edge>
    <edge id="#24:165" label="explain" source="#14:47" target="#25:74"><data key="label">explain</data></edge>
    <edge id="#24:166" label="explain" source="#14:48" target="#25:75"><data key="label">explain</data></edge>
    <edge id="#24:168" label="explain" source="#13:28" target="#25:76"><data key="label">explain</data></edge>
    <edge id="#24:170" label="explain" source="#13:26" target="#25:79"><data key="label">explain</data></edge>
    <edge id="#24:173" label="explain" source="#13:25" target="#25:82"><data key="label">explain</data></edge>
    <edge id="#24:174" label="explain" source="#13:15" target="#25:5"><data key="label">explain</data></edge>
    <edge id="#24:175" label="explain" source="#13:59" target="#25:6"><data key="label">explain</data></edge>
    <edge id="#24:176" label="explain" source="#13:60" target="#25:18"><data key="label">explain</data></edge>
    <edge id="#24:177" label="explain" source="#13:61" target="#25:83"><data key="label">explain</data></edge>
    <edge id="#24:178" label="explain" source="#13:62" target="#25:84"><data key="label">explain</data></edge>
    <edge id="#24:179" label="explain" source="#13:63" target="#25:85"><data key="label">explain</data></edge>
    <edge id="#24:180" label="explain" source="#13:64" target="#25:86"><data key="label">explain</data></edge>
    <edge id="#24:181" label="explain" source="#14:49" target="#25:87"><data key="label">explain</data></edge>
    <edge id="#24:182" label="explain" source="#13:65" target="#25:88"><data key="label">explain</data></edge>
    <edge id="#24:183" label="explain" source="#13:66" target="#25:89"><data key="label">explain</data></edge>
    <edge id="#24:184" label="explain" source="#14:50" target="#25:90"><data key="label">explain</data></edge>
    <edge id="#24:185" label="explain" source="#13:68" target="#25:91"><data key="label">explain</data></edge>
    <edge id="#24:186" label="explain" source="#13:69" target="#25:92"><data key="label">explain</data></edge>
    <edge id="#24:188" label="explain" source="#13:70" target="#25:94"><data key="label">explain</data></edge>
    <edge id="#24:189" label="explain" source="#14:52" target="#25:95"><data key="label">explain</data></edge>
    <edge id="#24:190" label="explain" source="#14:53" target="#25:96"><data key="label">explain</data></edge>
    <edge id="#24:191" label="explain" source="#14:54" target="#25:97"><data key="label">explain</data></edge>
    <edge id="#24:192" label="explain" source="#14:55" target="#25:98"><data key="label">explain</data></edge>
    <edge id="#24:193" label="explain" source="#13:71" target="#25:99"><data key="label">explain</data></edge>
    <edge id="#24:194" label="explain" source="#14:56" target="#25:100"><data key="label">explain</data></edge>
    <edge id="#24:195" label="explain" source="#13:72" target="#25:101"><data key="label">explain</data></edge>
    <edge id="#24:196" label="explain" source="#13:73" target="#25:102"><data key="label">explain</data></edge>
    <edge id="#24:197" label="explain" source="#13:74" target="#25:103"><data key="label">explain</data></edge>
    <edge id="#24:198" label="explain" source="#14:58" target="#25:104"><data key="label">explain</data></edge>
    <edge id="#24:199" label="explain" source="#14:59" target="#25:105"><data key="label">explain</data></edge>
    <edge id="#24:200" label="explain" source="#14:57" target="#25:106"><data key="label">explain</data></edge>
    <edge id="#24:203" label="explain" source="#14:61" target="#25:107"><data key="label">explain</data></edge>
    <edge id="#24:204" label="explain" source="#14:62" target="#25:108"><data key="label">explain</data></edge>
    <edge id="#24:205" label="explain" source="#14:65" target="#25:109"><data key="label">explain</data></edge>
    <edge id="#24:206" label="explain" source="#14:64" target="#25:110"><data key="label">explain</data></edge>
    <edge id="#24:207" label="explain" source="#13:75" target="#25:111"><data key="label">explain</data></edge>
    <edge id="#24:208" label="explain" source="#13:76" target="#25:112"><data key="label">explain</data></edge>
    <edge id="#24:209" label="explain" source="#13:77" target="#25:113"><data key="label">explain</data></edge>
    <edge id="#24:210" label="explain" source="#13:78" target="#25:114"><data key="label">explain</data></edge>
    <edge id="#24:211" label="explain" source="#13:80" target="#25:115"><data key="label">explain</data></edge>
    <edge id="#24:212" label="explain" source="#13:81" target="#25:116"><data key="label">explain</data></edge>
    <edge id="#24:213" label="explain" source="#13:82" target="#25:117"><data key="label">explain</data></edge>
    <edge id="#24:214" label="explain" source="#13:83" target="#25:118"><data key="label">explain</data></edge>
    <edge id="#24:215" label="explain" source="#13:84" target="#25:119"><data key="label">explain</data></edge>
    <edge id="#24:216" label="explain" source="#13:85" target="#25:120"><data key="label">explain</data></edge>
    <edge id="#24:217" label="explain" source="#13:86" target="#25:121"><data key="label">explain</data></edge>
    <edge id="#24:218" label="explain" source="#13:87" target="#25:122"><data key="label">explain</data></edge>
    <edge id="#24:219" label="explain" source="#13:88" target="#25:123"><data key="label">explain</data></edge>
    <edge id="#24:220" label="explain" source="#13:89" target="#25:124"><data key="label">explain</data></edge>
    <edge id="#24:221" label="explain" source="#13:90" target="#25:125"><data key="label">explain</data></edge>
    <edge id="#24:222" label="explain" source="#13:91" target="#25:126"><data key="label">explain</data></edge>
    <edge id="#24:223" label="explain" source="#13:92" target="#25:127"><data key="label">explain</data></edge>
    <edge id="#24:224" label="explain" source="#13:93" target="#25:128"><data key="label">explain</data></edge>
    <edge id="#24:225" label="explain" source="#13:94" target="#25:129"><data key="label">explain</data></edge>
    <edge id="#24:226" label="explain" source="#13:95" target="#25:130"><data key="label">explain</data></edge>
    <edge id="#24:227" label="explain" source="#13:96" target="#25:131"><data key="label">explain</data></edge>
    <edge id="#24:228" label="explain" source="#13:97" target="#25:132"><data key="label">explain</data></edge>
    <edge id="#24:229" label="explain" source="#13:98" target="#25:133"><data key="label">explain</data></edge>
    <edge id="#24:230" label="explain" source="#13:99" target="#25:134"><data key="label">explain</data></edge>
    <edge id="#24:235" label="explain" source="#13:100" target="#25:136"><data key="label">explain</data></edge>
    <edge id="#24:236" label="explain" source="#13:101" target="#25:137"><data key="label">explain</data></edge>
    <edge id="#24:237" label="explain" source="#13:102" target="#25:138"><data key="label">explain</data></edge>
    <edge id="#24:238" label="explain" source="#13:103" target="#25:139"><data key="label">explain</data></edge>
    <edge id="#24:239" label="explain" source="#13:104" target="#25:140"><data key="label">explain</data></edge>
    <edge id="#24:240" label="explain" source="#13:105" target="#25:141"><data key="label">explain</data></edge>
    <edge id="#24:241" label="explain" source="#13:106" target="#25:142"><data key="label">explain</data></edge>
    <edge id="#24:242" label="explain" source="#13:107" target="#25:143"><data key="label">explain</data></edge>
    <edge id="#24:243" label="explain" source="#13:108" target="#25:144"><data key="label">explain</data></edge>
    <edge id="#24:244" label="explain" source="#13:111" target="#25:145"><data key="label">explain</data></edge>
    <edge id="#24:245" label="explain" source="#14:60" target="#25:146"><data key="label">explain</data></edge>
    <edge id="#24:246" label="explain" source="#13:112" target="#25:147"><data key="label">explain</data></edge>
    <edge id="#24:247" label="explain" source="#13:41" target="#25:148"><data key="label">explain</data></edge>
    <edge id="#24:248" label="explain" source="#13:110" target="#25:149"><data key="label">explain</data></edge>
    <edge id="#24:249" label="explain" source="#13:55" target="#25:150"><data key="label">explain</data></edge>
    <edge id="#24:250" label="explain" source="#13:54" target="#25:151"><data key="label">explain</data></edge>
    <edge id="#24:251" label="explain" source="#13:113" target="#25:152"><data key="label">explain</data></edge>
    <edge id="#24:252" label="explain" source="#13:114" target="#25:16"><data key="label">explain</data></edge>
    <edge id="#24:253" label="explain" source="#14:66" target="#25:153"><data key="label">explain</data></edge>
    <edge id="#24:254" label="explain" source="#14:67" target="#25:154"><data key="label">explain</data></edge>
    <edge id="#24:255" label="explain" source="#14:68" target="#25:155"><data key="label">explain</data></edge>
    <edge id="#24:256" label="explain" source="#14:69" target="#25:156"><data key="label">explain</data></edge>
    <edge id="#24:257" label="explain" source="#13:115" target="#25:157"><data key="label">explain</data></edge>
    <edge id="#24:259" label="explain" source="#34:2" target="#25:159"><data key="label">explain</data></edge>
    <edge id="#24:260" label="explain" source="#34:11" target="#25:160"><data key="label">explain</data></edge>
    <edge id="#24:261" label="explain" source="#34:3" target="#25:161"><data key="label">explain</data></edge>
    <edge id="#24:262" label="explain" source="#34:4" target="#25:162"><data key="label">explain</data></edge>
    <edge id="#24:263" label="explain" source="#34:8" target="#25:163"><data key="label">explain</data></edge>
    <edge id="#24:264" label="explain" source="#34:9" target="#25:164"><data key="label">explain</data></edge>
    <edge id="#24:265" label="explain" source="#14:70" target="#25:165"><data key="label">explain</data></edge>
    <edge id="#24:266" label="explain" source="#13:116" target="#25:166"><data key="label">explain</data></edge>
    <edge id="#24:268" label="explain" source="#34:6" target="#25:168"><data key="label">explain</data></edge>
    <edge id="#24:269" label="explain" source="#34:16" target="#25:167"><data key="label">explain</data></edge>
    <edge id="#24:270" label="explain" source="#34:5" target="#25:169"><data key="label">explain</data></edge>
    <edge id="#24:271" label="explain" source="#34:15" target="#25:170"><data key="label">explain</data></edge>
    <edge id="#24:277" label="explain" source="#13:119" target="#25:173"><data key="label">explain</data></edge>
    <edge id="#24:278" label="explain" source="#13:120" target="#25:174"><data key="label">explain</data></edge>
    <edge id="#24:280" label="explain" source="#13:122" target="#25:176"><data key="label">explain</data></edge>
    <edge id="#24:281" label="explain" source="#13:123" target="#25:177"><data key="label">explain</data></edge>
    <edge id="#24:283" label="explain" source="#13:125" target="#25:180"><data key="label">explain</data></edge>
    <edge id="#24:284" label="explain" source="#13:126" target="#25:181"><data key="label">explain</data></edge>
    <edge id="#24:285" label="explain" source="#13:127" target="#25:182"><data key="label">explain</data></edge>
    <edge id="#24:288" label="explain" source="#13:124" target="#25:184"><data key="label">explain</data></edge>
    <edge id="#24:289" label="explain" source="#13:128" target="#25:185"><data key="label">explain</data></edge>
    <edge id="#24:290" label="explain" source="#13:129" target="#25:186"><data key="label">explain</data></edge>
    <edge id="#24:291" label="explain" source="#13:130" target="#25:187"><data key="label">explain</data></edge>
    <edge id="#24:292" label="explain" source="#13:131" target="#25:188"><data key="label">explain</data></edge>
    <edge id="#24:293" label="explain" source="#13:133" target="#25:189"><data key="label">explain</data></edge>
    <edge id="#24:294" label="explain" source="#13:134" target="#25:190"><data key="label">explain</data></edge>
    <edge id="#24:295" label="explain" source="#13:135" target="#25:191"><data key="label">explain</data></edge>
    <edge id="#24:296" label="explain" source="#13:136" target="#25:192"><data key="label">explain</data></edge>
    <edge id="#24:297" label="explain" source="#13:137" target="#25:194"><data key="label">explain</data></edge>
    <edge id="#24:298" label="explain" source="#13:139" target="#25:196"><data key="label">explain</data></edge>
    <edge id="#24:299" label="explain" source="#13:138" target="#25:195"><data key="label">explain</data></edge>
    <edge id="#24:300" label="explain" source="#13:140" target="#25:197"><data key="label">explain</data></edge>
    <edge id="#24:301" label="explain" source="#13:141" target="#25:198"><data key="label">explain</data></edge>
    <edge id="#24:302" label="explain" source="#13:142" target="#25:199"><data key="label">explain</data></edge>
    <edge id="#24:303" label="explain" source="#13:143" target="#25:200"><data key="label">explain</data></edge>
    <edge id="#24:304" label="explain" source="#13:144" target="#25:201"><data key="label">explain</data></edge>
    <edge id="#24:305" label="explain" source="#13:145" target="#25:202"><data key="label">explain</data></edge>
    <edge id="#24:306" label="explain" source="#13:146" target="#25:203"><data key="label">explain</data></edge>
    <edge id="#24:307" label="explain" source="#13:147" target="#25:204"><data key="label">explain</data></edge>
    <edge id="#24:308" label="explain" source="#13:148" target="#25:205"><data key="label">explain</data></edge>
    <edge id="#24:309" label="explain" source="#13:149" target="#25:206"><data key="label">explain</data></edge>
    <edge id="#24:310" label="explain" source="#13:150" target="#25:207"><data key="label">explain</data></edge>
    <edge id="#24:311" label="explain" source="#13:151" target="#25:208"><data key="label">explain</data></edge>
    <edge id="#24:312" label="explain" source="#34:22" target="#25:209"><data key="label">explain</data></edge>
    <edge id="#24:313" label="explain" source="#13:153" target="#25:210"><data key="label">explain</data></edge>
    <edge id="#24:314" label="explain" source="#13:154" target="#25:211"><data key="label">explain</data></edge>
    <edge id="#24:315" label="explain" source="#13:155" target="#25:212"><data key="label">explain</data></edge>
    <edge id="#24:316" label="explain" source="#13:156" target="#25:213"><data key="label">explain</data></edge>
    <edge id="#24:317" label="explain" source="#13:157" target="#25:214"><data key="label">explain</data></edge>
    <edge id="#24:318" label="explain" source="#13:158" target="#25:215"><data key="label">explain</data></edge>
    <edge id="#24:319" label="explain" source="#13:152" target="#25:216"><data key="label">explain</data></edge>
    <edge id="#24:320" label="explain" source="#13:160" target="#25:217"><data key="label">explain</data></edge>
    <edge id="#24:321" label="explain" source="#13:159" target="#25:218"><data key="label">explain</data></edge>
    <edge id="#24:322" label="explain" source="#13:162" target="#25:220"><data key="label">explain</data></edge>
    <edge id="#24:323" label="explain" source="#13:163" target="#25:221"><data key="label">explain</data></edge>
    <edge id="#24:325" label="explain" source="#13:165" target="#25:223"><data key="label">explain</data></edge>
    <edge id="#24:327" label="explain" source="#13:166" target="#25:224"><data key="label">explain</data></edge>
    <edge id="#24:329" label="explain" source="#13:167" target="#25:225"><data key="label">explain</data></edge>
    <edge id="#24:330" label="explain" source="#13:168" target="#25:226"><data key="label">explain</data></edge>
    <edge id="#24:331" label="explain" source="#13:169" target="#25:227"><data key="label">explain</data></edge>
    <edge id="#24:332" label="explain" source="#13:170" target="#25:228"><data key="label">explain</data></edge>
    <edge id="#24:333" label="explain" source="#13:171" target="#25:229"><data key="label">explain</data></edge>
    <edge id="#24:334" label="explain" source="#13:172" target="#25:230"><data key="label">explain</data></edge>
    <edge id="#24:335" label="explain" source="#13:173" target="#25:231"><data key="label">explain</data></edge>
    <edge id="#24:336" label="explain" source="#13:174" target="#25:232"><data key="label">explain</data></edge>
    <edge id="#24:337" label="explain" source="#13:175" target="#25:233"><data key="label">explain</data></edge>
    <edge id="#24:338" label="explain" source="#13:176" target="#25:234"><data key="label">explain</data></edge>
    <edge id="#24:339" label="explain" source="#13:177" target="#25:235"><data key="label">explain</data></edge>
    <edge id="#24:340" label="explain" source="#13:178" target="#25:236"><data key="label">explain</data></edge>
    <edge id="#24:341" label="explain" source="#13:164" target="#25:237"><data key="label">explain</data></edge>
    <edge id="#24:342" label="explain" source="#13:179" target="#25:238"><data key="label">explain</data></edge>
    <edge id="#24:343" label="explain" source="#13:180" target="#25:239"><data key="label">explain</data></edge>
    <edge id="#24:344" label="explain" source="#13:181" target="#25:240"><data key="label">explain</data></edge>
    <edge id="#24:345" label="explain" source="#13:182" target="#25:241"><data key="label">explain</data></edge>
    <edge id="#24:346" label="explain" source="#13:183" target="#25:242"><data key="label">explain</data></edge>
    <edge id="#24:347" label="explain" source="#34:25" target="#25:243"><data key="label">explain</data></edge>
    <edge id="#24:348" label="explain" source="#13:184" target="#25:244"><data key="label">explain</data></edge>
    <edge id="#24:349" label="explain" source="#13:185" target="#25:245"><data key="label">explain</data></edge>
    <edge id="#24:350" label="explain" source="#13:186" target="#25:246"><data key="label">explain</data></edge>
    <edge id="#24:351" label="explain" source="#13:187" target="#25:247"><data key="label">explain</data></edge>
    <edge id="#24:352" label="explain" source="#13:188" target="#25:248"><data key="label">explain</data></edge>
    <edge id="#24:353" label="explain" source="#13:189" target="#25:249"><data key="label">explain</data></edge>
    <edge id="#24:354" label="explain" source="#13:190" target="#25:250"><data key="label">explain</data></edge>
    <edge id="#24:355" label="explain" source="#13:191" target="#25:251"><data key="label">explain</data></edge>
    <edge id="#24:356" label="explain" source="#13:192" target="#25:252"><data key="label">explain</data></edge>
    <edge id="#24:357" label="explain" source="#13:193" target="#25:253"><data key="label">explain</data></edge>
    <edge id="#24:358" label="explain" source="#13:194" target="#25:254"><data key="label">explain</data></edge>
    <edge id="#24:359" label="explain" source="#13:195" target="#25:255"><data key="label">explain</data></edge>
    <edge id="#24:360" label="explain" source="#13:196" target="#25:256"><data key="label">explain</data></edge>
    <edge id="#24:361" label="explain" source="#13:197" target="#25:257"><data key="label">explain</data></edge>
    <edge id="#24:362" label="explain" source="#13:198" target="#25:258"><data key="label">explain</data></edge>
    <edge id="#24:363" label="explain" source="#13:199" target="#25:259"><data key="label">explain</data></edge>
    <edge id="#24:364" label="explain" source="#13:200" target="#25:260"><data key="label">explain</data></edge>
    <edge id="#24:365" label="explain" source="#13:201" target="#25:261"><data key="label">explain</data></edge>
    <edge id="#24:366" label="explain" source="#13:202" target="#25:262"><data key="label">explain</data></edge>
    <edge id="#24:367" label="explain" source="#13:203" target="#25:263"><data key="label">explain</data></edge>
    <edge id="#24:368" label="explain" source="#13:204" target="#25:264"><data key="label">explain</data></edge>
    <edge id="#24:369" label="explain" source="#13:205" target="#25:265"><data key="label">explain</data></edge>
    <edge id="#24:370" label="explain" source="#13:206" target="#25:266"><data key="label">explain</data></edge>
    <edge id="#24:371" label="explain" source="#13:207" target="#25:267"><data key="label">explain</data></edge>
    <edge id="#24:372" label="explain" source="#13:208" target="#25:268"><data key="label">explain</data></edge>
    <edge id="#24:373" label="explain" source="#13:209" target="#25:269"><data key="label">explain</data></edge>
    <edge id="#24:374" label="explain" source="#13:210" target="#25:270"><data key="label">explain</data></edge>
    <edge id="#24:375" label="explain" source="#13:211" target="#25:271"><data key="label">explain</data></edge>
    <edge id="#24:376" label="explain" source="#13:212" target="#25:272"><data key="label">explain</data></edge>
    <edge id="#24:377" label="explain" source="#13:213" target="#25:273"><data key="label">explain</data></edge>
    <edge id="#24:378" label="explain" source="#34:26" target="#25:274"><data key="label">explain</data></edge>
    <edge id="#24:379" label="explain" source="#13:214" target="#25:275"><data key="label">explain</data></edge>
    <edge id="#24:381" label="explain" source="#13:217" target="#25:276"><data key="label">explain</data></edge>
    <edge id="#24:382" label="explain" source="#13:216" target="#25:277"><data key="label">explain</data></edge>
    <edge id="#24:383" label="explain" source="#13:218" target="#25:278"><data key="label">explain</data></edge>
    <edge id="#24:384" label="explain" source="#13:217" target="#25:279"><data key="label">explain</data></edge>
    <edge id="#24:385" label="explain" source="#13:220" target="#25:280"><data key="label">explain</data></edge>
    <edge id="#24:386" label="explain" source="#13:221" target="#25:281"><data key="label">explain</data></edge>
    <edge id="#24:387" label="explain" source="#13:222" target="#25:282"><data key="label">explain</data></edge>
    <edge id="#24:388" label="explain" source="#13:223" target="#25:283"><data key="label">explain</data></edge>
    <edge id="#24:389" label="explain" source="#13:224" target="#25:284"><data key="label">explain</data></edge>
    <edge id="#24:390" label="explain" source="#13:225" target="#25:285"><data key="label">explain</data></edge>
    <edge id="#24:391" label="explain" source="#13:226" target="#25:286"><data key="label">explain</data></edge>
    <edge id="#24:392" label="explain" source="#13:227" target="#25:287"><data key="label">explain</data></edge>
    <edge id="#24:393" label="explain" source="#13:214" target="#25:288"><data key="label">explain</data></edge>
    <edge id="#24:394" label="explain" source="#13:229" target="#25:289"><data key="label">explain</data></edge>
    <edge id="#24:395" label="explain" source="#13:230" target="#25:290"><data key="label">explain</data></edge>
    <edge id="#24:396" label="explain" source="#13:231" target="#25:291"><data key="label">explain</data></edge>
    <edge id="#24:397" label="explain" source="#13:232" target="#25:292"><data key="label">explain</data></edge>
    <edge id="#24:398" label="explain" source="#13:233" target="#25:293"><data key="label">explain</data></edge>
    <edge id="#24:399" label="explain" source="#13:234" target="#25:294"><data key="label">explain</data></edge>
    <edge id="#24:400" label="explain" source="#13:235" target="#25:295"><data key="label">explain</data></edge>
    <edge id="#24:401" label="explain" source="#13:236" target="#25:297"><data key="label">explain</data></edge>
    <edge id="#24:402" label="explain" source="#13:237" target="#25:298"><data key="label">explain</data></edge>
    <edge id="#24:403" label="explain" source="#13:238" target="#25:299"><data key="label">explain</data></edge>
    <edge id="#24:404" label="explain" source="#13:239" target="#25:300"><data key="label">explain</data></edge>
    <edge id="#24:405" label="explain" source="#13:240" target="#25:301"><data key="label">explain</data></edge>
    <edge id="#24:406" label="explain" source="#13:242" target="#25:301"><data key="label">explain</data></edge>
    <edge id="#24:407" label="explain" source="#13:241" target="#25:302"><data key="label">explain</data></edge>
    <edge id="#24:408" label="explain" source="#13:243" target="#25:303"><data key="label">explain</data></edge>
    <edge id="#24:409" label="explain" source="#13:244" target="#25:304"><data key="label">explain</data></edge>
    <edge id="#24:410" label="explain" source="#13:246" target="#25:305"><data key="label">explain</data></edge>
    <edge id="#24:411" label="explain" source="#13:247" target="#25:306"><data key="label">explain</data></edge>
    <edge id="#24:412" label="explain" source="#13:248" target="#25:307"><data key="label">explain</data></edge>
    <edge id="#24:413" label="explain" source="#13:249" target="#25:308"><data key="label">explain</data></edge>
    <edge id="#24:414" label="explain" source="#13:250" target="#25:309"><data key="label">explain</data></edge>
    <edge id="#24:415" label="explain" source="#13:251" target="#25:310"><data key="label">explain</data></edge>
    <edge id="#24:416" label="explain" source="#13:252" target="#25:311"><data key="label">explain</data></edge>
    <edge id="#24:417" label="explain" source="#13:253" target="#25:312"><data key="label">explain</data></edge>
    <edge id="#24:418" label="explain" source="#13:254" target="#25:313"><data key="label">explain</data></edge>
    <edge id="#24:419" label="explain" source="#34:27" target="#25:314"><data key="label">explain</data></edge>
    <edge id="#24:420" label="explain" source="#13:255" target="#25:315"><data key="label">explain</data></edge>
    <edge id="#24:421" label="explain" source="#13:256" target="#25:316"><data key="label">explain</data></edge>
    <edge id="#24:422" label="explain" source="#13:257" target="#25:317"><data key="label">explain</data></edge>
    <edge id="#24:423" label="explain" source="#13:258" target="#25:318"><data key="label">explain</data></edge>
    <edge id="#24:424" label="explain" source="#13:259" target="#25:319"><data key="label">explain</data></edge>
    <edge id="#24:425" label="explain" source="#13:260" target="#25:320"><data key="label">explain</data></edge>
    <edge id="#24:426" label="explain" source="#13:261" target="#25:321"><data key="label">explain</data></edge>
    <edge id="#24:427" label="explain" source="#13:262" target="#25:322"><data key="label">explain</data></edge>
    <edge id="#24:428" label="explain" source="#13:263" target="#25:323"><data key="label">explain</data></edge>
    <edge id="#24:429" label="explain" source="#13:265" target="#25:325"><data key="label">explain</data></edge>
    <edge id="#27:0" label="appear" source="#13:10" target="#16:0"><data key="label">appear</data></edge>
    <edge id="#27:1" label="appear" source="#13:11" target="#16:1"><data key="label">appear</data></edge>
    <edge id="#27:2" label="appear" source="#14:3" target="#16:2"><data key="label">appear</data></edge>
    <edge id="#27:3" label="appear" source="#13:12" target="#16:3"><data key="label">appear</data></edge>
    <edge id="#27:6" label="appear" source="#25:6" target="#16:6"><data key="label">appear</data></edge>
    <edge id="#27:7" label="appear" source="#25:6" target="#16:7"><data key="label">appear</data></edge>
    <edge id="#27:8" label="appear" source="#13:15" target="#16:10"><data key="label">appear</data></edge>
    <edge id="#27:9" label="appear" source="#14:7" target="#16:11"><data key="label">appear</data></edge>
    <edge id="#27:10" label="appear" source="#14:8" target="#16:8"><data key="label">appear</data></edge>
    <edge id="#27:11" label="appear" source="#14:8" target="#16:9"><data key="label">appear</data></edge>
    <edge id="#27:13" label="appear" source="#14:12" target="#16:12"><data key="label">appear</data></edge>
    <edge id="#27:14" label="appear" source="#13:16" target="#16:13"><data key="label">appear</data></edge>
    <edge id="#27:15" label="appear" source="#13:15" target="#16:20"><data key="label">appear</data></edge>
    <edge id="#27:16" label="appear" source="#14:15" target="#16:23"><data key="label">appear</data></edge>
    <edge id="#27:17" label="appear" source="#14:15" target="#16:22"><data key="label">appear</data></edge>
    <edge id="#27:18" label="appear" source="#14:15" target="#16:21"><data key="label">appear</data></edge>
    <edge id="#27:20" label="appear" source="#13:23" target="#16:24"><data key="label">appear</data></edge>
    <edge id="#27:21" label="appear" source="#13:23" target="#16:25"><data key="label">appear</data></edge>
    <edge id="#27:22" label="appear" source="#14:16" target="#16:26"><data key="label">appear</data></edge>
    <edge id="#27:23" label="appear" source="#14:16" target="#16:28"><data key="label">appear</data></edge>
    <edge id="#27:24" label="appear" source="#14:16" target="#16:27"><data key="label">appear</data></edge>
    <edge id="#27:25" label="appear" source="#14:17" target="#16:30"><data key="label">appear</data></edge>
    <edge id="#27:26" label="appear" source="#14:17" target="#16:29"><data key="label">appear</data></edge>
    <edge id="#27:27" label="appear" source="#14:18" target="#16:32"><data key="label">appear</data></edge>
    <edge id="#27:28" label="appear" source="#14:19" target="#16:33"><data key="label">appear</data></edge>
    <edge id="#27:29" label="appear" source="#14:20" target="#16:34"><data key="label">appear</data></edge>
    <edge id="#27:30" label="appear" source="#14:20" target="#16:35"><data key="label">appear</data></edge>
    <edge id="#27:31" label="appear" source="#14:22" target="#16:36"><data key="label">appear</data></edge>
    <edge id="#27:32" label="appear" source="#14:23" target="#16:37"><data key="label">appear</data></edge>
    <edge id="#27:33" label="appear" source="#13:31" target="#16:38"><data key="label">appear</data></edge>
    <edge id="#27:34" label="appear" source="#13:32" target="#16:39"><data key="label">appear</data></edge>
    <edge id="#27:35" label="appear" source="#14:11" target="#16:40"><data key="label">appear</data></edge>
    <edge id="#27:36" label="appear" source="#14:11" target="#16:41"><data key="label">appear</data></edge>
    <edge id="#27:37" label="appear" source="#13:33" target="#16:43"><data key="label">appear</data></edge>
    <edge id="#27:38" label="appear" source="#13:33" target="#16:42"><data key="label">appear</data></edge>
    <edge id="#27:41" label="appear" source="#13:34" target="#16:44"><data key="label">appear</data></edge>
    <edge id="#27:43" label="appear" source="#13:19" target="#16:18"><data key="label">appear</data></edge>
    <edge id="#27:47" label="appear" source="#13:36" target="#16:46"><data key="label">appear</data></edge>
    <edge id="#27:48" label="appear" source="#13:36" target="#16:45"><data key="label">appear</data></edge>
    <edge id="#27:49" label="appear" source="#13:36" target="#16:47"><data key="label">appear</data></edge>
    <edge id="#27:50" label="appear" source="#13:38" target="#16:48"><data key="label">appear</data></edge>
    <edge id="#27:51" label="appear" source="#13:38" target="#16:49"><data key="label">appear</data></edge>
    <edge id="#27:52" label="appear" source="#13:39" target="#16:50"><data key="label">appear</data></edge>
    <edge id="#27:53" label="appear" source="#14:28" target="#16:51"><data key="label">appear</data></edge>
    <edge id="#27:54" label="appear" source="#13:42" target="#16:52"><data key="label">appear</data></edge>
    <edge id="#27:55" label="appear" source="#13:42" target="#16:53"><data key="label">appear</data></edge>
    <edge id="#27:56" label="appear" source="#13:42" target="#16:54"><data key="label">appear</data></edge>
    <edge id="#27:57" label="appear" source="#14:29" target="#16:55"><data key="label">appear</data></edge>
    <edge id="#27:58" label="appear" source="#14:29" target="#16:56"><data key="label">appear</data></edge>
    <edge id="#27:59" label="appear" source="#14:31" target="#16:58"><data key="label">appear</data></edge>
    <edge id="#27:60" label="appear" source="#14:32" target="#16:59"><data key="label">appear</data></edge>
    <edge id="#27:61" label="appear" source="#14:33" target="#16:60"><data key="label">appear</data></edge>
    <edge id="#27:62" label="appear" source="#14:33" target="#16:61"><data key="label">appear</data></edge>
    <edge id="#27:63" label="appear" source="#14:33" target="#16:62"><data key="label">appear</data></edge>
    <edge id="#27:64" label="appear" source="#14:34" target="#16:63"><data key="label">appear</data></edge>
    <edge id="#27:65" label="appear" source="#14:36" target="#16:64"><data key="label">appear</data></edge>
    <edge id="#27:66" label="appear" source="#13:45" target="#16:65"><data key="label">appear</data></edge>
    <edge id="#27:67" label="appear" source="#14:38" target="#16:66"><data key="label">appear</data></edge>
    <edge id="#27:68" label="appear" source="#13:46" target="#16:67"><data key="label">appear</data></edge>
    <edge id="#27:69" label="appear" source="#13:46" target="#16:69"><data key="label">appear</data></edge>
    <edge id="#27:70" label="appear" source="#13:46" target="#16:68"><data key="label">appear</data></edge>
    <edge id="#27:71" label="appear" source="#13:47" target="#16:70"><data key="label">appear</data></edge>
    <edge id="#27:72" label="appear" source="#13:47" target="#16:71"><data key="label">appear</data></edge>
    <edge id="#27:73" label="appear" source="#13:48" target="#16:72"><data key="label">appear</data></edge>
    <edge id="#27:74" label="appear" source="#13:48" target="#16:73"><data key="label">appear</data></edge>
    <edge id="#27:75" label="appear" source="#14:40" target="#16:74"><data key="label">appear</data></edge>
    <edge id="#27:76" label="appear" source="#14:40" target="#16:76"><data key="label">appear</data></edge>
    <edge id="#27:77" label="appear" source="#14:40" target="#16:75"><data key="label">appear</data></edge>
    <edge id="#27:78" label="appear" source="#14:42" target="#16:78"><data key="label">appear</data></edge>
    <edge id="#27:79" label="appear" source="#14:42" target="#16:79"><data key="label">appear</data></edge>
    <edge id="#27:80" label="appear" source="#14:42" target="#16:77"><data key="label">appear</data></edge>
    <edge id="#27:81" label="appear" source="#13:50" target="#16:80"><data key="label">appear</data></edge>
    <edge id="#27:82" label="appear" source="#14:43" target="#16:81"><data key="label">appear</data></edge>
    <edge id="#27:83" label="appear" source="#13:56" target="#16:12"><data key="label">appear</data></edge>
    <edge id="#27:84" label="appear" source="#13:58" target="#16:82"><data key="label">appear</data></edge>
    <edge id="#27:85" label="appear" source="#13:58" target="#16:83"><data key="label">appear</data></edge>
    <edge id="#27:86" label="appear" source="#25:73" target="#16:84"><data key="label">appear</data></edge>
    <edge id="#27:87" label="appear" source="#14:47" target="#16:85"><data key="label">appear</data></edge>
    <edge id="#27:88" label="appear" source="#14:48" target="#16:86"><data key="label">appear</data></edge>
    <edge id="#27:90" label="appear" source="#13:57" target="#16:89"><data key="label">appear</data></edge>
    <edge id="#27:91" label="appear" source="#13:57" target="#16:88"><data key="label">appear</data></edge>
    <edge id="#27:92" label="appear" source="#13:56" target="#16:90"><data key="label">appear</data></edge>
    <edge id="#27:94" label="appear" source="#13:15" target="#16:5"><data key="label">appear</data></edge>
    <edge id="#27:95" label="appear" source="#13:15" target="#16:4"><data key="label">appear</data></edge>
    <edge id="#27:96" label="appear" source="#13:59" target="#16:6"><data key="label">appear</data></edge>
    <edge id="#27:97" label="appear" source="#13:12" target="#16:3"><data key="label">appear</data></edge>
    <edge id="#27:98" label="appear" source="#13:12" target="#16:92"><data key="label">appear</data></edge>
    <edge id="#27:99" label="appear" source="#13:62" target="#16:93"><data key="label">appear</data></edge>
    <edge id="#27:100" label="appear" source="#13:63" target="#16:96"><data key="label">appear</data></edge>
    <edge id="#27:101" label="appear" source="#13:63" target="#16:95"><data key="label">appear</data></edge>
    <edge id="#27:102" label="appear" source="#13:63" target="#16:94"><data key="label">appear</data></edge>
    <edge id="#27:103" label="appear" source="#13:64" target="#16:97"><data key="label">appear</data></edge>
    <edge id="#27:104" label="appear" source="#14:49" target="#16:99"><data key="label">appear</data></edge>
    <edge id="#27:105" label="appear" source="#14:49" target="#16:98"><data key="label">appear</data></edge>
    <edge id="#27:106" label="appear" source="#13:65" target="#16:100"><data key="label">appear</data></edge>
    <edge id="#27:107" label="appear" source="#13:65" target="#16:101"><data key="label">appear</data></edge>
    <edge id="#27:108" label="appear" source="#13:65" target="#16:102"><data key="label">appear</data></edge>
    <edge id="#27:109" label="appear" source="#13:65" target="#16:103"><data key="label">appear</data></edge>
    <edge id="#27:111" label="appear" source="#14:50" target="#16:105"><data key="label">appear</data></edge>
    <edge id="#27:112" label="appear" source="#14:50" target="#16:106"><data key="label">appear</data></edge>
    <edge id="#27:113" label="appear" source="#13:69" target="#16:107"><data key="label">appear</data></edge>
    <edge id="#27:116" label="appear" source="#13:70" target="#16:110"><data key="label">appear</data></edge>
    <edge id="#27:117" label="appear" source="#13:70" target="#16:111"><data key="label">appear</data></edge>
    <edge id="#27:118" label="appear" source="#13:70" target="#16:112"><data key="label">appear</data></edge>
    <edge id="#27:119" label="appear" source="#14:53" target="#16:113"><data key="label">appear</data></edge>
    <edge id="#27:120" label="appear" source="#14:53" target="#16:114"><data key="label">appear</data></edge>
    <edge id="#27:121" label="appear" source="#14:54" target="#16:115"><data key="label">appear</data></edge>
    <edge id="#27:122" label="appear" source="#14:55" target="#16:116"><data key="label">appear</data></edge>
    <edge id="#27:123" label="appear" source="#14:55" target="#16:117"><data key="label">appear</data></edge>
    <edge id="#27:124" label="appear" source="#14:55" target="#16:118"><data key="label">appear</data></edge>
    <edge id="#27:125" label="appear" source="#13:71" target="#16:119"><data key="label">appear</data></edge>
    <edge id="#27:126" label="appear" source="#13:71" target="#16:120"><data key="label">appear</data></edge>
    <edge id="#27:127" label="appear" source="#14:56" target="#16:121"><data key="label">appear</data></edge>
    <edge id="#27:128" label="appear" source="#14:56" target="#16:122"><data key="label">appear</data></edge>
    <edge id="#27:129" label="appear" source="#13:73" target="#16:123"><data key="label">appear</data></edge>
    <edge id="#27:130" label="appear" source="#13:73" target="#16:124"><data key="label">appear</data></edge>
    <edge id="#27:131" label="appear" source="#13:73" target="#16:125"><data key="label">appear</data></edge>
    <edge id="#27:132" label="appear" source="#13:74" target="#16:126"><data key="label">appear</data></edge>
    <edge id="#27:133" label="appear" source="#14:62" target="#16:23"><data key="label">appear</data></edge>
    <edge id="#27:134" label="appear" source="#14:57" target="#16:15"><data key="label">appear</data></edge>
    <edge id="#27:135" label="appear" source="#14:58" target="#16:127"><data key="label">appear</data></edge>
    <edge id="#27:136" label="appear" source="#14:57" target="#16:15"><data key="label">appear</data></edge>
    <edge id="#27:137" label="appear" source="#14:60" target="#16:7"><data key="label">appear</data></edge>
    <edge id="#27:138" label="appear" source="#13:78" target="#16:128"><data key="label">appear</data></edge>
    <edge id="#27:139" label="appear" source="#13:80" target="#16:129"><data key="label">appear</data></edge>
    <edge id="#27:140" label="appear" source="#13:88" target="#16:130"><data key="label">appear</data></edge>
    <edge id="#27:141" label="appear" source="#13:95" target="#16:131"><data key="label">appear</data></edge>
    <edge id="#27:142" label="appear" source="#13:97" target="#16:132"><data key="label">appear</data></edge>
    <edge id="#27:143" label="appear" source="#25:133" target="#16:133"><data key="label">appear</data></edge>
    <edge id="#27:145" label="appear" source="#13:100" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:146" label="appear" source="#13:101" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:147" label="appear" source="#13:102" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:148" label="appear" source="#13:103" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:149" label="appear" source="#13:104" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:150" label="appear" source="#13:105" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:151" label="appear" source="#13:106" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:152" label="appear" source="#13:106" target="#16:137"><data key="label">appear</data></edge>
    <edge id="#27:153" label="appear" source="#13:107" target="#16:138"><data key="label">appear</data></edge>
    <edge id="#27:154" label="appear" source="#13:107" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:155" label="appear" source="#13:108" target="#16:135"><data key="label">appear</data></edge>
    <edge id="#27:156" label="appear" source="#13:68" target="#16:139"><data key="label">appear</data></edge>
    <edge id="#27:157" label="appear" source="#13:66" target="#16:140"><data key="label">appear</data></edge>
    <edge id="#27:158" label="appear" source="#13:56" target="#16:141"><data key="label">appear</data></edge>
    <edge id="#27:159" label="appear" source="#13:112" target="#16:142"><data key="label">appear</data></edge>
    <edge id="#27:160" label="appear" source="#14:23" target="#16:143"><data key="label">appear</data></edge>
    <edge id="#27:161" label="appear" source="#14:66" target="#16:145"><data key="label">appear</data></edge>
    <edge id="#27:162" label="appear" source="#14:66" target="#16:144"><data key="label">appear</data></edge>
    <edge id="#27:163" label="appear" source="#13:43" target="#16:146"><data key="label">appear</data></edge>
    <edge id="#27:164" label="appear" source="#13:43" target="#16:147"><data key="label">appear</data></edge>
    <edge id="#27:165" label="appear" source="#13:43" target="#16:148"><data key="label">appear</data></edge>
    <edge id="#27:166" label="appear" source="#14:33" target="#16:149"><data key="label">appear</data></edge>
    <edge id="#27:167" label="appear" source="#14:67" target="#16:150"><data key="label">appear</data></edge>
    <edge id="#27:168" label="appear" source="#14:68" target="#16:151"><data key="label">appear</data></edge>
    <edge id="#27:169" label="appear" source="#14:17" target="#16:108"><data key="label">appear</data></edge>
    <edge id="#27:170" label="appear" source="#14:17" target="#16:109"><data key="label">appear</data></edge>
    <edge id="#27:171" label="appear" source="#13:32" target="#16:152"><data key="label">appear</data></edge>
    <edge id="#27:172" label="appear" source="#13:57" target="#16:154"><data key="label">appear</data></edge>
    <edge id="#27:173" label="appear" source="#13:57" target="#16:155"><data key="label">appear</data></edge>
    <edge id="#27:174" label="appear" source="#13:31" target="#16:156"><data key="label">appear</data></edge>
    <edge id="#27:175" label="appear" source="#13:31" target="#16:157"><data key="label">appear</data></edge>
    <edge id="#27:176" label="appear" source="#14:12" target="#16:158"><data key="label">appear</data></edge>
    <edge id="#27:177" label="appear" source="#14:47" target="#16:159"><data key="label">appear</data></edge>
    <edge id="#27:178" label="appear" source="#14:47" target="#16:160"><data key="label">appear</data></edge>
    <edge id="#27:179" label="appear" source="#14:46" target="#16:161"><data key="label">appear</data></edge>
    <edge id="#27:180" label="appear" source="#14:45" target="#16:162"><data key="label">appear</data></edge>
    <edge id="#27:181" label="appear" source="#14:44" target="#16:163"><data key="label">appear</data></edge>
    <edge id="#27:182" label="appear" source="#13:73" target="#16:164"><data key="label">appear</data></edge>
    <edge id="#27:183" label="appear" source="#14:23" target="#16:165"><data key="label">appear</data></edge>
    <edge id="#27:184" label="appear" source="#13:62" target="#16:166"><data key="label">appear</data></edge>
    <edge id="#27:185" label="appear" source="#13:62" target="#16:167"><data key="label">appear</data></edge>
    <edge id="#27:186" label="appear" source="#13:112" target="#16:168"><data key="label">appear</data></edge>
    <edge id="#27:187" label="appear" source="#14:70" target="#16:169"><data key="label">appear</data></edge>
    <edge id="#27:188" label="appear" source="#14:70" target="#16:170"><data key="label">appear</data></edge>
    <edge id="#27:189" label="appear" source="#14:70" target="#16:171"><data key="label">appear</data></edge>
    <edge id="#27:190" label="appear" source="#14:70" target="#16:172"><data key="label">appear</data></edge>
    <edge id="#27:191" label="appear" source="#14:56" target="#16:173"><data key="label">appear</data></edge>
    <edge id="#27:192" label="appear" source="#34:2" target="#16:174"><data key="label">appear</data></edge>
    <edge id="#27:193" label="appear" source="#13:21" target="#16:19"><data key="label">appear</data></edge>
    <edge id="#27:194" label="appear" source="#13:19" target="#16:17"><data key="label">appear</data></edge>
    <edge id="#27:195" label="appear" source="#13:19" target="#16:17"><data key="label">appear</data></edge>
    <edge id="#27:196" label="appear" source="#13:19" target="#16:17"><data key="label">appear</data></edge>
    <edge id="#27:197" label="appear" source="#13:58" target="#16:175"><data key="label">appear</data></edge>
    <edge id="#27:198" label="appear" source="#13:58" target="#16:176"><data key="label">appear</data></edge>
    <edge id="#27:200" label="appear" source="#16:177" target="#13:122"><data key="label">appear</data></edge>
    <edge id="#27:201" label="appear" source="#13:122" target="#16:178"><data key="label">appear</data></edge>
    <edge id="#27:202" label="appear" source="#13:123" target="#16:179"><data key="label">appear</data></edge>
    <edge id="#27:203" label="appear" source="#25:200" target="#16:180"><data key="label">appear</data></edge>
    <edge id="#27:204" label="appear" source="#25:201" target="#16:181"><data key="label">appear</data></edge>
    <edge id="#27:205" label="appear" source="#13:143" target="#16:180"><data key="label">appear</data></edge>
    <edge id="#27:207" label="appear" source="#13:112" target="#16:182"><data key="label">appear</data></edge>
    <edge id="#27:208" label="appear" source="#14:43" target="#16:183"><data key="label">appear</data></edge>
    <edge id="#27:209" label="appear" source="#13:43" target="#16:184"><data key="label">appear</data></edge>
    <edge id="#27:210" label="appear" source="#13:43" target="#16:185"><data key="label">appear</data></edge>
    <edge id="#27:211" label="appear" source="#14:40" target="#16:186"><data key="label">appear</data></edge>
    <edge id="#27:212" label="appear" source="#13:144" target="#16:181"><data key="label">appear</data></edge>
    <edge id="#27:213" label="appear" source="#13:243" target="#16:187"><data key="label">appear</data></edge>
    <edge id="#29:0" label="CSExample" source="#13:32" target="#17:33"><data key="label">CSExample</data></edge>
    <edge id="#29:1" label="CSExample" source="#13:33" target="#17:36"><data key="label">CSExample</data></edge>
    <edge id="#29:2" label="CSExample" source="#13:33" target="#17:35"><data key="label">CSExample</data></edge>
    <edge id="#29:3" label="CSExample" source="#13:34" target="#17:37"><data key="label">CSExample</data></edge>
    <edge id="#29:4" label="CSExample" source="#13:34" target="#17:38"><data key="label">CSExample</data></edge>
    <edge id="#29:5" label="CSExample" source="#14:4" target="#17:3"><data key="label">CSExample</data></edge>
    <edge id="#29:6" label="CSExample" source="#13:12" target="#17:4"><data key="label">CSExample</data></edge>
    <edge id="#29:8" label="CSExample" source="#13:14" target="#17:11"><data key="label">CSExample</data></edge>
    <edge id="#29:9" label="CSExample" source="#13:14" target="#17:10"><data key="label">CSExample</data></edge>
    <edge id="#29:12" label="CSExample" source="#14:24" target="#17:32"><data key="label">CSExample</data></edge>
    <edge id="#29:13" label="CSExample" source="#14:22" target="#17:30"><data key="label">CSExample</data></edge>
    <edge id="#29:14" label="CSExample" source="#13:27" target="#17:31"><data key="label">CSExample</data></edge>
    <edge id="#29:15" label="CSExample" source="#14:20" target="#17:27"><data key="label">CSExample</data></edge>
    <edge id="#29:20" label="CSExample" source="#13:58" target="#17:83"><data key="label">CSExample</data></edge>
    <edge id="#29:21" label="CSExample" source="#14:44" target="#17:84"><data key="label">CSExample</data></edge>
    <edge id="#29:23" label="CSExample" source="#14:48" target="#17:86"><data key="label">CSExample</data></edge>
    <edge id="#29:24" label="CSExample" source="#13:57" target="#17:87"><data key="label">CSExample</data></edge>
    <edge id="#29:25" label="CSExample" source="#14:22" target="#17:88"><data key="label">CSExample</data></edge>
    <edge id="#29:26" label="CSExample" source="#14:42" target="#17:89"><data key="label">CSExample</data></edge>
    <edge id="#29:27" label="CSExample" source="#13:15" target="#17:5"><data key="label">CSExample</data></edge>
    <edge id="#29:28" label="CSExample" source="#13:15" target="#17:7"><data key="label">CSExample</data></edge>
    <edge id="#29:29" label="CSExample" source="#13:59" target="#17:9"><data key="label">CSExample</data></edge>
    <edge id="#29:32" label="CSExample" source="#13:62" target="#17:90"><data key="label">CSExample</data></edge>
    <edge id="#29:33" label="CSExample" source="#13:63" target="#17:91"><data key="label">CSExample</data></edge>
    <edge id="#29:34" label="CSExample" source="#14:49" target="#17:92"><data key="label">CSExample</data></edge>
    <edge id="#29:35" label="CSExample" source="#13:65" target="#17:93"><data key="label">CSExample</data></edge>
    <edge id="#29:37" label="CSExample" source="#14:50" target="#17:95"><data key="label">CSExample</data></edge>
    <edge id="#29:39" label="CSExample" source="#13:70" target="#17:97"><data key="label">CSExample</data></edge>
    <edge id="#29:40" label="CSExample" source="#13:70" target="#17:98"><data key="label">CSExample</data></edge>
    <edge id="#29:41" label="CSExample" source="#13:70" target="#17:99"><data key="label">CSExample</data></edge>
    <edge id="#29:42" label="CSExample" source="#13:70" target="#17:100"><data key="label">CSExample</data></edge>
    <edge id="#29:44" label="CSExample" source="#14:52" target="#17:101"><data key="label">CSExample</data></edge>
    <edge id="#29:45" label="CSExample" source="#14:53" target="#17:102"><data key="label">CSExample</data></edge>
    <edge id="#29:46" label="CSExample" source="#14:53" target="#17:103"><data key="label">CSExample</data></edge>
    <edge id="#29:47" label="CSExample" source="#14:54" target="#17:104"><data key="label">CSExample</data></edge>
    <edge id="#29:48" label="CSExample" source="#13:71" target="#17:105"><data key="label">CSExample</data></edge>
    <edge id="#29:49" label="CSExample" source="#13:71" target="#17:106"><data key="label">CSExample</data></edge>
    <edge id="#29:51" label="CSExample" source="#13:71" target="#17:107"><data key="label">CSExample</data></edge>
    <edge id="#29:52" label="CSExample" source="#13:71" target="#17:108"><data key="label">CSExample</data></edge>
    <edge id="#29:55" label="CSExample" source="#13:73" target="#17:109"><data key="label">CSExample</data></edge>
    <edge id="#29:56" label="CSExample" source="#13:74" target="#17:110"><data key="label">CSExample</data></edge>
    <edge id="#29:57" label="CSExample" source="#13:75" target="#17:111"><data key="label">CSExample</data></edge>
    <edge id="#29:58" label="CSExample" source="#13:76" target="#17:112"><data key="label">CSExample</data></edge>
    <edge id="#29:59" label="CSExample" source="#13:77" target="#17:113"><data key="label">CSExample</data></edge>
    <edge id="#29:61" label="CSExample" source="#13:98" target="#17:119"><data key="label">CSExample</data></edge>
    <edge id="#29:62" label="CSExample" source="#13:102" target="#17:122"><data key="label">CSExample</data></edge>
    <edge id="#29:63" label="CSExample" source="#13:100" target="#17:121"><data key="label">CSExample</data></edge>
    <edge id="#29:64" label="CSExample" source="#13:105" target="#17:124"><data key="label">CSExample</data></edge>
    <edge id="#29:65" label="CSExample" source="#13:78" target="#17:115"><data key="label">CSExample</data></edge>
    <edge id="#29:66" label="CSExample" source="#13:89" target="#17:116"><data key="label">CSExample</data></edge>
    <edge id="#29:67" label="CSExample" source="#13:92" target="#17:117"><data key="label">CSExample</data></edge>
    <edge id="#29:68" label="CSExample" source="#13:96" target="#17:118"><data key="label">CSExample</data></edge>
    <edge id="#29:69" label="CSExample" source="#13:39" target="#17:44"><data key="label">CSExample</data></edge>
    <edge id="#29:71" label="CSExample" source="#13:111" target="#17:125"><data key="label">CSExample</data></edge>
    <edge id="#29:72" label="CSExample" source="#13:69" target="#17:126"><data key="label">CSExample</data></edge>
    <edge id="#29:73" label="CSExample" source="#14:15" target="#17:127"><data key="label">CSExample</data></edge>
    <edge id="#29:74" label="CSExample" source="#13:57" target="#17:128"><data key="label">CSExample</data></edge>
    <edge id="#29:75" label="CSExample" source="#14:46" target="#17:129"><data key="label">CSExample</data></edge>
    <edge id="#29:76" label="CSExample" source="#13:10" target="#17:130"><data key="label">CSExample</data></edge>
    <edge id="#29:78" label="CSExample" source="#14:18" target="#17:131"><data key="label">CSExample</data></edge>
    <edge id="#29:79" label="CSExample" source="#14:19" target="#17:132"><data key="label">CSExample</data></edge>
    <edge id="#29:80" label="CSExample" source="#13:107" target="#17:133"><data key="label">CSExample</data></edge>
    <edge id="#29:81" label="CSExample" source="#13:101" target="#17:134"><data key="label">CSExample</data></edge>
    <edge id="#29:82" label="CSExample" source="#13:104" target="#17:135"><data key="label">CSExample</data></edge>
    <edge id="#29:83" label="CSExample" source="#13:105" target="#17:136"><data key="label">CSExample</data></edge>
    <edge id="#29:84" label="CSExample" source="#13:103" target="#17:137"><data key="label">CSExample</data></edge>
    <edge id="#29:85" label="CSExample" source="#13:108" target="#17:138"><data key="label">CSExample</data></edge>
    <edge id="#29:86" label="CSExample" source="#14:23" target="#17:139"><data key="label">CSExample</data></edge>
    <edge id="#29:87" label="CSExample" source="#14:17" target="#17:96"><data key="label">CSExample</data></edge>
    <edge id="#29:88" label="CSExample" source="#13:31" target="#17:144"><data key="label">CSExample</data></edge>
    <edge id="#29:89" label="CSExample" source="#14:47" target="#17:146"><data key="label">CSExample</data></edge>
    <edge id="#29:90" label="CSExample" source="#14:45" target="#17:147"><data key="label">CSExample</data></edge>
    <edge id="#29:91" label="CSExample" source="#14:7" target="#17:148"><data key="label">CSExample</data></edge>
    <edge id="#29:92" label="CSExample" source="#14:15" target="#17:149"><data key="label">CSExample</data></edge>
    <edge id="#29:93" label="CSExample" source="#14:16" target="#17:151"><data key="label">CSExample</data></edge>
    <edge id="#29:94" label="CSExample" source="#14:61" target="#17:153"><data key="label">CSExample</data></edge>
    <edge id="#29:95" label="CSExample" source="#14:59" target="#17:155"><data key="label">CSExample</data></edge>
    <edge id="#29:96" label="CSExample" source="#14:58" target="#17:156"><data key="label">CSExample</data></edge>
    <edge id="#29:97" label="CSExample" source="#14:60" target="#17:159"><data key="label">CSExample</data></edge>
    <edge id="#29:98" label="CSExample" source="#14:57" target="#17:160"><data key="label">CSExample</data></edge>
    <edge id="#29:99" label="CSExample" source="#14:64" target="#17:162"><data key="label">CSExample</data></edge>
    <edge id="#29:100" label="CSExample" source="#13:29" target="#17:164"><data key="label">CSExample</data></edge>
    <edge id="#29:102" label="CSExample" source="#13:27" target="#17:165"><data key="label">CSExample</data></edge>
    <edge id="#29:103" label="CSExample" source="#14:18" target="#17:166"><data key="label">CSExample</data></edge>
    <edge id="#29:104" label="CSExample" source="#14:56" target="#17:167"><data key="label">CSExample</data></edge>
    <edge id="#29:105" label="CSExample" source="#13:112" target="#17:168"><data key="label">CSExample</data></edge>
    <edge id="#29:106" label="CSExample" source="#13:65" target="#17:175"><data key="label">CSExample</data></edge>
    <edge id="#29:107" label="CSExample" source="#14:18" target="#17:178"><data key="label">CSExample</data></edge>
    <edge id="#29:108" label="CSExample" source="#14:19" target="#17:179"><data key="label">CSExample</data></edge>
    <edge id="#29:109" label="CSExample" source="#13:29" target="#17:180"><data key="label">CSExample</data></edge>
    <edge id="#29:110" label="CSExample" source="#13:56" target="#17:181"><data key="label">CSExample</data></edge>
    <edge id="#29:111" label="CSExample" source="#13:112" target="#17:185"><data key="label">CSExample</data></edge>
    <edge id="#30:0" label="CoreExample" source="#13:19" target="#17:18"><data key="label">CoreExample</data></edge>
    <edge id="#30:2" label="CoreExample" source="#14:16" target="#17:21"><data key="label">CoreExample</data></edge>
    <edge id="#30:3" label="CoreExample" source="#13:23" target="#17:20"><data key="label">CoreExample</data></edge>
    <edge id="#30:4" label="CoreExample" source="#13:10" target="#17:0"><data key="label">CoreExample</data></edge>
    <edge id="#30:5" label="CoreExample" source="#13:11" target="#17:1"><data key="label">CoreExample</data></edge>
    <edge id="#30:6" label="CoreExample" source="#14:3" target="#17:2"><data key="label">CoreExample</data></edge>
    <edge id="#30:11" label="CoreExample" source="#14:12" target="#17:15"><data key="label">CoreExample</data></edge>
    <edge id="#30:12" label="CoreExample" source="#14:11" target="#17:34"><data key="label">CoreExample</data></edge>
    <edge id="#30:13" label="CoreExample" source="#14:11" target="#17:14"><data key="label">CoreExample</data></edge>
    <edge id="#30:14" label="CoreExample" source="#14:17" target="#17:22"><data key="label">CoreExample</data></edge>
    <edge id="#30:15" label="CoreExample" source="#14:17" target="#17:23"><data key="label">CoreExample</data></edge>
    <edge id="#30:16" label="CoreExample" source="#14:17" target="#17:25"><data key="label">CoreExample</data></edge>
    <edge id="#30:17" label="CoreExample" source="#14:20" target="#17:28"><data key="label">CoreExample</data></edge>
    <edge id="#30:18" label="CoreExample" source="#14:20" target="#17:26"><data key="label">CoreExample</data></edge>
    <edge id="#30:25" label="CoreExample" source="#13:37" target="#17:81"><data key="label">CoreExample</data></edge>
    <edge id="#30:26" label="CoreExample" source="#14:42" target="#17:82"><data key="label">CoreExample</data></edge>
    <edge id="#30:27" label="CoreExample" source="#13:56" target="#17:13"><data key="label">CoreExample</data></edge>
    <edge id="#30:28" label="CoreExample" source="#13:56" target="#17:12"><data key="label">CoreExample</data></edge>
    <edge id="#30:29" label="CoreExample" source="#13:15" target="#17:6"><data key="label">CoreExample</data></edge>
    <edge id="#30:30" label="CoreExample" source="#13:59" target="#17:8"><data key="label">CoreExample</data></edge>
    <edge id="#30:31" label="CoreExample" source="#13:60" target="#17:19"><data key="label">CoreExample</data></edge>
    <edge id="#30:32" label="CoreExample" source="#14:20" target="#17:29"><data key="label">CoreExample</data></edge>
    <edge id="#30:33" label="CoreExample" source="#14:12" target="#17:145"><data key="label">CoreExample</data></edge>
    <edge id="#30:34" label="CoreExample" source="#14:70" target="#17:176"><data key="label">CoreExample</data></edge>
    <edge id="#30:35" label="CoreExample" source="#14:70" target="#17:177"><data key="label">CoreExample</data></edge>
    <edge id="#30:36" label="CoreExample" source="#13:186" target="#17:188"><data key="label">CoreExample</data></edge>
    <edge id="#30:37" label="CoreExample" source="#13:199" target="#17:189"><data key="label">CoreExample</data></edge>
    <edge id="#31:1" label="MTExample" source="#13:36" target="#17:39"><data key="label">MTExample</data></edge>
    <edge id="#31:2" label="MTExample" source="#13:36" target="#17:41"><data key="label">MTExample</data></edge>
    <edge id="#31:3" label="MTExample" source="#13:36" target="#17:40"><data key="label">MTExample</data></edge>
    <edge id="#31:4" label="MTExample" source="#13:37" target="#17:42"><data key="label">MTExample</data></edge>
    <edge id="#31:5" label="MTExample" source="#13:37" target="#17:43"><data key="label">MTExample</data></edge>
    <edge id="#31:7" label="MTExample" source="#14:27" target="#17:45"><data key="label">MTExample</data></edge>
    <edge id="#31:8" label="MTExample" source="#14:28" target="#17:47"><data key="label">MTExample</data></edge>
    <edge id="#31:10" label="MTExample" source="#13:42" target="#17:48"><data key="label">MTExample</data></edge>
    <edge id="#31:11" label="MTExample" source="#13:42" target="#17:49"><data key="label">MTExample</data></edge>
    <edge id="#31:12" label="MTExample" source="#14:29" target="#17:51"><data key="label">MTExample</data></edge>
    <edge id="#31:13" label="MTExample" source="#14:29" target="#17:52"><data key="label">MTExample</data></edge>
    <edge id="#31:14" label="MTExample" source="#14:29" target="#17:53"><data key="label">MTExample</data></edge>
    <edge id="#31:15" label="MTExample" source="#14:30" target="#17:54"><data key="label">MTExample</data></edge>
    <edge id="#31:16" label="MTExample" source="#14:30" target="#17:55"><data key="label">MTExample</data></edge>
    <edge id="#31:17" label="MTExample" source="#14:31" target="#17:56"><data key="label">MTExample</data></edge>
    <edge id="#31:20" label="MTExample" source="#14:32" target="#17:57"><data key="label">MTExample</data></edge>
    <edge id="#31:21" label="MTExample" source="#14:32" target="#17:58"><data key="label">MTExample</data></edge>
    <edge id="#31:22" label="MTExample" source="#14:33" target="#17:59"><data key="label">MTExample</data></edge>
    <edge id="#31:23" label="MTExample" source="#13:43" target="#17:60"><data key="label">MTExample</data></edge>
    <edge id="#31:24" label="MTExample" source="#13:43" target="#17:61"><data key="label">MTExample</data></edge>
    <edge id="#31:25" label="MTExample" source="#13:43" target="#17:62"><data key="label">MTExample</data></edge>
    <edge id="#31:26" label="MTExample" source="#13:43" target="#17:63"><data key="label">MTExample</data></edge>
    <edge id="#31:27" label="MTExample" source="#13:44" target="#17:64"><data key="label">MTExample</data></edge>
    <edge id="#31:28" label="MTExample" source="#13:44" target="#17:65"><data key="label">MTExample</data></edge>
    <edge id="#31:30" label="MTExample" source="#14:36" target="#17:66"><data key="label">MTExample</data></edge>
    <edge id="#31:31" label="MTExample" source="#13:45" target="#17:67"><data key="label">MTExample</data></edge>
    <edge id="#31:32" label="MTExample" source="#13:47" target="#17:68"><data key="label">MTExample</data></edge>
    <edge id="#31:34" label="MTExample" source="#14:39" target="#17:69"><data key="label">MTExample</data></edge>
    <edge id="#31:35" label="MTExample" source="#14:39" target="#17:70"><data key="label">MTExample</data></edge>
    <edge id="#31:36" label="MTExample" source="#14:39" target="#17:71"><data key="label">MTExample</data></edge>
    <edge id="#31:37" label="MTExample" source="#14:40" target="#17:72"><data key="label">MTExample</data></edge>
    <edge id="#31:39" label="MTExample" source="#14:41" target="#17:74"><data key="label">MTExample</data></edge>
    <edge id="#31:40" label="MTExample" source="#14:42" target="#17:75"><data key="label">MTExample</data></edge>
    <edge id="#31:41" label="MTExample" source="#14:42" target="#17:76"><data key="label">MTExample</data></edge>
    <edge id="#31:42" label="MTExample" source="#14:42" target="#17:77"><data key="label">MTExample</data></edge>
    <edge id="#31:43" label="MTExample" source="#13:50" target="#17:78"><data key="label">MTExample</data></edge>
    <edge id="#31:45" label="MTExample" source="#14:43" target="#17:79"><data key="label">MTExample</data></edge>
    <edge id="#31:46" label="MTExample" source="#14:43" target="#17:80"><data key="label">MTExample</data></edge>
    <edge id="#31:48" label="MTExample" source="#14:33" target="#17:140"><data key="label">MTExample</data></edge>
    <edge id="#31:49" label="MTExample" source="#14:67" target="#17:141"><data key="label">MTExample</data></edge>
    <edge id="#31:50" label="MTExample" source="#14:33" target="#17:142"><data key="label">MTExample</data></edge>
    <edge id="#31:51" label="MTExample" source="#14:69" target="#17:143"><data key="label">MTExample</data></edge>
    <edge id="#31:52" label="MTExample" source="#14:26" target="#17:169"><data key="label">MTExample</data></edge>
    <edge id="#31:53" label="MTExample" source="#14:35" target="#17:171"><data key="label">MTExample</data></edge>
    <edge id="#31:54" label="MTExample" source="#14:68" target="#17:173"><data key="label">MTExample</data></edge>
    <edge id="#31:56" label="MTExample" source="#13:154" target="#17:183"><data key="label">MTExample</data></edge>
    <edge id="#31:57" label="MTExample" source="#13:145" target="#17:184"><data key="label">MTExample</data></edge>
    <edge id="#31:58" label="MTExample" source="#14:43" target="#17:186"><data key="label">MTExample</data></edge>
    <edge id="#31:59" label="MTExample" source="#13:160" target="#17:187"><data key="label">MTExample</data></edge>
    <edge id="#33:6" label="Related" source="#13:26" target="#13:27"><data key="label">Related</data></edge>
    <edge id="#33:7" label="Related" source="#13:25" target="#13:27"><data key="label">Related</data></edge>
    <edge id="#33:8" label="Related" source="#13:33" target="#14:16"><data key="label">Related</data></edge>
    <edge id="#33:9" label="Related" source="#14:15" target="#13:111"><data key="label">Related</data></edge>
    <edge id="#33:11" label="Related" source="#13:32" target="#13:34"><data key="label">Related</data></edge>
    <edge id="#33:12" label="Related" source="#13:32" target="#13:33"><data key="label">Related</data></edge>
    <edge id="#33:13" label="Related" source="#13:34" target="#13:32"><data key="label">Related</data></edge>
    <edge id="#33:14" label="Related" source="#13:34" target="#13:33"><data key="label">Related</data></edge>
    <edge id="#33:15" label="Related" source="#13:33" target="#13:32"><data key="label">Related</data></edge>
    <edge id="#33:16" label="Related" source="#13:58" target="#13:71"><data key="label">Related</data></edge>
    <edge id="#33:17" label="Related" source="#13:57" target="#13:71"><data key="label">Related</data></edge>
    <edge id="#33:18" label="Related" source="#13:28" target="#13:70"><data key="label">Related</data></edge>
    <edge id="#33:19" label="Related" source="#13:31" target="#14:54"><data key="label">Related</data></edge>
    <edge id="#33:20" label="Related" source="#14:54" target="#13:31"><data key="label">Related</data></edge>
    <edge id="#33:21" label="Related" source="#13:48" target="#14:28"><data key="label">Related</data></edge>
    <edge id="#33:22" label="Related" source="#14:28" target="#13:48"><data key="label">Related</data></edge>
    <edge id="#33:23" label="Related" source="#13:21" target="#13:78"><data key="label">Related</data></edge>
    <edge id="#36:0" label="CSError" source="#13:57" target="#15:2"><data key="label">CSError</data></edge>
    <edge id="#36:1" label="CSError" source="#13:14" target="#15:1"><data key="label">CSError</data></edge>
    <edge id="#36:2" label="CSError" source="#13:71" target="#15:17"><data key="label">CSError</data></edge>
    <edge id="#36:3" label="CSError" source="#13:71" target="#15:16"><data key="label">CSError</data></edge>
    <edge id="#36:4" label="CSError" source="#13:71" target="#15:18"><data key="label">CSError</data></edge>
    <edge id="#36:5" label="CSError" source="#14:17" target="#15:5"><data key="label">CSError</data></edge>
    <edge id="#36:6" label="CSError" source="#13:70" target="#15:15"><data key="label">CSError</data></edge>
    <edge id="#36:7" label="CSError" source="#14:16" target="#15:4"><data key="label">CSError</data></edge>
    <edge id="#36:8" label="CSError" source="#13:23" target="#15:3"><data key="label">CSError</data></edge>
    <edge id="#36:9" label="CSError" source="#13:34" target="#15:7"><data key="label">CSError</data></edge>
    <edge id="#36:10" label="CSError" source="#13:12" target="#15:0"><data key="label">CSError</data></edge>
    <edge id="#36:11" label="CSError" source="#13:111" target="#15:19"><data key="label">CSError</data></edge>
    <edge id="#36:12" label="CSError" source="#13:60" target="#15:20"><data key="label">CSError</data></edge>
    <edge id="#36:15" label="CSError" source="#13:33" target="#15:21"><data key="label">CSError</data></edge>
    <edge id="#36:16" label="CSError" source="#13:65" target="#17:94"><data key="label">CSError</data></edge>
    <edge id="#36:17" label="CSError" source="#14:24" target="#15:22"><data key="label">CSError</data></edge>
    <edge id="#36:18" label="CSError" source="#14:53" target="#17:150"><data key="label">CSError</data></edge>
    <edge id="#36:19" label="CSError" source="#14:62" target="#17:152"><data key="label">CSError</data></edge>
    <edge id="#36:20" label="CSError" source="#14:65" target="#17:154"><data key="label">CSError</data></edge>
    <edge id="#36:21" label="CSError" source="#14:58" target="#17:157"><data key="label">CSError</data></edge>
    <edge id="#36:22" label="CSError" source="#14:58" target="#17:158"><data key="label">CSError</data></edge>
    <edge id="#36:23" label="CSError" source="#14:57" target="#17:161"><data key="label">CSError</data></edge>
    <edge id="#36:24" label="CSError" source="#14:3" target="#17:163"><data key="label">CSError</data></edge>
    <edge id="#36:25" label="CSError" source="#14:20" target="#15:23"><data key="label">CSError</data></edge>
    <edge id="#36:26" label="CSError" source="#14:20" target="#15:24"><data key="label">CSError</data></edge>
    <edge id="#36:27" label="CSError" source="#14:22" target="#15:25"><data key="label">CSError</data></edge>
    <edge id="#36:28" label="CSError" source="#13:56" target="#15:26"><data key="label">CSError</data></edge>
    <edge id="#36:29" label="CSError" source="#13:66" target="#15:27"><data key="label">CSError</data></edge>
    <edge id="#36:30" label="CSError" source="#13:74" target="#15:31"><data key="label">CSError</data></edge>
    <edge id="#37:0" label="MTError" source="#14:28" target="#15:8"><data key="label">MTError</data></edge>
    <edge id="#37:1" label="MTError" source="#14:30" target="#15:9"><data key="label">MTError</data></edge>
    <edge id="#37:2" label="MTError" source="#13:47" target="#15:13"><data key="label">MTError</data></edge>
    <edge id="#37:3" label="MTError" source="#14:31" target="#15:11"><data key="label">MTError</data></edge>
    <edge id="#37:4" label="MTError" source="#14:31" target="#15:10"><data key="label">MTError</data></edge>
    <edge id="#37:5" label="MTError" source="#13:44" target="#15:12"><data key="label">MTError</data></edge>
    <edge id="#37:6" label="MTError" source="#13:50" target="#15:14"><data key="label">MTError</data></edge>
    <edge id="#37:7" label="MTError" source="#14:26" target="#17:170"><data key="label">MTError</data></edge>
    <edge id="#37:8" label="MTError" source="#14:35" target="#17:172"><data key="label">MTError</data></edge>
    <edge id="#37:9" label="MTError" source="#14:68" target="#17:174"><data key="label">MTError</data></edge>
    <edge id="#37:10" label="MTError" source="#13:128" target="#15:28"><data key="label">MTError</data></edge>
    <edge id="#37:11" label="MTError" source="#13:134" target="#15:29"><data key="label">MTError</data></edge>
    <edge id="#37:12" label="MTError" source="#13:147" target="#15:30"><data key="label">MTError</data></edge>
    <edge id="#38:0" label="CoreError" source="#13:196" target="#15:32"><data key="label">CoreError</data></edge>
    <edge id="#38:1" label="CoreError" source="#13:202" target="#15:33"><data key="label">CoreError</data></edge>
    <edge id="#39:0" label="exRelated" source="#13:28" target="#13:80"><data key="label">exRelated</data></edge>
    <edge id="#39:1" label="exRelated" source="#13:65" target="#13:82"><data key="label">exRelated</data></edge>
    <edge id="#39:2" label="exRelated" source="#13:55" target="#13:82"><data key="label">exRelated</data></edge>
    <edge id="#41:0" label="HasCode" source="#14:19" target="#40:0"><data key="label">HasCode</data></edge>
    <edge id="#41:1" label="HasCode" source="#14:17" target="#40:1"><data key="label">HasCode</data></edge>
    <edge id="#41:2" label="HasCode" source="#14:18" target="#40:2"><data key="label">HasCode</data></edge>
    <edge id="#41:3" label="HasCode" source="#14:56" target="#40:3"><data key="label">HasCode</data></edge>
    <edge id="#41:5" label="HasCode" source="#13:70" target="#40:5"><data key="label">HasCode</data></edge>
    <edge id="#41:6" label="HasCode" source="#13:27" target="#40:6"><data key="label">HasCode</data></edge>
    <edge id="#41:7" label="HasCode" source="#13:29" target="#40:7"><data key="label">HasCode</data></edge>
    <edge id="#41:8" label="HasCode" source="#13:66" target="#40:8"><data key="label">HasCode</data></edge>
    <edge id="#41:9" label="HasCode" source="#13:56" target="#40:9"><data key="label">HasCode</data></edge>
    <edge id="#41:10" label="HasCode" source="#13:58" target="#40:10"><data key="label">HasCode</data></edge>
    <edge id="#41:11" label="HasCode" source="#14:44" target="#40:11"><data key="label">HasCode</data></edge>
    <edge id="#41:12" label="HasCode" source="#14:46" target="#40:12"><data key="label">HasCode</data></edge>
    <edge id="#41:13" label="HasCode" source="#14:47" target="#40:13"><data key="label">HasCode</data></edge>
    <edge id="#41:14" label="HasCode" source="#14:45" target="#40:14"><data key="label">HasCode</data></edge>
    <edge id="#41:15" label="HasCode" source="#13:16" target="#40:15"><data key="label">HasCode</data></edge>
    <edge id="#41:16" label="HasCode" source="#13:32" target="#40:16"><data key="label">HasCode</data></edge>
    <edge id="#41:17" label="HasCode" source="#13:75" target="#40:17"><data key="label">HasCode</data></edge>
    <edge id="#41:18" label="HasCode" source="#13:76" target="#40:18"><data key="label">HasCode</data></edge>
    <edge id="#41:19" label="HasCode" source="#13:77" target="#40:19"><data key="label">HasCode</data></edge>
    <edge id="#41:20" label="HasCode" source="#13:57" target="#40:20"><data key="label">HasCode</data></edge>
    <edge id="#41:21" label="HasCode" source="#14:11" target="#40:21"><data key="label">HasCode</data></edge>
    <edge id="#41:22" label="HasCode" source="#14:48" target="#40:22"><data key="label">HasCode</data></edge>
    <edge id="#41:23" label="HasCode" source="#13:31" target="#40:23"><data key="label">HasCode</data></edge>
    <edge id="#41:24" label="HasCode" source="#14:24" target="#40:24"><data key="label">HasCode</data></edge>
    <edge id="#41:25" label="HasCode" source="#14:12" target="#40:25"><data key="label">HasCode</data></edge>
    <edge id="#41:26" label="HasCode" source="#14:50" target="#40:26"><data key="label">HasCode</data></edge>
    <edge id="#41:27" label="HasCode" source="#13:71" target="#40:27"><data key="label">HasCode</data></edge>
    <edge id="#41:28" label="HasCode" source="#13:74" target="#40:28"><data key="label">HasCode</data></edge>
    <edge id="#41:29" label="HasCode" source="#13:111" target="#40:29"><data key="label">HasCode</data></edge>
    <edge id="#41:30" label="HasCode" source="#14:8" target="#40:30"><data key="label">HasCode</data></edge>
    <edge id="#41:31" label="HasCode" source="#14:53" target="#40:31"><data key="label">HasCode</data></edge>
    <edge id="#41:32" label="HasCode" source="#13:15" target="#40:32"><data key="label">HasCode</data></edge>
    <edge id="#41:33" label="HasCode" source="#13:59" target="#40:33"><data key="label">HasCode</data></edge>
    <edge id="#41:34" label="HasCode" source="#14:55" target="#40:3"><data key="label">HasCode</data></edge>
    <edge id="#41:35" label="HasCode" source="#14:54" target="#40:34"><data key="label">HasCode</data></edge>
    <edge id="#41:36" label="HasCode" source="#13:33" target="#40:35"><data key="label">HasCode</data></edge>
    <edge id="#41:37" label="HasCode" source="#13:34" target="#40:36"><data key="label">HasCode</data></edge>
    <edge id="#41:38" label="HasCode" source="#14:16" target="#40:37"><data key="label">HasCode</data></edge>
    <edge id="#41:39" label="HasCode" source="#13:10" target="#40:38"><data key="label">HasCode</data></edge>
    <edge id="#41:40" label="HasCode" source="#13:114" target="#40:39"><data key="label">HasCode</data></edge>
    <edge id="#41:41" label="HasCode" source="#14:4" target="#40:40"><data key="label">HasCode</data></edge>
    <edge id="#41:42" label="HasCode" source="#13:23" target="#40:37"><data key="label">HasCode</data></edge>
    <edge id="#41:43" label="HasCode" source="#13:112" target="#40:41"><data key="label">HasCode</data></edge>
    <edge id="#41:44" label="HasCode" source="#13:65" target="#40:42"><data key="label">HasCode</data></edge>
    <edge id="#41:45" label="HasCode" source="#13:21" target="#40:43"><data key="label">HasCode</data></edge>
    <edge id="#41:47" label="HasCode" source="#13:69" target="#40:44"><data key="label">HasCode</data></edge>
    <edge id="#41:48" label="HasCode" source="#13:60" target="#40:45"><data key="label">HasCode</data></edge>
    <edge id="#41:49" label="HasCode" source="#14:43" target="#40:46"><data key="label">HasCode</data></edge>
    <edge id="#41:50" label="HasCode" source="#14:29" target="#40:47"><data key="label">HasCode</data></edge>
    <edge id="#41:51" label="HasCode" source="#13:43" target="#40:48"><data key="label">HasCode</data></edge>
    <edge id="#41:52" label="HasCode" source="#14:31" target="#40:49"><data key="label">HasCode</data></edge>
    <edge id="#41:53" label="HasCode" source="#14:27" target="#40:50"><data key="label">HasCode</data></edge>
    <edge id="#41:54" label="HasCode" source="#14:68" target="#40:51"><data key="label">HasCode</data></edge>
    <edge id="#41:55" label="HasCode" source="#14:67" target="#40:52"><data key="label">HasCode</data></edge>
    <edge id="#41:56" label="HasCode" source="#13:59" target="#26:9"><data key="label">HasCode</data></edge>
  </graph>
</graphml>
