type Query {
  # Example
  # usersBySubstring(substring: String, first: Int = 10, offset: Int = 0): [User] @cypher(statement: "MATCH (u:User) WHERE u.name CONTAINS $substring RETURN u")

  allResources(emptyParam: Boolean): [Resource] @cypher(statement: "MATCH (r: Resource) RETURN r")
}

type Mutation {
  # Find the root node. Find the leaf node. Then create a TEACHES edge between them
  AddConceptToConcept(rootid: ID, leafid: ID): Concept @cypher(statement: "MATCH (root:Concept {id: $rootid}) MATCH (leaf:Concept {id: $leafid}) CREATE(root)-[edge:TEACHES]->(leaf) RETURN root")

  # DeleteAll does not work due to this error:
  # "Cannot read property 'selections' of undefined"
  # DeleteAll(emptyParam: Boolean): Int @cyper(statement: "MATCH (n) DETACH DELETE (n) RETURN COUNT(n)")
}

type Resource {
  id: ID!
  title: String!
  institution: String # if we want to filter by institution, this should be a node
  concepts: [Concept] @relation(name: "TEACHES" direction: "OUT")
  description: String

  # Source: https://stackoverflow.com/questions/31079881/simple-recursive-cypher-query/31080118
  allConcepts: [Concept] @cypher(statement: "MATCH (this)-[:TEACHES *1..]->(c:Concept) return c")
}

type Concept {
  id: ID!
  title: String!
  resource: Resource @relation(name: "TEACHES" direction: "IN")
  concepts: [Concept] @relation(name: "CONTAINS" direction: "BOTH")
  description: Description @relation(name: "EXPLAINS" direction: "OUT")
  # Note: changing the type from Description to Component broke the mutation
  visualType: visualType

  # Get all child concepts of Concept node
  allConcepts: [Concept] @cypher(statement: "MATCH (this)-[:TEACHES *1..]->(c:Concept) return c")
}
 
interface Component {
  id: ID!
  concept: Concept @relation(name: "EXPLAINS", direction: "IN")
}

type Description implements Component {
  id: ID!
  body: String
  concept: Concept @relation(name: "EXPLAINS", direction: "IN")
}

enum visualType {
  root
  theme
  default
  leaf
}
