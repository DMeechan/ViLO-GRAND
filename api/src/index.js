/**
 * Import libraries to run the Apollo GraphQL server (on top of Express) and connect to neo4k
 */
import { ApolloServer, gql } from 'apollo-server-express';
import express from 'express';
import { v1 as neo4j } from 'neo4j-driver';
import { makeAugmentedSchema } from 'neo4j-graphql-js';
// import open from 'open';

// Import our GraphQL type definitions and resolver functions
import { typeDefs, resolvers } from './schema/graphql-schema';

/**
 * Import all environment variables from the .env file
 * (the .env file isn't commited to version control, so make sure you create one using the example.env file)
 */
import dotenv from 'dotenv';
dotenv.config();

const {
  GRAPHQL_LISTEN_PORT,
  NEO4J_URI,
  NEO4J_USER,
  NEO4J_PASSWORD,
} = process.env;
const app = express();

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema({
  typeDefs,
});

/**
 * addMockFunctionsToSchema enables the schema to serve mock data to the client
 * which is super useful for testing the back-end server without setting up
 * a Neo4j database with seed data. Learn more about it here:
 * https://www.apollographql.com/docs/graphql-tools/mocking.html
 *
 * Note that this was for Apollo Server v1. It might not work with v2
 * Learn more about v2: https://www.apollographql.com/docs/apollo-server/migration-two-dot
 */
// addMockFunctionsToSchema({ schema });

/**
 * Connect to Neo4j database using credentials stored in environment variables
 * Or using the default credentials (for a local database)
 */
const driver = neo4j.driver(
  NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(NEO4J_USER || 'neo4j', NEO4J_PASSWORD || 'letmein')
);

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: { driver },
  schema,
  resolvers,
  introspection: true,
  playground: true,
});

// Specify port and path for GraphQL endpoint
const port = GRAPHQL_LISTEN_PORT || 4001;
const path = '/graphql';

/*
 * Optionally apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware({ app, path });

/*
 * Start server
 */
console.log(`ðŸ›« Attempting to start API server...`);
const url = `http://localhost:${port}${path}`;

app.listen({ port, path }, () => {
  console.log(`ðŸš€ GraphQL API server ready at ${url}`);
  // open(url); # open URL in browser
});
